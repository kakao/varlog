// Code generated by MockGen. DO NOT EDIT.
// Source: github.daumkakao.com/varlog/varlog/internal/varlogadm (interfaces: StorageNodeWatcher,StatRepository)

// Package varlogadm is a generated GoMock package.
package varlogadm

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.daumkakao.com/varlog/varlog/pkg/types"
	snpb "github.daumkakao.com/varlog/varlog/proto/snpb"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
)

// MockStorageNodeWatcher is a mock of StorageNodeWatcher interface.
type MockStorageNodeWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockStorageNodeWatcherMockRecorder
}

// MockStorageNodeWatcherMockRecorder is the mock recorder for MockStorageNodeWatcher.
type MockStorageNodeWatcherMockRecorder struct {
	mock *MockStorageNodeWatcher
}

// NewMockStorageNodeWatcher creates a new mock instance.
func NewMockStorageNodeWatcher(ctrl *gomock.Controller) *MockStorageNodeWatcher {
	mock := &MockStorageNodeWatcher{ctrl: ctrl}
	mock.recorder = &MockStorageNodeWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageNodeWatcher) EXPECT() *MockStorageNodeWatcherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorageNodeWatcher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageNodeWatcherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageNodeWatcher)(nil).Close))
}

// Run mocks base method.
func (m *MockStorageNodeWatcher) Serve() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockStorageNodeWatcherMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockStorageNodeWatcher)(nil).Serve))
}

// MockStatRepository is a mock of StatRepository interface.
type MockStatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStatRepositoryMockRecorder
}

// MockStatRepositoryMockRecorder is the mock recorder for MockStatRepository.
type MockStatRepositoryMockRecorder struct {
	mock *MockStatRepository
}

// NewMockStatRepository creates a new mock instance.
func NewMockStatRepository(ctrl *gomock.Controller) *MockStatRepository {
	mock := &MockStatRepository{ctrl: ctrl}
	mock.recorder = &MockStatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatRepository) EXPECT() *MockStatRepositoryMockRecorder {
	return m.recorder
}

// GetAppliedIndex mocks base method.
func (m *MockStatRepository) GetAppliedIndex() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedIndex")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetAppliedIndex indicates an expected call of GetAppliedIndex.
func (mr *MockStatRepositoryMockRecorder) GetAppliedIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedIndex", reflect.TypeOf((*MockStatRepository)(nil).GetAppliedIndex))
}

// GetLogStream mocks base method.
func (m *MockStatRepository) GetLogStream(arg0 types.LogStreamID) *LogStreamStat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogStream", arg0)
	ret0, _ := ret[0].(*LogStreamStat)
	return ret0
}

// GetLogStream indicates an expected call of GetLogStream.
func (mr *MockStatRepositoryMockRecorder) GetLogStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogStream", reflect.TypeOf((*MockStatRepository)(nil).GetLogStream), arg0)
}

// GetStorageNode mocks base method.
func (m *MockStatRepository) GetStorageNode(arg0 types.StorageNodeID) *varlogpb.StorageNodeDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageNode", arg0)
	ret0, _ := ret[0].(*varlogpb.StorageNodeDescriptor)
	return ret0
}

// GetStorageNode indicates an expected call of GetStorageNode.
func (mr *MockStatRepositoryMockRecorder) GetStorageNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageNode", reflect.TypeOf((*MockStatRepository)(nil).GetStorageNode), arg0)
}

// Refresh mocks base method.
func (m *MockStatRepository) Refresh(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh", arg0)
}

// Refresh indicates an expected call of Refresh.
func (mr *MockStatRepositoryMockRecorder) Refresh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockStatRepository)(nil).Refresh), arg0)
}

// Report mocks base method.
func (m *MockStatRepository) Report(arg0 context.Context, arg1 *snpb.StorageNodeMetadataDescriptor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Report", arg0, arg1)
}

// Report indicates an expected call of Report.
func (mr *MockStatRepositoryMockRecorder) Report(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockStatRepository)(nil).Report), arg0, arg1)
}

// SetLogStreamStatus mocks base method.
func (m *MockStatRepository) SetLogStreamStatus(arg0 types.LogStreamID, arg1 varlogpb.LogStreamStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogStreamStatus", arg0, arg1)
}

// SetLogStreamStatus indicates an expected call of SetLogStreamStatus.
func (mr *MockStatRepositoryMockRecorder) SetLogStreamStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogStreamStatus", reflect.TypeOf((*MockStatRepository)(nil).SetLogStreamStatus), arg0, arg1)
}
