// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/replicator.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.daumkakao.com/varlog/varlog/pkg/varlog/types"
)

// MockReplicator is a mock of Replicator interface.
type MockReplicator struct {
	ctrl     *gomock.Controller
	recorder *MockReplicatorMockRecorder
}

// MockReplicatorMockRecorder is the mock recorder for MockReplicator.
type MockReplicatorMockRecorder struct {
	mock *MockReplicator
}

// NewMockReplicator creates a new mock instance.
func NewMockReplicator(ctrl *gomock.Controller) *MockReplicator {
	mock := &MockReplicator{ctrl: ctrl}
	mock.recorder = &MockReplicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplicator) EXPECT() *MockReplicatorMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockReplicator) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockReplicatorMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockReplicator)(nil).Run), arg0)
}

// Close mocks base method.
func (m *MockReplicator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockReplicatorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReplicator)(nil).Close))
}

// Replicate mocks base method.
func (m *MockReplicator) Replicate(arg0 context.Context, arg1 types.LLSN, arg2 []byte, arg3 []Replica) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Replicate indicates an expected call of Replicate.
func (mr *MockReplicatorMockRecorder) Replicate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicate", reflect.TypeOf((*MockReplicator)(nil).Replicate), arg0, arg1, arg2, arg3)
}
