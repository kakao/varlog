package storage

import (
	"go.uber.org/zap/zapcore"

	"github.com/kakao/varlog/pkg/types"
)

// CommitContext is metadata that represents the environment in which the
// commit is issued; for instance, the commit's version, the largest GLSN
// having the same commit version, and the commit range of this log stream.
//
// When a storage node restarts and, thus, its log stream replicas also
// restart, the log stream executor which runs the log stream replica should
// recover the previous status -
// internal/storagenode/logstream.(logStreamContext). To regain their prior
// status, they utilize the CommitContext.
//
// Here are examples of the CommitContext. You can see
// [github.com/kakao/varlog/proto/snpb.LogStreamCommitResult] to refer to
// related commit messages.
//
//	// LogStream 1 has not committed any log entries, and LogStream 2 has
//	// committed ten.
//	CommitContext{
//		// LogStream 1
//	    Version: 1,
//	    HighWatermark: 10,
//	    CommittedGLSNBegin: 1,
//	    CommittedGLSNEnd: 1,
//	    CommittedLLSNBegin: 1,
//	}
//	CommitContext{
//		// LogStream 2
//	    Version: 1,
//	    HighWatermark: 10,
//	    CommittedGLSNBegin: 1,
//	    CommittedGLSNEnd: 11,
//	    CommittedLLSNBegin: 1,
//	}
//
//	// LogStream 1 has not committed any log entries again, and LogStream 2 has
//	// committed ten.
//	// LogStream 1 can recover that there was no log entry committed by loading
//	// this commit context during restarting.
//	CommitContext{
//		// LogStream 1
//	    Version: 2,
//	    HighWatermark: 20,
//	    CommittedGLSNBegin: 1,
//	    CommittedGLSNEnd: 1,
//	    CommittedLLSNBegin: 1,
//	}
//	CommitContext{
//		// LogStream 2
//	    Version: 2,
//	    HighWatermark: 20,
//	    CommittedGLSNBegin: 11,
//	    CommittedGLSNEnd: 21,
//	    CommittedLLSNBegin: 11,
//	}
//
//	// LogStream 1 has committed ten log entries, and LogStream 2 has committed
//	// ten.
//	CommitContext{
//		// LogStream 1
//		Version: 3,
//		HighWatermark: 40,
//		CommittedGLSNBegin: 21,
//		CommittedGLSNEnd: 31,
//		CommittedLLSNBegin: 1,
//	}
//	CommitContext{
//		// LogStream 2
//		Version: 3,
//		HighWatermark: 40,
//		CommittedGLSNBegin: 31,
//		CommittedGLSNEnd: 41,
//		CommittedLLSNBegin: 21,
//	}
//
//	// LogStream 1 has committed ten log entries, and LogStream 2 has not.
//	// LogStream 2 can recover the GLSN and LLSN of the last committed log entry
//	// by loading this commit context when restarting itself.
//	CommitContext{
//		// LogStream 1
//		Version: 4,
//		HighWatermark: 50,
//		CommittedGLSNBegin: 41,
//		CommittedGLSNEnd: 51,
//		CommittedLLSNBegin: 11,
//	}
//	CommitContext{
//		// LogStream 2
//		Version: 4,
//		HighWatermark: 50,
//		CommittedGLSNBegin: 41,
//		CommittedGLSNEnd: 41,
//		CommittedLLSNBegin: 31,
//	}
type CommitContext struct {
	// Version is the unique identifier of the commit generated by the metadata
	// repository.
	Version types.Version
	// HighWatermark is the maximum GLSN in the versioned commit.
	HighWatermark types.GLSN
	// CommittedGLSNBegin is the start GLSN of this commit.
	CommittedGLSNBegin types.GLSN
	// CommittedGLSNEnd is the end GLSN of this commit exclusively. If none of
	// the log entries are committed, it equals the CommittedGLSNBegin.
	// The GLSN of the local high watermark in a log stream can be inferred by
	// CommittedGLSNEnd minus one. Even if the last commit does not contain any
	// log entries, CommitedGLSNEnd - 1 should be the GLSN of the local high
	// watermark.
	CommittedGLSNEnd types.GLSN
	// CommittedLLSNBegin is the starting LLSN of this commit.
	// The CommittedLLSNEnd can be inferred by the length of committed log
	// entries computed by the CommittedGLSNBegin and CommittedGLSNEnd and
	// CommittedLLSNBegin. Similarly, the CommittedLLSNEnd - 1 is the LLSN of
	// the local high watermark since the LLSNs are sequential.
	CommittedLLSNBegin types.LLSN
}

func (cc CommitContext) Empty() bool {
	return cc.CommittedGLSNEnd-cc.CommittedGLSNBegin == 0
}

func (cc CommitContext) Equal(other CommitContext) bool {
	return cc.Version == other.Version &&
		cc.CommittedGLSNBegin == other.CommittedGLSNBegin &&
		cc.CommittedGLSNEnd == other.CommittedGLSNEnd &&
		cc.CommittedLLSNBegin == other.CommittedLLSNBegin
}

func (cc CommitContext) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	enc.AddUint64("version", uint64(cc.Version))
	enc.AddUint64("highWatermark", uint64(cc.HighWatermark))
	enc.AddUint64("committedGLSNBegin", uint64(cc.CommittedGLSNBegin))
	enc.AddUint64("committedGLSNEnd", uint64(cc.CommittedGLSNEnd))
	enc.AddUint64("committedLLSNBegin", uint64(cc.CommittedLLSNBegin))
	return nil
}
