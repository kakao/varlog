// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/log_stream_executor.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "github.daumkakao.com/varlog/varlog/pkg/varlog/types"
	reflect "reflect"
)

// MockLogStreamExecutor is a mock of LogStreamExecutor interface
type MockLogStreamExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockLogStreamExecutorMockRecorder
}

// MockLogStreamExecutorMockRecorder is the mock recorder for MockLogStreamExecutor
type MockLogStreamExecutorMockRecorder struct {
	mock *MockLogStreamExecutor
}

// NewMockLogStreamExecutor creates a new mock instance
func NewMockLogStreamExecutor(ctrl *gomock.Controller) *MockLogStreamExecutor {
	mock := &MockLogStreamExecutor{ctrl: ctrl}
	mock.recorder = &MockLogStreamExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogStreamExecutor) EXPECT() *MockLogStreamExecutorMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockLogStreamExecutor) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run
func (mr *MockLogStreamExecutorMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockLogStreamExecutor)(nil).Run), ctx)
}

// Close mocks base method
func (m *MockLogStreamExecutor) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockLogStreamExecutorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogStreamExecutor)(nil).Close))
}

// LogStreamID mocks base method
func (m *MockLogStreamExecutor) LogStreamID() types.LogStreamID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogStreamID")
	ret0, _ := ret[0].(types.LogStreamID)
	return ret0
}

// LogStreamID indicates an expected call of LogStreamID
func (mr *MockLogStreamExecutorMockRecorder) LogStreamID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogStreamID", reflect.TypeOf((*MockLogStreamExecutor)(nil).LogStreamID))
}

// Read mocks base method
func (m *MockLogStreamExecutor) Read(ctx context.Context, glsn types.GLSN) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, glsn)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockLogStreamExecutorMockRecorder) Read(ctx, glsn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockLogStreamExecutor)(nil).Read), ctx, glsn)
}

// Subscribe mocks base method
func (m *MockLogStreamExecutor) Subscribe(ctx context.Context, glsn types.GLSN) (<-chan SubscribeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, glsn)
	ret0, _ := ret[0].(<-chan SubscribeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockLogStreamExecutorMockRecorder) Subscribe(ctx, glsn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockLogStreamExecutor)(nil).Subscribe), ctx, glsn)
}

// Append mocks base method
func (m *MockLogStreamExecutor) Append(ctx context.Context, data []byte, backups ...Replica) (types.GLSN, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, data}
	for _, a := range backups {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].(types.GLSN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append
func (mr *MockLogStreamExecutorMockRecorder) Append(ctx, data interface{}, backups ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, data}, backups...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockLogStreamExecutor)(nil).Append), varargs...)
}

// Trim mocks base method
func (m *MockLogStreamExecutor) Trim(ctx context.Context, glsn types.GLSN, async bool) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trim", ctx, glsn, async)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trim indicates an expected call of Trim
func (mr *MockLogStreamExecutorMockRecorder) Trim(ctx, glsn, async interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trim", reflect.TypeOf((*MockLogStreamExecutor)(nil).Trim), ctx, glsn, async)
}

// Replicate mocks base method
func (m *MockLogStreamExecutor) Replicate(ctx context.Context, llsn types.LLSN, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicate", ctx, llsn, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replicate indicates an expected call of Replicate
func (mr *MockLogStreamExecutorMockRecorder) Replicate(ctx, llsn, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicate", reflect.TypeOf((*MockLogStreamExecutor)(nil).Replicate), ctx, llsn, data)
}

// GetReport mocks base method
func (m *MockLogStreamExecutor) GetReport() UncommittedLogStreamStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport")
	ret0, _ := ret[0].(UncommittedLogStreamStatus)
	return ret0
}

// GetReport indicates an expected call of GetReport
func (mr *MockLogStreamExecutorMockRecorder) GetReport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockLogStreamExecutor)(nil).GetReport))
}

// Commit mocks base method
func (m *MockLogStreamExecutor) Commit(arg0 CommittedLogStreamStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockLogStreamExecutorMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockLogStreamExecutor)(nil).Commit), arg0)
}
