// Code generated by MockGen. DO NOT EDIT.
// Source: github.daumkakao.com/varlog/varlog/internal/storagenode (interfaces: Management,LogStreamExecutorGetter)

// Package storagenode is a generated GoMock package.
package storagenode

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.daumkakao.com/varlog/varlog/pkg/types"
	snpb "github.daumkakao.com/varlog/varlog/proto/snpb"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
)

// MockManagement is a mock of Management interface
type MockManagement struct {
	ctrl     *gomock.Controller
	recorder *MockManagementMockRecorder
}

// MockManagementMockRecorder is the mock recorder for MockManagement
type MockManagementMockRecorder struct {
	mock *MockManagement
}

// NewMockManagement creates a new mock instance
func NewMockManagement(ctrl *gomock.Controller) *MockManagement {
	mock := &MockManagement{ctrl: ctrl}
	mock.recorder = &MockManagementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagement) EXPECT() *MockManagementMockRecorder {
	return m.recorder
}

// AddLogStream mocks base method
func (m *MockManagement) AddLogStream(arg0 context.Context, arg1 types.ClusterID, arg2 types.StorageNodeID, arg3 types.LogStreamID, arg4 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogStream", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLogStream indicates an expected call of AddLogStream
func (mr *MockManagementMockRecorder) AddLogStream(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogStream", reflect.TypeOf((*MockManagement)(nil).AddLogStream), arg0, arg1, arg2, arg3, arg4)
}

// GetMetadata mocks base method
func (m *MockManagement) GetMetadata(arg0 context.Context, arg1 types.ClusterID, arg2 snpb.MetadataType) (*varlogpb.StorageNodeMetadataDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(*varlogpb.StorageNodeMetadataDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockManagementMockRecorder) GetMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockManagement)(nil).GetMetadata), arg0, arg1, arg2)
}

// RemoveLogStream mocks base method
func (m *MockManagement) RemoveLogStream(arg0 context.Context, arg1 types.ClusterID, arg2 types.StorageNodeID, arg3 types.LogStreamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLogStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLogStream indicates an expected call of RemoveLogStream
func (mr *MockManagementMockRecorder) RemoveLogStream(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLogStream", reflect.TypeOf((*MockManagement)(nil).RemoveLogStream), arg0, arg1, arg2, arg3)
}

// Seal mocks base method
func (m *MockManagement) Seal(arg0 context.Context, arg1 types.ClusterID, arg2 types.StorageNodeID, arg3 types.LogStreamID, arg4 types.GLSN) (varlogpb.LogStreamStatus, types.GLSN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(varlogpb.LogStreamStatus)
	ret1, _ := ret[1].(types.GLSN)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Seal indicates an expected call of Seal
func (mr *MockManagementMockRecorder) Seal(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockManagement)(nil).Seal), arg0, arg1, arg2, arg3, arg4)
}

// StorageNodeID mocks base method
func (m *MockManagement) StorageNodeID() types.StorageNodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageNodeID")
	ret0, _ := ret[0].(types.StorageNodeID)
	return ret0
}

// StorageNodeID indicates an expected call of StorageNodeID
func (mr *MockManagementMockRecorder) StorageNodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageNodeID", reflect.TypeOf((*MockManagement)(nil).StorageNodeID))
}

// Sync mocks base method
func (m *MockManagement) Sync(arg0 context.Context, arg1 types.ClusterID, arg2 types.StorageNodeID, arg3 types.LogStreamID, arg4 Replica, arg5 types.GLSN) (*snpb.SyncStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*snpb.SyncStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync
func (mr *MockManagementMockRecorder) Sync(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockManagement)(nil).Sync), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Unseal mocks base method
func (m *MockManagement) Unseal(arg0 context.Context, arg1 types.ClusterID, arg2 types.StorageNodeID, arg3 types.LogStreamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unseal", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unseal indicates an expected call of Unseal
func (mr *MockManagementMockRecorder) Unseal(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unseal", reflect.TypeOf((*MockManagement)(nil).Unseal), arg0, arg1, arg2, arg3)
}

// MockLogStreamExecutorGetter is a mock of LogStreamExecutorGetter interface
type MockLogStreamExecutorGetter struct {
	ctrl     *gomock.Controller
	recorder *MockLogStreamExecutorGetterMockRecorder
}

// MockLogStreamExecutorGetterMockRecorder is the mock recorder for MockLogStreamExecutorGetter
type MockLogStreamExecutorGetterMockRecorder struct {
	mock *MockLogStreamExecutorGetter
}

// NewMockLogStreamExecutorGetter creates a new mock instance
func NewMockLogStreamExecutorGetter(ctrl *gomock.Controller) *MockLogStreamExecutorGetter {
	mock := &MockLogStreamExecutorGetter{ctrl: ctrl}
	mock.recorder = &MockLogStreamExecutorGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogStreamExecutorGetter) EXPECT() *MockLogStreamExecutorGetterMockRecorder {
	return m.recorder
}

// GetLogStreamExecutor mocks base method
func (m *MockLogStreamExecutorGetter) GetLogStreamExecutor(arg0 types.LogStreamID) (LogStreamExecutor, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogStreamExecutor", arg0)
	ret0, _ := ret[0].(LogStreamExecutor)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetLogStreamExecutor indicates an expected call of GetLogStreamExecutor
func (mr *MockLogStreamExecutorGetterMockRecorder) GetLogStreamExecutor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogStreamExecutor", reflect.TypeOf((*MockLogStreamExecutorGetter)(nil).GetLogStreamExecutor), arg0)
}

// GetLogStreamExecutors mocks base method
func (m *MockLogStreamExecutorGetter) GetLogStreamExecutors() []LogStreamExecutor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogStreamExecutors")
	ret0, _ := ret[0].([]LogStreamExecutor)
	return ret0
}

// GetLogStreamExecutors indicates an expected call of GetLogStreamExecutors
func (mr *MockLogStreamExecutorGetterMockRecorder) GetLogStreamExecutors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogStreamExecutors", reflect.TypeOf((*MockLogStreamExecutorGetter)(nil).GetLogStreamExecutors))
}
