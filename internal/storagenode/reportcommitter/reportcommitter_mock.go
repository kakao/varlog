// Code generated by MockGen. DO NOT EDIT.
// Source: github.daumkakao.com/varlog/varlog/internal/storagenode/reportcommitter (interfaces: ReportCommitter,Getter)

// Package reportcommitter is a generated GoMock package.
package reportcommitter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.daumkakao.com/varlog/varlog/pkg/types"
	snpb "github.daumkakao.com/varlog/varlog/proto/snpb"
)

// MockReportCommitter is a mock of ReportCommitter interface.
type MockReportCommitter struct {
	ctrl     *gomock.Controller
	recorder *MockReportCommitterMockRecorder
}

// MockReportCommitterMockRecorder is the mock recorder for MockReportCommitter.
type MockReportCommitterMockRecorder struct {
	mock *MockReportCommitter
}

// NewMockReportCommitter creates a new mock instance.
func NewMockReportCommitter(ctrl *gomock.Controller) *MockReportCommitter {
	mock := &MockReportCommitter{ctrl: ctrl}
	mock.recorder = &MockReportCommitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportCommitter) EXPECT() *MockReportCommitterMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockReportCommitter) Commit(arg0 context.Context, arg1 *snpb.LogStreamCommitResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockReportCommitterMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockReportCommitter)(nil).Commit), arg0, arg1)
}

// GetReport mocks base method.
func (m *MockReportCommitter) GetReport(arg0 context.Context) (*snpb.LogStreamUncommitReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", arg0)
	ret0, _ := ret[0].(*snpb.LogStreamUncommitReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockReportCommitterMockRecorder) GetReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockReportCommitter)(nil).GetReport), arg0)
}

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// ReportCommitter mocks base method.
func (m *MockGetter) ReportCommitter(arg0 types.LogStreamID) (ReportCommitter, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportCommitter", arg0)
	ret0, _ := ret[0].(ReportCommitter)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReportCommitter indicates an expected call of ReportCommitter.
func (mr *MockGetterMockRecorder) ReportCommitter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportCommitter", reflect.TypeOf((*MockGetter)(nil).ReportCommitter), arg0)
}

// ReportCommitters mocks base method.
func (m *MockGetter) ReportCommitters() []ReportCommitter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportCommitters")
	ret0, _ := ret[0].([]ReportCommitter)
	return ret0
}

// ReportCommitters indicates an expected call of ReportCommitters.
func (mr *MockGetterMockRecorder) ReportCommitters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportCommitters", reflect.TypeOf((*MockGetter)(nil).ReportCommitters))
}
