// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storagenode/replicator_client.go

// Package storagenode is a generated GoMock package.
package storagenode

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.daumkakao.com/varlog/varlog/pkg/types"
	snpb "github.daumkakao.com/varlog/varlog/proto/snpb"
)

// MockReplicatorClient is a mock of ReplicatorClient interface.
type MockReplicatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockReplicatorClientMockRecorder
}

// MockReplicatorClientMockRecorder is the mock recorder for MockReplicatorClient.
type MockReplicatorClientMockRecorder struct {
	mock *MockReplicatorClient
}

// NewMockReplicatorClient creates a new mock instance.
func NewMockReplicatorClient(ctrl *gomock.Controller) *MockReplicatorClient {
	mock := &MockReplicatorClient{ctrl: ctrl}
	mock.recorder = &MockReplicatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplicatorClient) EXPECT() *MockReplicatorClientMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockReplicatorClient) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockReplicatorClientMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockReplicatorClient)(nil).Run), ctx)
}

// Close mocks base method.
func (m *MockReplicatorClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReplicatorClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReplicatorClient)(nil).Close))
}

// Replicate mocks base method.
func (m *MockReplicatorClient) Replicate(ctx context.Context, llsn types.LLSN, data []byte) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicate", ctx, llsn, data)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Replicate indicates an expected call of Replicate.
func (mr *MockReplicatorClientMockRecorder) Replicate(ctx, llsn, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicate", reflect.TypeOf((*MockReplicatorClient)(nil).Replicate), ctx, llsn, data)
}

// PeerStorageNodeID mocks base method.
func (m *MockReplicatorClient) PeerStorageNodeID() types.StorageNodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerStorageNodeID")
	ret0, _ := ret[0].(types.StorageNodeID)
	return ret0
}

// PeerStorageNodeID indicates an expected call of PeerStorageNodeID.
func (mr *MockReplicatorClientMockRecorder) PeerStorageNodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerStorageNodeID", reflect.TypeOf((*MockReplicatorClient)(nil).PeerStorageNodeID))
}

// SyncReplicate mocks base method.
func (m *MockReplicatorClient) SyncReplicate(ctx context.Context, logStreamID types.LogStreamID, first, last, current snpb.SyncPosition, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncReplicate", ctx, logStreamID, first, last, current, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncReplicate indicates an expected call of SyncReplicate.
func (mr *MockReplicatorClientMockRecorder) SyncReplicate(ctx, logStreamID, first, last, current, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncReplicate", reflect.TypeOf((*MockReplicatorClient)(nil).SyncReplicate), ctx, logStreamID, first, last, current, data)
}
