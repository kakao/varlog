// Code generated by MockGen. DO NOT EDIT.
// Source: state.go

// Package executor is a generated GoMock package.
package executor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStateProvider is a mock of stateProvider interface.
type MockStateProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStateProviderMockRecorder
}

// MockStateProviderMockRecorder is the mock recorder for MockStateProvider.
type MockStateProviderMockRecorder struct {
	mock *MockStateProvider
}

// NewMockStateProvider creates a new mock instance.
func NewMockStateProvider(ctrl *gomock.Controller) *MockStateProvider {
	mock := &MockStateProvider{ctrl: ctrl}
	mock.recorder = &MockStateProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateProvider) EXPECT() *MockStateProviderMockRecorder {
	return m.recorder
}

// mutable mocks base method.
func (m *MockStateProvider) mutable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mutable")
	ret0, _ := ret[0].(error)
	return ret0
}

// mutable indicates an expected call of mutable.
func (mr *MockStateProviderMockRecorder) mutable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mutable", reflect.TypeOf((*MockStateProvider)(nil).mutable))
}

// mutableWithBarrier mocks base method.
func (m *MockStateProvider) mutableWithBarrier() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mutableWithBarrier")
	ret0, _ := ret[0].(error)
	return ret0
}

// mutableWithBarrier indicates an expected call of mutableWithBarrier.
func (mr *MockStateProviderMockRecorder) mutableWithBarrier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mutableWithBarrier", reflect.TypeOf((*MockStateProvider)(nil).mutableWithBarrier))
}

// releaseBarrier mocks base method.
func (m *MockStateProvider) releaseBarrier() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "releaseBarrier")
}

// releaseBarrier indicates an expected call of releaseBarrier.
func (mr *MockStateProviderMockRecorder) releaseBarrier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "releaseBarrier", reflect.TypeOf((*MockStateProvider)(nil).releaseBarrier))
}

// setSealing mocks base method.
func (m *MockStateProvider) setSealing() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setSealing")
}

// setSealing indicates an expected call of setSealing.
func (mr *MockStateProviderMockRecorder) setSealing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setSealing", reflect.TypeOf((*MockStateProvider)(nil).setSealing))
}
