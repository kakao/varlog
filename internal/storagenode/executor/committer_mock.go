// Code generated by MockGen. DO NOT EDIT.
// Source: committer.go

// Package executor is a generated GoMock package.
package executor

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommitter is a mock of committer interface.
type MockCommitter struct {
	ctrl     *gomock.Controller
	recorder *MockCommitterMockRecorder
}

// MockCommitterMockRecorder is the mock recorder for MockCommitter.
type MockCommitterMockRecorder struct {
	mock *MockCommitter
}

// NewMockCommitter creates a new mock instance.
func NewMockCommitter(ctrl *gomock.Controller) *MockCommitter {
	mock := &MockCommitter{ctrl: ctrl}
	mock.recorder = &MockCommitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitter) EXPECT() *MockCommitterMockRecorder {
	return m.recorder
}

// drainCommitWaitQ mocks base method.
func (m *MockCommitter) drainCommitWaitQ(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "drainCommitWaitQ", err)
}

// drainCommitWaitQ indicates an expected call of drainCommitWaitQ.
func (mr *MockCommitterMockRecorder) drainCommitWaitQ(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "drainCommitWaitQ", reflect.TypeOf((*MockCommitter)(nil).drainCommitWaitQ), err)
}

// sendCommitTask mocks base method.
func (m *MockCommitter) sendCommitTask(ctx context.Context, ct *commitTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendCommitTask", ctx, ct)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendCommitTask indicates an expected call of sendCommitTask.
func (mr *MockCommitterMockRecorder) sendCommitTask(ctx, ct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendCommitTask", reflect.TypeOf((*MockCommitter)(nil).sendCommitTask), ctx, ct)
}

// sendCommitWaitTask mocks base method.
func (m *MockCommitter) sendCommitWaitTask(ctx context.Context, cwt *commitWaitTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendCommitWaitTask", ctx, cwt)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendCommitWaitTask indicates an expected call of sendCommitWaitTask.
func (mr *MockCommitterMockRecorder) sendCommitWaitTask(ctx, cwt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendCommitWaitTask", reflect.TypeOf((*MockCommitter)(nil).sendCommitWaitTask), ctx, cwt)
}

// stop mocks base method.
func (m *MockCommitter) stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "stop")
}

// stop indicates an expected call of stop.
func (mr *MockCommitterMockRecorder) stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "stop", reflect.TypeOf((*MockCommitter)(nil).stop))
}
