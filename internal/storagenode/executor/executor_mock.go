// Code generated by MockGen. DO NOT EDIT.
// Source: github.daumkakao.com/varlog/varlog/internal/storagenode/executor (interfaces: Executor)

// Package executor is a generated GoMock package.
package executor

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	logio "github.daumkakao.com/varlog/varlog/internal/storagenode/logio"
	types "github.daumkakao.com/varlog/varlog/pkg/types"
	snpb "github.daumkakao.com/varlog/varlog/proto/snpb"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockExecutor) Append(arg0 context.Context, arg1 [][]byte, arg2 ...varlogpb.Replica) ([]snpb.AppendResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].([]snpb.AppendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append.
func (mr *MockExecutorMockRecorder) Append(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockExecutor)(nil).Append), varargs...)
}

// Close mocks base method.
func (m *MockExecutor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockExecutorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockExecutor)(nil).Close))
}

// Commit mocks base method.
func (m *MockExecutor) Commit(arg0 context.Context, arg1 snpb.LogStreamCommitResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockExecutorMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockExecutor)(nil).Commit), arg0, arg1)
}

// GetPrevCommitInfo mocks base method.
func (m *MockExecutor) GetPrevCommitInfo(arg0 types.Version) (*snpb.LogStreamCommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrevCommitInfo", arg0)
	ret0, _ := ret[0].(*snpb.LogStreamCommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrevCommitInfo indicates an expected call of GetPrevCommitInfo.
func (mr *MockExecutorMockRecorder) GetPrevCommitInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevCommitInfo", reflect.TypeOf((*MockExecutor)(nil).GetPrevCommitInfo), arg0)
}

// GetReport mocks base method.
func (m *MockExecutor) GetReport() (snpb.LogStreamUncommitReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport")
	ret0, _ := ret[0].(snpb.LogStreamUncommitReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockExecutorMockRecorder) GetReport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockExecutor)(nil).GetReport))
}

// LogStreamID mocks base method.
func (m *MockExecutor) LogStreamID() types.LogStreamID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogStreamID")
	ret0, _ := ret[0].(types.LogStreamID)
	return ret0
}

// LogStreamID indicates an expected call of LogStreamID.
func (mr *MockExecutorMockRecorder) LogStreamID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogStreamID", reflect.TypeOf((*MockExecutor)(nil).LogStreamID))
}

// Metadata mocks base method.
func (m *MockExecutor) Metadata() varlogpb.LogStreamMetadataDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(varlogpb.LogStreamMetadataDescriptor)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockExecutorMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockExecutor)(nil).Metadata))
}

// Path mocks base method.
func (m *MockExecutor) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockExecutorMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockExecutor)(nil).Path))
}

// Read mocks base method.
func (m *MockExecutor) Read(arg0 context.Context, arg1 types.GLSN) (varlogpb.LogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(varlogpb.LogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockExecutorMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockExecutor)(nil).Read), arg0, arg1)
}

// Replicate mocks base method.
func (m *MockExecutor) Replicate(arg0 context.Context, arg1 types.LLSN, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replicate indicates an expected call of Replicate.
func (mr *MockExecutorMockRecorder) Replicate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicate", reflect.TypeOf((*MockExecutor)(nil).Replicate), arg0, arg1, arg2)
}

// Seal mocks base method.
func (m *MockExecutor) Seal(arg0 context.Context, arg1 types.GLSN) (varlogpb.LogStreamStatus, types.GLSN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", arg0, arg1)
	ret0, _ := ret[0].(varlogpb.LogStreamStatus)
	ret1, _ := ret[1].(types.GLSN)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Seal indicates an expected call of Seal.
func (mr *MockExecutorMockRecorder) Seal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockExecutor)(nil).Seal), arg0, arg1)
}

// StorageNodeID mocks base method.
func (m *MockExecutor) StorageNodeID() types.StorageNodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageNodeID")
	ret0, _ := ret[0].(types.StorageNodeID)
	return ret0
}

// StorageNodeID indicates an expected call of StorageNodeID.
func (mr *MockExecutorMockRecorder) StorageNodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageNodeID", reflect.TypeOf((*MockExecutor)(nil).StorageNodeID))
}

// Subscribe mocks base method.
func (m *MockExecutor) Subscribe(arg0 context.Context, arg1, arg2 types.GLSN) (logio.SubscribeEnv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1, arg2)
	ret0, _ := ret[0].(logio.SubscribeEnv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockExecutorMockRecorder) Subscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockExecutor)(nil).Subscribe), arg0, arg1, arg2)
}

// Sync mocks base method.
func (m *MockExecutor) Sync(arg0 context.Context, arg1 varlogpb.Replica) (*snpb.SyncStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(*snpb.SyncStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockExecutorMockRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockExecutor)(nil).Sync), arg0, arg1)
}

// SyncInit mocks base method.
func (m *MockExecutor) SyncInit(arg0 context.Context, arg1 snpb.SyncRange) (snpb.SyncRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncInit", arg0, arg1)
	ret0, _ := ret[0].(snpb.SyncRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncInit indicates an expected call of SyncInit.
func (mr *MockExecutorMockRecorder) SyncInit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncInit", reflect.TypeOf((*MockExecutor)(nil).SyncInit), arg0, arg1)
}

// SyncReplicate mocks base method.
func (m *MockExecutor) SyncReplicate(arg0 context.Context, arg1 snpb.SyncPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncReplicate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncReplicate indicates an expected call of SyncReplicate.
func (mr *MockExecutorMockRecorder) SyncReplicate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncReplicate", reflect.TypeOf((*MockExecutor)(nil).SyncReplicate), arg0, arg1)
}

// Trim mocks base method.
func (m *MockExecutor) Trim(arg0 context.Context, arg1 types.GLSN) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trim", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Trim indicates an expected call of Trim.
func (mr *MockExecutorMockRecorder) Trim(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trim", reflect.TypeOf((*MockExecutor)(nil).Trim), arg0, arg1)
}

// Unseal mocks base method.
func (m *MockExecutor) Unseal(arg0 context.Context, arg1 []varlogpb.Replica) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unseal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unseal indicates an expected call of Unseal.
func (mr *MockExecutorMockRecorder) Unseal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unseal", reflect.TypeOf((*MockExecutor)(nil).Unseal), arg0, arg1)
}
