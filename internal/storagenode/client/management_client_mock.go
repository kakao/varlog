// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kakao/varlog/internal/storagenode/client (interfaces: StorageNodeManagementClient)
//
// Generated by this command:
//
//	mockgen -build_flags -mod=vendor -self_package github.com/kakao/varlog/internal/storagenode/client -package client -destination management_client_mock.go . StorageNodeManagementClient
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/kakao/varlog/pkg/types"
	snpb "github.com/kakao/varlog/proto/snpb"
	varlogpb "github.com/kakao/varlog/proto/varlogpb"
)

// MockStorageNodeManagementClient is a mock of StorageNodeManagementClient interface.
type MockStorageNodeManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageNodeManagementClientMockRecorder
	isgomock struct{}
}

// MockStorageNodeManagementClientMockRecorder is the mock recorder for MockStorageNodeManagementClient.
type MockStorageNodeManagementClientMockRecorder struct {
	mock *MockStorageNodeManagementClient
}

// NewMockStorageNodeManagementClient creates a new mock instance.
func NewMockStorageNodeManagementClient(ctrl *gomock.Controller) *MockStorageNodeManagementClient {
	mock := &MockStorageNodeManagementClient{ctrl: ctrl}
	mock.recorder = &MockStorageNodeManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageNodeManagementClient) EXPECT() *MockStorageNodeManagementClientMockRecorder {
	return m.recorder
}

// AddLogStreamReplica mocks base method.
func (m *MockStorageNodeManagementClient) AddLogStreamReplica(ctx context.Context, topicID types.TopicID, logStreamID types.LogStreamID, snpath string) (snpb.LogStreamReplicaMetadataDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogStreamReplica", ctx, topicID, logStreamID, snpath)
	ret0, _ := ret[0].(snpb.LogStreamReplicaMetadataDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLogStreamReplica indicates an expected call of AddLogStreamReplica.
func (mr *MockStorageNodeManagementClientMockRecorder) AddLogStreamReplica(ctx, topicID, logStreamID, snpath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogStreamReplica", reflect.TypeOf((*MockStorageNodeManagementClient)(nil).AddLogStreamReplica), ctx, topicID, logStreamID, snpath)
}

// Close mocks base method.
func (m *MockStorageNodeManagementClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageNodeManagementClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageNodeManagementClient)(nil).Close))
}

// GetMetadata mocks base method.
func (m *MockStorageNodeManagementClient) GetMetadata(ctx context.Context) (*snpb.StorageNodeMetadataDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx)
	ret0, _ := ret[0].(*snpb.StorageNodeMetadataDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockStorageNodeManagementClientMockRecorder) GetMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockStorageNodeManagementClient)(nil).GetMetadata), ctx)
}

// RemoveLogStream mocks base method.
func (m *MockStorageNodeManagementClient) RemoveLogStream(ctx context.Context, topicID types.TopicID, logStreamID types.LogStreamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLogStream", ctx, topicID, logStreamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLogStream indicates an expected call of RemoveLogStream.
func (mr *MockStorageNodeManagementClientMockRecorder) RemoveLogStream(ctx, topicID, logStreamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLogStream", reflect.TypeOf((*MockStorageNodeManagementClient)(nil).RemoveLogStream), ctx, topicID, logStreamID)
}

// Seal mocks base method.
func (m *MockStorageNodeManagementClient) Seal(ctx context.Context, topicID types.TopicID, logStreamID types.LogStreamID, lastCommittedGLSN types.GLSN) (varlogpb.LogStreamStatus, types.GLSN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", ctx, topicID, logStreamID, lastCommittedGLSN)
	ret0, _ := ret[0].(varlogpb.LogStreamStatus)
	ret1, _ := ret[1].(types.GLSN)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Seal indicates an expected call of Seal.
func (mr *MockStorageNodeManagementClientMockRecorder) Seal(ctx, topicID, logStreamID, lastCommittedGLSN any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockStorageNodeManagementClient)(nil).Seal), ctx, topicID, logStreamID, lastCommittedGLSN)
}

// Sync mocks base method.
func (m *MockStorageNodeManagementClient) Sync(ctx context.Context, topicID types.TopicID, logStreamID types.LogStreamID, backupStorageNodeID types.StorageNodeID, backupAddress string, lastGLSN types.GLSN) (*snpb.SyncStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, topicID, logStreamID, backupStorageNodeID, backupAddress, lastGLSN)
	ret0, _ := ret[0].(*snpb.SyncStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockStorageNodeManagementClientMockRecorder) Sync(ctx, topicID, logStreamID, backupStorageNodeID, backupAddress, lastGLSN any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockStorageNodeManagementClient)(nil).Sync), ctx, topicID, logStreamID, backupStorageNodeID, backupAddress, lastGLSN)
}

// Target mocks base method.
func (m *MockStorageNodeManagementClient) Target() varlogpb.StorageNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(varlogpb.StorageNode)
	return ret0
}

// Target indicates an expected call of Target.
func (mr *MockStorageNodeManagementClientMockRecorder) Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockStorageNodeManagementClient)(nil).Target))
}

// Trim mocks base method.
func (m *MockStorageNodeManagementClient) Trim(ctx context.Context, topicID types.TopicID, lastGLSN types.GLSN) (map[types.LogStreamID]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trim", ctx, topicID, lastGLSN)
	ret0, _ := ret[0].(map[types.LogStreamID]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trim indicates an expected call of Trim.
func (mr *MockStorageNodeManagementClientMockRecorder) Trim(ctx, topicID, lastGLSN any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trim", reflect.TypeOf((*MockStorageNodeManagementClient)(nil).Trim), ctx, topicID, lastGLSN)
}

// Unseal mocks base method.
func (m *MockStorageNodeManagementClient) Unseal(ctx context.Context, topicID types.TopicID, logStreamID types.LogStreamID, replicas []varlogpb.LogStreamReplica) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unseal", ctx, topicID, logStreamID, replicas)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unseal indicates an expected call of Unseal.
func (mr *MockStorageNodeManagementClientMockRecorder) Unseal(ctx, topicID, logStreamID, replicas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unseal", reflect.TypeOf((*MockStorageNodeManagementClient)(nil).Unseal), ctx, topicID, logStreamID, replicas)
}
