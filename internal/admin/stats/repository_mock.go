// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kakao/varlog/internal/admin/stats (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -build_flags -mod=vendor -self_package github.com/kakao/varlog/internal/admin/stats -package stats -destination repository_mock.go . Repository
//

// Package stats is a generated GoMock package.
package stats

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"

	types "github.com/kakao/varlog/pkg/types"
	admpb "github.com/kakao/varlog/proto/admpb"
	snpb "github.com/kakao/varlog/proto/snpb"
	varlogpb "github.com/kakao/varlog/proto/varlogpb"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetLogStream mocks base method.
func (m *MockRepository) GetLogStream(lsid types.LogStreamID) *LogStreamStat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogStream", lsid)
	ret0, _ := ret[0].(*LogStreamStat)
	return ret0
}

// GetLogStream indicates an expected call of GetLogStream.
func (mr *MockRepositoryMockRecorder) GetLogStream(lsid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogStream", reflect.TypeOf((*MockRepository)(nil).GetLogStream), lsid)
}

// GetStorageNode mocks base method.
func (m *MockRepository) GetStorageNode(snid types.StorageNodeID) (*admpb.StorageNodeMetadata, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageNode", snid)
	ret0, _ := ret[0].(*admpb.StorageNodeMetadata)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetStorageNode indicates an expected call of GetStorageNode.
func (mr *MockRepositoryMockRecorder) GetStorageNode(snid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageNode", reflect.TypeOf((*MockRepository)(nil).GetStorageNode), snid)
}

// ListStorageNodes mocks base method.
func (m *MockRepository) ListStorageNodes() map[types.StorageNodeID]*admpb.StorageNodeMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageNodes")
	ret0, _ := ret[0].(map[types.StorageNodeID]*admpb.StorageNodeMetadata)
	return ret0
}

// ListStorageNodes indicates an expected call of ListStorageNodes.
func (mr *MockRepositoryMockRecorder) ListStorageNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageNodes", reflect.TypeOf((*MockRepository)(nil).ListStorageNodes))
}

// RemoveStorageNode mocks base method.
func (m *MockRepository) RemoveStorageNode(snid types.StorageNodeID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveStorageNode", snid)
}

// RemoveStorageNode indicates an expected call of RemoveStorageNode.
func (mr *MockRepositoryMockRecorder) RemoveStorageNode(snid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStorageNode", reflect.TypeOf((*MockRepository)(nil).RemoveStorageNode), snid)
}

// Report mocks base method.
func (m *MockRepository) Report(ctx context.Context, snmd *snpb.StorageNodeMetadataDescriptor, ts time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Report", ctx, snmd, ts)
}

// Report indicates an expected call of Report.
func (mr *MockRepositoryMockRecorder) Report(ctx, snmd, ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockRepository)(nil).Report), ctx, snmd, ts)
}

// SetLogStreamStatus mocks base method.
func (m *MockRepository) SetLogStreamStatus(lsid types.LogStreamID, status varlogpb.LogStreamStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogStreamStatus", lsid, status)
}

// SetLogStreamStatus indicates an expected call of SetLogStreamStatus.
func (mr *MockRepositoryMockRecorder) SetLogStreamStatus(lsid, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogStreamStatus", reflect.TypeOf((*MockRepository)(nil).SetLogStreamStatus), lsid, status)
}
