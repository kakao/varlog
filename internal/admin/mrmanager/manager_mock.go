// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kakao/varlog/internal/admin/mrmanager (interfaces: ClusterMetadataView,MetadataRepositoryManager)
//
// Generated by this command:
//
//	mockgen -build_flags -mod=vendor -self_package github.com/kakao/varlog/internal/admin/mrmanager -package mrmanager -destination manager_mock.go . ClusterMetadataView,MetadataRepositoryManager
//
// Package mrmanager is a generated GoMock package.
package mrmanager

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/kakao/varlog/pkg/types"
	mrpb "github.com/kakao/varlog/proto/mrpb"
	varlogpb "github.com/kakao/varlog/proto/varlogpb"
)

// MockClusterMetadataView is a mock of ClusterMetadataView interface.
type MockClusterMetadataView struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMetadataViewMockRecorder
}

// MockClusterMetadataViewMockRecorder is the mock recorder for MockClusterMetadataView.
type MockClusterMetadataViewMockRecorder struct {
	mock *MockClusterMetadataView
}

// NewMockClusterMetadataView creates a new mock instance.
func NewMockClusterMetadataView(ctrl *gomock.Controller) *MockClusterMetadataView {
	mock := &MockClusterMetadataView{ctrl: ctrl}
	mock.recorder = &MockClusterMetadataViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterMetadataView) EXPECT() *MockClusterMetadataViewMockRecorder {
	return m.recorder
}

// ClusterMetadata mocks base method.
func (m *MockClusterMetadataView) ClusterMetadata(arg0 context.Context) (*varlogpb.MetadataDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterMetadata", arg0)
	ret0, _ := ret[0].(*varlogpb.MetadataDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterMetadata indicates an expected call of ClusterMetadata.
func (mr *MockClusterMetadataViewMockRecorder) ClusterMetadata(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterMetadata", reflect.TypeOf((*MockClusterMetadataView)(nil).ClusterMetadata), arg0)
}

// StorageNode mocks base method.
func (m *MockClusterMetadataView) StorageNode(arg0 context.Context, arg1 types.StorageNodeID) (*varlogpb.StorageNodeDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageNode", arg0, arg1)
	ret0, _ := ret[0].(*varlogpb.StorageNodeDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageNode indicates an expected call of StorageNode.
func (mr *MockClusterMetadataViewMockRecorder) StorageNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageNode", reflect.TypeOf((*MockClusterMetadataView)(nil).StorageNode), arg0, arg1)
}

// MockMetadataRepositoryManager is a mock of MetadataRepositoryManager interface.
type MockMetadataRepositoryManager struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataRepositoryManagerMockRecorder
}

// MockMetadataRepositoryManagerMockRecorder is the mock recorder for MockMetadataRepositoryManager.
type MockMetadataRepositoryManagerMockRecorder struct {
	mock *MockMetadataRepositoryManager
}

// NewMockMetadataRepositoryManager creates a new mock instance.
func NewMockMetadataRepositoryManager(ctrl *gomock.Controller) *MockMetadataRepositoryManager {
	mock := &MockMetadataRepositoryManager{ctrl: ctrl}
	mock.recorder = &MockMetadataRepositoryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataRepositoryManager) EXPECT() *MockMetadataRepositoryManagerMockRecorder {
	return m.recorder
}

// AddPeer mocks base method.
func (m *MockMetadataRepositoryManager) AddPeer(arg0 context.Context, arg1 types.NodeID, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockMetadataRepositoryManagerMockRecorder) AddPeer(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).AddPeer), arg0, arg1, arg2, arg3)
}

// Close mocks base method.
func (m *MockMetadataRepositoryManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetadataRepositoryManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).Close))
}

// ClusterMetadataView mocks base method.
func (m *MockMetadataRepositoryManager) ClusterMetadataView() ClusterMetadataView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterMetadataView")
	ret0, _ := ret[0].(ClusterMetadataView)
	return ret0
}

// ClusterMetadataView indicates an expected call of ClusterMetadataView.
func (mr *MockMetadataRepositoryManagerMockRecorder) ClusterMetadataView() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterMetadataView", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).ClusterMetadataView))
}

// GetClusterInfo mocks base method.
func (m *MockMetadataRepositoryManager) GetClusterInfo(arg0 context.Context) (*mrpb.ClusterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterInfo", arg0)
	ret0, _ := ret[0].(*mrpb.ClusterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterInfo indicates an expected call of GetClusterInfo.
func (mr *MockMetadataRepositoryManagerMockRecorder) GetClusterInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterInfo", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).GetClusterInfo), arg0)
}

// NumberOfMR mocks base method.
func (m *MockMetadataRepositoryManager) NumberOfMR() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberOfMR")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumberOfMR indicates an expected call of NumberOfMR.
func (mr *MockMetadataRepositoryManagerMockRecorder) NumberOfMR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfMR", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).NumberOfMR))
}

// RegisterLogStream mocks base method.
func (m *MockMetadataRepositoryManager) RegisterLogStream(arg0 context.Context, arg1 *varlogpb.LogStreamDescriptor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterLogStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterLogStream indicates an expected call of RegisterLogStream.
func (mr *MockMetadataRepositoryManagerMockRecorder) RegisterLogStream(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterLogStream", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).RegisterLogStream), arg0, arg1)
}

// RegisterStorageNode mocks base method.
func (m *MockMetadataRepositoryManager) RegisterStorageNode(arg0 context.Context, arg1 *varlogpb.StorageNodeDescriptor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterStorageNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterStorageNode indicates an expected call of RegisterStorageNode.
func (mr *MockMetadataRepositoryManagerMockRecorder) RegisterStorageNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStorageNode", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).RegisterStorageNode), arg0, arg1)
}

// RegisterTopic mocks base method.
func (m *MockMetadataRepositoryManager) RegisterTopic(arg0 context.Context, arg1 types.TopicID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTopic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTopic indicates an expected call of RegisterTopic.
func (mr *MockMetadataRepositoryManagerMockRecorder) RegisterTopic(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTopic", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).RegisterTopic), arg0, arg1)
}

// RemovePeer mocks base method.
func (m *MockMetadataRepositoryManager) RemovePeer(arg0 context.Context, arg1 types.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePeer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePeer indicates an expected call of RemovePeer.
func (mr *MockMetadataRepositoryManagerMockRecorder) RemovePeer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).RemovePeer), arg0, arg1)
}

// Seal mocks base method.
func (m *MockMetadataRepositoryManager) Seal(arg0 context.Context, arg1 types.LogStreamID) (types.GLSN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", arg0, arg1)
	ret0, _ := ret[0].(types.GLSN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seal indicates an expected call of Seal.
func (mr *MockMetadataRepositoryManagerMockRecorder) Seal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).Seal), arg0, arg1)
}

// UnregisterLogStream mocks base method.
func (m *MockMetadataRepositoryManager) UnregisterLogStream(arg0 context.Context, arg1 types.LogStreamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterLogStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterLogStream indicates an expected call of UnregisterLogStream.
func (mr *MockMetadataRepositoryManagerMockRecorder) UnregisterLogStream(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterLogStream", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).UnregisterLogStream), arg0, arg1)
}

// UnregisterStorageNode mocks base method.
func (m *MockMetadataRepositoryManager) UnregisterStorageNode(arg0 context.Context, arg1 types.StorageNodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterStorageNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterStorageNode indicates an expected call of UnregisterStorageNode.
func (mr *MockMetadataRepositoryManagerMockRecorder) UnregisterStorageNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterStorageNode", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).UnregisterStorageNode), arg0, arg1)
}

// UnregisterTopic mocks base method.
func (m *MockMetadataRepositoryManager) UnregisterTopic(arg0 context.Context, arg1 types.TopicID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterTopic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterTopic indicates an expected call of UnregisterTopic.
func (mr *MockMetadataRepositoryManagerMockRecorder) UnregisterTopic(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterTopic", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).UnregisterTopic), arg0, arg1)
}

// Unseal mocks base method.
func (m *MockMetadataRepositoryManager) Unseal(arg0 context.Context, arg1 types.LogStreamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unseal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unseal indicates an expected call of Unseal.
func (mr *MockMetadataRepositoryManagerMockRecorder) Unseal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unseal", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).Unseal), arg0, arg1)
}

// UpdateLogStream mocks base method.
func (m *MockMetadataRepositoryManager) UpdateLogStream(arg0 context.Context, arg1 *varlogpb.LogStreamDescriptor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLogStream indicates an expected call of UpdateLogStream.
func (mr *MockMetadataRepositoryManagerMockRecorder) UpdateLogStream(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogStream", reflect.TypeOf((*MockMetadataRepositoryManager)(nil).UpdateLogStream), arg0, arg1)
}
