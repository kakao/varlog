// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kakao/varlog/pkg/varlog (interfaces: ReplicasRetriever,RenewableReplicasRetriever)
//
// Generated by this command:
//
//	mockgen -build_flags -mod=vendor -self_package github.com/kakao/varlog/pkg/varlog -package varlog -destination replicas_retriever_mock.go . ReplicasRetriever,RenewableReplicasRetriever
//

// Package varlog is a generated GoMock package.
package varlog

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/kakao/varlog/pkg/types"
	varlogpb "github.com/kakao/varlog/proto/varlogpb"
)

// MockReplicasRetriever is a mock of ReplicasRetriever interface.
type MockReplicasRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockReplicasRetrieverMockRecorder
	isgomock struct{}
}

// MockReplicasRetrieverMockRecorder is the mock recorder for MockReplicasRetriever.
type MockReplicasRetrieverMockRecorder struct {
	mock *MockReplicasRetriever
}

// NewMockReplicasRetriever creates a new mock instance.
func NewMockReplicasRetriever(ctrl *gomock.Controller) *MockReplicasRetriever {
	mock := &MockReplicasRetriever{ctrl: ctrl}
	mock.recorder = &MockReplicasRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplicasRetriever) EXPECT() *MockReplicasRetrieverMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockReplicasRetriever) All(topicID types.TopicID) map[types.LogStreamID][]varlogpb.LogStreamReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", topicID)
	ret0, _ := ret[0].(map[types.LogStreamID][]varlogpb.LogStreamReplica)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockReplicasRetrieverMockRecorder) All(topicID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockReplicasRetriever)(nil).All), topicID)
}

// Retrieve mocks base method.
func (m *MockReplicasRetriever) Retrieve(topicID types.TopicID, logStreamID types.LogStreamID) ([]varlogpb.LogStreamReplica, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", topicID, logStreamID)
	ret0, _ := ret[0].([]varlogpb.LogStreamReplica)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockReplicasRetrieverMockRecorder) Retrieve(topicID, logStreamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockReplicasRetriever)(nil).Retrieve), topicID, logStreamID)
}

// MockRenewableReplicasRetriever is a mock of RenewableReplicasRetriever interface.
type MockRenewableReplicasRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockRenewableReplicasRetrieverMockRecorder
	isgomock struct{}
}

// MockRenewableReplicasRetrieverMockRecorder is the mock recorder for MockRenewableReplicasRetriever.
type MockRenewableReplicasRetrieverMockRecorder struct {
	mock *MockRenewableReplicasRetriever
}

// NewMockRenewableReplicasRetriever creates a new mock instance.
func NewMockRenewableReplicasRetriever(ctrl *gomock.Controller) *MockRenewableReplicasRetriever {
	mock := &MockRenewableReplicasRetriever{ctrl: ctrl}
	mock.recorder = &MockRenewableReplicasRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenewableReplicasRetriever) EXPECT() *MockRenewableReplicasRetrieverMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRenewableReplicasRetriever) All(topicID types.TopicID) map[types.LogStreamID][]varlogpb.LogStreamReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", topicID)
	ret0, _ := ret[0].(map[types.LogStreamID][]varlogpb.LogStreamReplica)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockRenewableReplicasRetrieverMockRecorder) All(topicID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRenewableReplicasRetriever)(nil).All), topicID)
}

// Renew mocks base method.
func (m *MockRenewableReplicasRetriever) Renew(metadata *varlogpb.MetadataDescriptor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Renew", metadata)
}

// Renew indicates an expected call of Renew.
func (mr *MockRenewableReplicasRetrieverMockRecorder) Renew(metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Renew", reflect.TypeOf((*MockRenewableReplicasRetriever)(nil).Renew), metadata)
}

// Retrieve mocks base method.
func (m *MockRenewableReplicasRetriever) Retrieve(topicID types.TopicID, logStreamID types.LogStreamID) ([]varlogpb.LogStreamReplica, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", topicID, logStreamID)
	ret0, _ := ret[0].([]varlogpb.LogStreamReplica)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockRenewableReplicasRetrieverMockRecorder) Retrieve(topicID, logStreamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockRenewableReplicasRetriever)(nil).Retrieve), topicID, logStreamID)
}
