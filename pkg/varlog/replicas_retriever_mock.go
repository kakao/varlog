// Code generated by MockGen. DO NOT EDIT.
// Source: github.daumkakao.com/varlog/varlog/pkg/varlog (interfaces: ReplicasRetriever,RenewableReplicasRetriever)

// Package varlog is a generated GoMock package.
package varlog

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.daumkakao.com/varlog/varlog/pkg/types"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
)

// MockReplicasRetriever is a mock of ReplicasRetriever interface
type MockReplicasRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockReplicasRetrieverMockRecorder
}

// MockReplicasRetrieverMockRecorder is the mock recorder for MockReplicasRetriever
type MockReplicasRetrieverMockRecorder struct {
	mock *MockReplicasRetriever
}

// NewMockReplicasRetriever creates a new mock instance
func NewMockReplicasRetriever(ctrl *gomock.Controller) *MockReplicasRetriever {
	mock := &MockReplicasRetriever{ctrl: ctrl}
	mock.recorder = &MockReplicasRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReplicasRetriever) EXPECT() *MockReplicasRetrieverMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockReplicasRetriever) All() map[types.LogStreamID][]varlogpb.LogStreamReplicaDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(map[types.LogStreamID][]varlogpb.LogStreamReplicaDescriptor)
	return ret0
}

// All indicates an expected call of All
func (mr *MockReplicasRetrieverMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockReplicasRetriever)(nil).All))
}

// Retrieve mocks base method
func (m *MockReplicasRetriever) Retrieve(arg0 types.LogStreamID) ([]varlogpb.LogStreamReplicaDescriptor, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0)
	ret0, _ := ret[0].([]varlogpb.LogStreamReplicaDescriptor)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockReplicasRetrieverMockRecorder) Retrieve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockReplicasRetriever)(nil).Retrieve), arg0)
}

// MockRenewableReplicasRetriever is a mock of RenewableReplicasRetriever interface
type MockRenewableReplicasRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockRenewableReplicasRetrieverMockRecorder
}

// MockRenewableReplicasRetrieverMockRecorder is the mock recorder for MockRenewableReplicasRetriever
type MockRenewableReplicasRetrieverMockRecorder struct {
	mock *MockRenewableReplicasRetriever
}

// NewMockRenewableReplicasRetriever creates a new mock instance
func NewMockRenewableReplicasRetriever(ctrl *gomock.Controller) *MockRenewableReplicasRetriever {
	mock := &MockRenewableReplicasRetriever{ctrl: ctrl}
	mock.recorder = &MockRenewableReplicasRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRenewableReplicasRetriever) EXPECT() *MockRenewableReplicasRetrieverMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockRenewableReplicasRetriever) All() map[types.LogStreamID][]varlogpb.LogStreamReplicaDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(map[types.LogStreamID][]varlogpb.LogStreamReplicaDescriptor)
	return ret0
}

// All indicates an expected call of All
func (mr *MockRenewableReplicasRetrieverMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRenewableReplicasRetriever)(nil).All))
}

// Renew mocks base method
func (m *MockRenewableReplicasRetriever) Renew(arg0 *varlogpb.MetadataDescriptor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Renew", arg0)
}

// Renew indicates an expected call of Renew
func (mr *MockRenewableReplicasRetrieverMockRecorder) Renew(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Renew", reflect.TypeOf((*MockRenewableReplicasRetriever)(nil).Renew), arg0)
}

// Retrieve mocks base method
func (m *MockRenewableReplicasRetriever) Retrieve(arg0 types.LogStreamID) ([]varlogpb.LogStreamReplicaDescriptor, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0)
	ret0, _ := ret[0].([]varlogpb.LogStreamReplicaDescriptor)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockRenewableReplicasRetrieverMockRecorder) Retrieve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockRenewableReplicasRetriever)(nil).Retrieve), arg0)
}
