// Code generated by MockGen. DO NOT EDIT.
// Source: github.daumkakao.com/varlog/varlog/proto/storage_node (interfaces: StorageNodeServiceClient,StorageNodeServiceServer,StorageNodeService_SubscribeClient,StorageNodeService_SubscribeServer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	storage_node "github.daumkakao.com/varlog/varlog/proto/storage_node"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockStorageNodeServiceClient is a mock of StorageNodeServiceClient interface
type MockStorageNodeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageNodeServiceClientMockRecorder
}

// MockStorageNodeServiceClientMockRecorder is the mock recorder for MockStorageNodeServiceClient
type MockStorageNodeServiceClientMockRecorder struct {
	mock *MockStorageNodeServiceClient
}

// NewMockStorageNodeServiceClient creates a new mock instance
func NewMockStorageNodeServiceClient(ctrl *gomock.Controller) *MockStorageNodeServiceClient {
	mock := &MockStorageNodeServiceClient{ctrl: ctrl}
	mock.recorder = &MockStorageNodeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageNodeServiceClient) EXPECT() *MockStorageNodeServiceClientMockRecorder {
	return m.recorder
}

// AddLogStream mocks base method
func (m *MockStorageNodeServiceClient) AddLogStream(arg0 context.Context, arg1 *storage_node.AddLogStreamRequest, arg2 ...grpc.CallOption) (*storage_node.AddLogStreamResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLogStream", varargs...)
	ret0, _ := ret[0].(*storage_node.AddLogStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLogStream indicates an expected call of AddLogStream
func (mr *MockStorageNodeServiceClientMockRecorder) AddLogStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogStream", reflect.TypeOf((*MockStorageNodeServiceClient)(nil).AddLogStream), varargs...)
}

// Append mocks base method
func (m *MockStorageNodeServiceClient) Append(arg0 context.Context, arg1 *storage_node.AppendRequest, arg2 ...grpc.CallOption) (*storage_node.AppendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].(*storage_node.AppendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append
func (mr *MockStorageNodeServiceClientMockRecorder) Append(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockStorageNodeServiceClient)(nil).Append), varargs...)
}

// Read mocks base method
func (m *MockStorageNodeServiceClient) Read(arg0 context.Context, arg1 *storage_node.ReadRequest, arg2 ...grpc.CallOption) (*storage_node.ReadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*storage_node.ReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockStorageNodeServiceClientMockRecorder) Read(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorageNodeServiceClient)(nil).Read), varargs...)
}

// Subscribe mocks base method
func (m *MockStorageNodeServiceClient) Subscribe(arg0 context.Context, arg1 *storage_node.SubscribeRequest, arg2 ...grpc.CallOption) (storage_node.StorageNodeService_SubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(storage_node.StorageNodeService_SubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockStorageNodeServiceClientMockRecorder) Subscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockStorageNodeServiceClient)(nil).Subscribe), varargs...)
}

// Trim mocks base method
func (m *MockStorageNodeServiceClient) Trim(arg0 context.Context, arg1 *storage_node.TrimRequest, arg2 ...grpc.CallOption) (*storage_node.TrimResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Trim", varargs...)
	ret0, _ := ret[0].(*storage_node.TrimResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trim indicates an expected call of Trim
func (mr *MockStorageNodeServiceClientMockRecorder) Trim(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trim", reflect.TypeOf((*MockStorageNodeServiceClient)(nil).Trim), varargs...)
}

// MockStorageNodeServiceServer is a mock of StorageNodeServiceServer interface
type MockStorageNodeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageNodeServiceServerMockRecorder
}

// MockStorageNodeServiceServerMockRecorder is the mock recorder for MockStorageNodeServiceServer
type MockStorageNodeServiceServerMockRecorder struct {
	mock *MockStorageNodeServiceServer
}

// NewMockStorageNodeServiceServer creates a new mock instance
func NewMockStorageNodeServiceServer(ctrl *gomock.Controller) *MockStorageNodeServiceServer {
	mock := &MockStorageNodeServiceServer{ctrl: ctrl}
	mock.recorder = &MockStorageNodeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageNodeServiceServer) EXPECT() *MockStorageNodeServiceServerMockRecorder {
	return m.recorder
}

// AddLogStream mocks base method
func (m *MockStorageNodeServiceServer) AddLogStream(arg0 context.Context, arg1 *storage_node.AddLogStreamRequest) (*storage_node.AddLogStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogStream", arg0, arg1)
	ret0, _ := ret[0].(*storage_node.AddLogStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLogStream indicates an expected call of AddLogStream
func (mr *MockStorageNodeServiceServerMockRecorder) AddLogStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogStream", reflect.TypeOf((*MockStorageNodeServiceServer)(nil).AddLogStream), arg0, arg1)
}

// Append mocks base method
func (m *MockStorageNodeServiceServer) Append(arg0 context.Context, arg1 *storage_node.AppendRequest) (*storage_node.AppendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", arg0, arg1)
	ret0, _ := ret[0].(*storage_node.AppendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append
func (mr *MockStorageNodeServiceServerMockRecorder) Append(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockStorageNodeServiceServer)(nil).Append), arg0, arg1)
}

// Read mocks base method
func (m *MockStorageNodeServiceServer) Read(arg0 context.Context, arg1 *storage_node.ReadRequest) (*storage_node.ReadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*storage_node.ReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockStorageNodeServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorageNodeServiceServer)(nil).Read), arg0, arg1)
}

// Subscribe mocks base method
func (m *MockStorageNodeServiceServer) Subscribe(arg0 *storage_node.SubscribeRequest, arg1 storage_node.StorageNodeService_SubscribeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockStorageNodeServiceServerMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockStorageNodeServiceServer)(nil).Subscribe), arg0, arg1)
}

// Trim mocks base method
func (m *MockStorageNodeServiceServer) Trim(arg0 context.Context, arg1 *storage_node.TrimRequest) (*storage_node.TrimResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trim", arg0, arg1)
	ret0, _ := ret[0].(*storage_node.TrimResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trim indicates an expected call of Trim
func (mr *MockStorageNodeServiceServerMockRecorder) Trim(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trim", reflect.TypeOf((*MockStorageNodeServiceServer)(nil).Trim), arg0, arg1)
}

// MockStorageNodeService_SubscribeClient is a mock of StorageNodeService_SubscribeClient interface
type MockStorageNodeService_SubscribeClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageNodeService_SubscribeClientMockRecorder
}

// MockStorageNodeService_SubscribeClientMockRecorder is the mock recorder for MockStorageNodeService_SubscribeClient
type MockStorageNodeService_SubscribeClientMockRecorder struct {
	mock *MockStorageNodeService_SubscribeClient
}

// NewMockStorageNodeService_SubscribeClient creates a new mock instance
func NewMockStorageNodeService_SubscribeClient(ctrl *gomock.Controller) *MockStorageNodeService_SubscribeClient {
	mock := &MockStorageNodeService_SubscribeClient{ctrl: ctrl}
	mock.recorder = &MockStorageNodeService_SubscribeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageNodeService_SubscribeClient) EXPECT() *MockStorageNodeService_SubscribeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockStorageNodeService_SubscribeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockStorageNodeService_SubscribeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockStorageNodeService_SubscribeClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockStorageNodeService_SubscribeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockStorageNodeService_SubscribeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStorageNodeService_SubscribeClient)(nil).Context))
}

// Header mocks base method
func (m *MockStorageNodeService_SubscribeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockStorageNodeService_SubscribeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockStorageNodeService_SubscribeClient)(nil).Header))
}

// Recv mocks base method
func (m *MockStorageNodeService_SubscribeClient) Recv() (*storage_node.SubscribeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*storage_node.SubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockStorageNodeService_SubscribeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStorageNodeService_SubscribeClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockStorageNodeService_SubscribeClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockStorageNodeService_SubscribeClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStorageNodeService_SubscribeClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockStorageNodeService_SubscribeClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockStorageNodeService_SubscribeClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStorageNodeService_SubscribeClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockStorageNodeService_SubscribeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockStorageNodeService_SubscribeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockStorageNodeService_SubscribeClient)(nil).Trailer))
}

// MockStorageNodeService_SubscribeServer is a mock of StorageNodeService_SubscribeServer interface
type MockStorageNodeService_SubscribeServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageNodeService_SubscribeServerMockRecorder
}

// MockStorageNodeService_SubscribeServerMockRecorder is the mock recorder for MockStorageNodeService_SubscribeServer
type MockStorageNodeService_SubscribeServerMockRecorder struct {
	mock *MockStorageNodeService_SubscribeServer
}

// NewMockStorageNodeService_SubscribeServer creates a new mock instance
func NewMockStorageNodeService_SubscribeServer(ctrl *gomock.Controller) *MockStorageNodeService_SubscribeServer {
	mock := &MockStorageNodeService_SubscribeServer{ctrl: ctrl}
	mock.recorder = &MockStorageNodeService_SubscribeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageNodeService_SubscribeServer) EXPECT() *MockStorageNodeService_SubscribeServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockStorageNodeService_SubscribeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockStorageNodeService_SubscribeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStorageNodeService_SubscribeServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockStorageNodeService_SubscribeServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockStorageNodeService_SubscribeServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStorageNodeService_SubscribeServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockStorageNodeService_SubscribeServer) Send(arg0 *storage_node.SubscribeResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockStorageNodeService_SubscribeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStorageNodeService_SubscribeServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockStorageNodeService_SubscribeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockStorageNodeService_SubscribeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockStorageNodeService_SubscribeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockStorageNodeService_SubscribeServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockStorageNodeService_SubscribeServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStorageNodeService_SubscribeServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockStorageNodeService_SubscribeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockStorageNodeService_SubscribeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockStorageNodeService_SubscribeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockStorageNodeService_SubscribeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockStorageNodeService_SubscribeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockStorageNodeService_SubscribeServer)(nil).SetTrailer), arg0)
}
