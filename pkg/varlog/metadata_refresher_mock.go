// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kakao/varlog/pkg/varlog (interfaces: MetadataRefresher)
//
// Generated by this command:
//
//	mockgen -build_flags -mod=vendor -self_package github.com/kakao/varlog/pkg/varlog -package varlog -destination metadata_refresher_mock.go . MetadataRefresher
//

// Package varlog is a generated GoMock package.
package varlog

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	varlogpb "github.com/kakao/varlog/proto/varlogpb"
)

// MockMetadataRefresher is a mock of MetadataRefresher interface.
type MockMetadataRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataRefresherMockRecorder
	isgomock struct{}
}

// MockMetadataRefresherMockRecorder is the mock recorder for MockMetadataRefresher.
type MockMetadataRefresherMockRecorder struct {
	mock *MockMetadataRefresher
}

// NewMockMetadataRefresher creates a new mock instance.
func NewMockMetadataRefresher(ctrl *gomock.Controller) *MockMetadataRefresher {
	mock := &MockMetadataRefresher{ctrl: ctrl}
	mock.recorder = &MockMetadataRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataRefresher) EXPECT() *MockMetadataRefresherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMetadataRefresher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetadataRefresherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetadataRefresher)(nil).Close))
}

// Metadata mocks base method.
func (m *MockMetadataRefresher) Metadata() *varlogpb.MetadataDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(*varlogpb.MetadataDescriptor)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockMetadataRefresherMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockMetadataRefresher)(nil).Metadata))
}

// Refresh mocks base method.
func (m *MockMetadataRefresher) Refresh(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh", arg0)
}

// Refresh indicates an expected call of Refresh.
func (mr *MockMetadataRefresherMockRecorder) Refresh(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockMetadataRefresher)(nil).Refresh), arg0)
}
