// Code generated by MockGen. DO NOT EDIT.
// Source: proto/storage_node/storage_node.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	storage_node "github.daumkakao.com/solar/solar/proto/storage_node"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockStorageNodeServiceClient is a mock of StorageNodeServiceClient interface
type MockStorageNodeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageNodeServiceClientMockRecorder
}

// MockStorageNodeServiceClientMockRecorder is the mock recorder for MockStorageNodeServiceClient
type MockStorageNodeServiceClientMockRecorder struct {
	mock *MockStorageNodeServiceClient
}

// NewMockStorageNodeServiceClient creates a new mock instance
func NewMockStorageNodeServiceClient(ctrl *gomock.Controller) *MockStorageNodeServiceClient {
	mock := &MockStorageNodeServiceClient{ctrl: ctrl}
	mock.recorder = &MockStorageNodeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageNodeServiceClient) EXPECT() *MockStorageNodeServiceClientMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockStorageNodeServiceClient) Call(ctx context.Context, in *storage_node.StorageNodeRequest, opts ...grpc.CallOption) (*storage_node.StorageNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*storage_node.StorageNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockStorageNodeServiceClientMockRecorder) Call(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockStorageNodeServiceClient)(nil).Call), varargs...)
}

// MockStorageNodeServiceServer is a mock of StorageNodeServiceServer interface
type MockStorageNodeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageNodeServiceServerMockRecorder
}

// MockStorageNodeServiceServerMockRecorder is the mock recorder for MockStorageNodeServiceServer
type MockStorageNodeServiceServerMockRecorder struct {
	mock *MockStorageNodeServiceServer
}

// NewMockStorageNodeServiceServer creates a new mock instance
func NewMockStorageNodeServiceServer(ctrl *gomock.Controller) *MockStorageNodeServiceServer {
	mock := &MockStorageNodeServiceServer{ctrl: ctrl}
	mock.recorder = &MockStorageNodeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageNodeServiceServer) EXPECT() *MockStorageNodeServiceServerMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockStorageNodeServiceServer) Call(arg0 context.Context, arg1 *storage_node.StorageNodeRequest) (*storage_node.StorageNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(*storage_node.StorageNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockStorageNodeServiceServerMockRecorder) Call(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockStorageNodeServiceServer)(nil).Call), arg0, arg1)
}
