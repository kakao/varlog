// Code generated by MockGen. DO NOT EDIT.
// Source: proto/sequencer/sequencer.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sequencer "github.daumkakao.com/wokl/solar/proto/sequencer"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSequencerServiceClient is a mock of SequencerServiceClient interface
type MockSequencerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSequencerServiceClientMockRecorder
}

// MockSequencerServiceClientMockRecorder is the mock recorder for MockSequencerServiceClient
type MockSequencerServiceClientMockRecorder struct {
	mock *MockSequencerServiceClient
}

// NewMockSequencerServiceClient creates a new mock instance
func NewMockSequencerServiceClient(ctrl *gomock.Controller) *MockSequencerServiceClient {
	mock := &MockSequencerServiceClient{ctrl: ctrl}
	mock.recorder = &MockSequencerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSequencerServiceClient) EXPECT() *MockSequencerServiceClientMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockSequencerServiceClient) Next(ctx context.Context, in *sequencer.SequencerRequest, opts ...grpc.CallOption) (*sequencer.SequencerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Next", varargs...)
	ret0, _ := ret[0].(*sequencer.SequencerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockSequencerServiceClientMockRecorder) Next(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSequencerServiceClient)(nil).Next), varargs...)
}

// MockSequencerServiceServer is a mock of SequencerServiceServer interface
type MockSequencerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSequencerServiceServerMockRecorder
}

// MockSequencerServiceServerMockRecorder is the mock recorder for MockSequencerServiceServer
type MockSequencerServiceServerMockRecorder struct {
	mock *MockSequencerServiceServer
}

// NewMockSequencerServiceServer creates a new mock instance
func NewMockSequencerServiceServer(ctrl *gomock.Controller) *MockSequencerServiceServer {
	mock := &MockSequencerServiceServer{ctrl: ctrl}
	mock.recorder = &MockSequencerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSequencerServiceServer) EXPECT() *MockSequencerServiceServerMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockSequencerServiceServer) Next(arg0 context.Context, arg1 *sequencer.SequencerRequest) (*sequencer.SequencerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0, arg1)
	ret0, _ := ret[0].(*sequencer.SequencerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockSequencerServiceServerMockRecorder) Next(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSequencerServiceServer)(nil).Next), arg0, arg1)
}
