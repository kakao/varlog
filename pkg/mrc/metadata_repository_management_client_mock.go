// Code generated by MockGen. DO NOT EDIT.
// Source: github.daumkakao.com/varlog/varlog/pkg/mrc (interfaces: MetadataRepositoryManagementClient)

// Package mrc is a generated GoMock package.
package mrc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.daumkakao.com/varlog/varlog/pkg/types"
	mrpb "github.daumkakao.com/varlog/varlog/proto/mrpb"
)

// MockMetadataRepositoryManagementClient is a mock of MetadataRepositoryManagementClient interface.
type MockMetadataRepositoryManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataRepositoryManagementClientMockRecorder
}

// MockMetadataRepositoryManagementClientMockRecorder is the mock recorder for MockMetadataRepositoryManagementClient.
type MockMetadataRepositoryManagementClientMockRecorder struct {
	mock *MockMetadataRepositoryManagementClient
}

// NewMockMetadataRepositoryManagementClient creates a new mock instance.
func NewMockMetadataRepositoryManagementClient(ctrl *gomock.Controller) *MockMetadataRepositoryManagementClient {
	mock := &MockMetadataRepositoryManagementClient{ctrl: ctrl}
	mock.recorder = &MockMetadataRepositoryManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataRepositoryManagementClient) EXPECT() *MockMetadataRepositoryManagementClientMockRecorder {
	return m.recorder
}

// AddPeer mocks base method.
func (m *MockMetadataRepositoryManagementClient) AddPeer(arg0 context.Context, arg1 types.ClusterID, arg2 types.NodeID, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockMetadataRepositoryManagementClientMockRecorder) AddPeer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockMetadataRepositoryManagementClient)(nil).AddPeer), arg0, arg1, arg2, arg3)
}

// Close mocks base method.
func (m *MockMetadataRepositoryManagementClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetadataRepositoryManagementClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetadataRepositoryManagementClient)(nil).Close))
}

// GetClusterInfo mocks base method.
func (m *MockMetadataRepositoryManagementClient) GetClusterInfo(arg0 context.Context, arg1 types.ClusterID) (*mrpb.GetClusterInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterInfo", arg0, arg1)
	ret0, _ := ret[0].(*mrpb.GetClusterInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterInfo indicates an expected call of GetClusterInfo.
func (mr *MockMetadataRepositoryManagementClientMockRecorder) GetClusterInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterInfo", reflect.TypeOf((*MockMetadataRepositoryManagementClient)(nil).GetClusterInfo), arg0, arg1)
}

// RemovePeer mocks base method.
func (m *MockMetadataRepositoryManagementClient) RemovePeer(arg0 context.Context, arg1 types.ClusterID, arg2 types.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePeer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePeer indicates an expected call of RemovePeer.
func (mr *MockMetadataRepositoryManagementClientMockRecorder) RemovePeer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockMetadataRepositoryManagementClient)(nil).RemovePeer), arg0, arg1, arg2)
}
