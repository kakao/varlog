// Code generated by MockGen. DO NOT EDIT.
// Source: github.daumkakao.com/varlog/varlog/pkg/admin (interfaces: Client)

// Package admin is a generated GoMock package.
package admin

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.daumkakao.com/varlog/varlog/pkg/types"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
	vmspb "github.daumkakao.com/varlog/varlog/proto/vmspb"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddLogStream mocks base method.
func (m *MockClient) AddLogStream(arg0 context.Context, arg1 types.TopicID, arg2 []*varlogpb.ReplicaDescriptor) (*vmspb.AddLogStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(*vmspb.AddLogStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLogStream indicates an expected call of AddLogStream.
func (mr *MockClientMockRecorder) AddLogStream(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogStream", reflect.TypeOf((*MockClient)(nil).AddLogStream), arg0, arg1, arg2)
}

// AddMRPeer mocks base method.
func (m *MockClient) AddMRPeer(arg0 context.Context, arg1, arg2 string) (*vmspb.AddMRPeerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMRPeer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*vmspb.AddMRPeerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMRPeer indicates an expected call of AddMRPeer.
func (mr *MockClientMockRecorder) AddMRPeer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMRPeer", reflect.TypeOf((*MockClient)(nil).AddMRPeer), arg0, arg1, arg2)
}

// AddStorageNode mocks base method.
func (m *MockClient) AddStorageNode(arg0 context.Context, arg1 string) (*vmspb.AddStorageNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStorageNode", arg0, arg1)
	ret0, _ := ret[0].(*vmspb.AddStorageNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStorageNode indicates an expected call of AddStorageNode.
func (mr *MockClientMockRecorder) AddStorageNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStorageNode", reflect.TypeOf((*MockClient)(nil).AddStorageNode), arg0, arg1)
}

// AddTopic mocks base method.
func (m *MockClient) AddTopic(arg0 context.Context) (*vmspb.AddTopicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTopic", arg0)
	ret0, _ := ret[0].(*vmspb.AddTopicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTopic indicates an expected call of AddTopic.
func (mr *MockClientMockRecorder) AddTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTopic", reflect.TypeOf((*MockClient)(nil).AddTopic), arg0)
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// GetMRMembers mocks base method.
func (m *MockClient) GetMRMembers(arg0 context.Context) (*vmspb.GetMRMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMRMembers", arg0)
	ret0, _ := ret[0].(*vmspb.GetMRMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMRMembers indicates an expected call of GetMRMembers.
func (mr *MockClientMockRecorder) GetMRMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMRMembers", reflect.TypeOf((*MockClient)(nil).GetMRMembers), arg0)
}

// GetStorageNodes mocks base method.
func (m *MockClient) GetStorageNodes(arg0 context.Context) (*vmspb.GetStorageNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageNodes", arg0)
	ret0, _ := ret[0].(*vmspb.GetStorageNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageNodes indicates an expected call of GetStorageNodes.
func (mr *MockClientMockRecorder) GetStorageNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageNodes", reflect.TypeOf((*MockClient)(nil).GetStorageNodes), arg0)
}

// RemoveLogStreamReplica mocks base method.
func (m *MockClient) RemoveLogStreamReplica(arg0 context.Context, arg1 types.StorageNodeID, arg2 types.TopicID, arg3 types.LogStreamID) (*vmspb.RemoveLogStreamReplicaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLogStreamReplica", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*vmspb.RemoveLogStreamReplicaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLogStreamReplica indicates an expected call of RemoveLogStreamReplica.
func (mr *MockClientMockRecorder) RemoveLogStreamReplica(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLogStreamReplica", reflect.TypeOf((*MockClient)(nil).RemoveLogStreamReplica), arg0, arg1, arg2, arg3)
}

// RemoveMRPeer mocks base method.
func (m *MockClient) RemoveMRPeer(arg0 context.Context, arg1 string) (*vmspb.RemoveMRPeerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMRPeer", arg0, arg1)
	ret0, _ := ret[0].(*vmspb.RemoveMRPeerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMRPeer indicates an expected call of RemoveMRPeer.
func (mr *MockClientMockRecorder) RemoveMRPeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMRPeer", reflect.TypeOf((*MockClient)(nil).RemoveMRPeer), arg0, arg1)
}

// Seal mocks base method.
func (m *MockClient) Seal(arg0 context.Context, arg1 types.TopicID, arg2 types.LogStreamID) (*vmspb.SealResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", arg0, arg1, arg2)
	ret0, _ := ret[0].(*vmspb.SealResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seal indicates an expected call of Seal.
func (mr *MockClientMockRecorder) Seal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockClient)(nil).Seal), arg0, arg1, arg2)
}

// Sync mocks base method.
func (m *MockClient) Sync(arg0 context.Context, arg1 types.TopicID, arg2 types.LogStreamID, arg3, arg4 types.StorageNodeID) (*vmspb.SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*vmspb.SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockClientMockRecorder) Sync(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockClient)(nil).Sync), arg0, arg1, arg2, arg3, arg4)
}

// UnregisterLogStream mocks base method.
func (m *MockClient) UnregisterLogStream(arg0 context.Context, arg1 types.TopicID, arg2 types.LogStreamID) (*vmspb.UnregisterLogStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterLogStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(*vmspb.UnregisterLogStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterLogStream indicates an expected call of UnregisterLogStream.
func (mr *MockClientMockRecorder) UnregisterLogStream(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterLogStream", reflect.TypeOf((*MockClient)(nil).UnregisterLogStream), arg0, arg1, arg2)
}

// UnregisterStorageNode mocks base method.
func (m *MockClient) UnregisterStorageNode(arg0 context.Context, arg1 types.StorageNodeID) (*vmspb.UnregisterStorageNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterStorageNode", arg0, arg1)
	ret0, _ := ret[0].(*vmspb.UnregisterStorageNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterStorageNode indicates an expected call of UnregisterStorageNode.
func (mr *MockClientMockRecorder) UnregisterStorageNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterStorageNode", reflect.TypeOf((*MockClient)(nil).UnregisterStorageNode), arg0, arg1)
}

// UnregisterTopic mocks base method.
func (m *MockClient) UnregisterTopic(arg0 context.Context, arg1 types.TopicID) (*vmspb.UnregisterTopicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterTopic", arg0, arg1)
	ret0, _ := ret[0].(*vmspb.UnregisterTopicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterTopic indicates an expected call of UnregisterTopic.
func (mr *MockClientMockRecorder) UnregisterTopic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterTopic", reflect.TypeOf((*MockClient)(nil).UnregisterTopic), arg0, arg1)
}

// Unseal mocks base method.
func (m *MockClient) Unseal(arg0 context.Context, arg1 types.TopicID, arg2 types.LogStreamID) (*vmspb.UnsealResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unseal", arg0, arg1, arg2)
	ret0, _ := ret[0].(*vmspb.UnsealResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unseal indicates an expected call of Unseal.
func (mr *MockClientMockRecorder) Unseal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unseal", reflect.TypeOf((*MockClient)(nil).Unseal), arg0, arg1, arg2)
}

// UpdateLogStream mocks base method.
func (m *MockClient) UpdateLogStream(arg0 context.Context, arg1 types.TopicID, arg2 types.LogStreamID, arg3, arg4 *varlogpb.ReplicaDescriptor) (*vmspb.UpdateLogStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogStream", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*vmspb.UpdateLogStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogStream indicates an expected call of UpdateLogStream.
func (mr *MockClientMockRecorder) UpdateLogStream(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogStream", reflect.TypeOf((*MockClient)(nil).UpdateLogStream), arg0, arg1, arg2, arg3, arg4)
}
