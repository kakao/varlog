syntax = "proto3";

package varlog.admpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "varlogpb/metadata.proto";
import "snpb/replicator.proto";
import "snpb/metadata.proto";

option go_package = "github.com/kakao/varlog/proto/admpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// StorageNodeMetadata represents the current status of the storage node.
message StorageNodeMetadata {
  option (gogoproto.equal) = true;

  snpb.StorageNodeMetadataDescriptor storage_node = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.jsontag) = ""
  ];
  // CreateTime is the time when the storage node is created and registered to
  // the metadata repository.
  google.protobuf.Timestamp create_time = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "createTime"
  ];
  // LastHeartbeatTime is the time when the admin server checked the liveness of
  // the storage node. A zero value indicates that the admin server does not
  // check the storage node. Typically, since the storage node is just
  // registered, the admin server does not know the field. It is also possible
  // that the admin server is just restarted.
  google.protobuf.Timestamp last_heartbeat_time = 3 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "lastHeartbeatTime"
  ];
}

message GetStorageNodeRequest {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
}
message GetStorageNodeResponse {
  // StorageNode registered to the cluster.
  StorageNodeMetadata storage_node = 1 [(gogoproto.jsontag) = "storageNode"];
}
message ListStorageNodesRequest {}
message ListStorageNodesResponse {
  // StorageNodes registered to the cluster.
  repeated StorageNodeMetadata storage_nodes = 1
    [(gogoproto.nullable) = false, (gogoproto.jsontag) = "storageNodes"];
}
message AddStorageNodeRequest {
  varlogpb.StorageNode storage_node = 1 [(gogoproto.nullable) = false];
}
message AddStorageNodeResponse {
  StorageNodeMetadata storage_node = 1 [(gogoproto.jsontag) = "storageNode"];
}
message UnregisterStorageNodeRequest {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
}
message UnregisterStorageNodeResponse {}

message GetTopicRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
}
message GetTopicResponse {
  varlogpb.TopicDescriptor topic = 1 [(gogoproto.jsontag) = "topic"];
}
message DescribeTopicRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
}
message DescribeTopicResponse {
  varlogpb.TopicDescriptor topic = 1 [(gogoproto.nullable) = false];
  repeated varlogpb.LogStreamDescriptor log_streams = 2
    [(gogoproto.nullable) = false];
}
message ListTopicsRequest {}
message ListTopicsResponse {
  repeated varlogpb.TopicDescriptor topics = 1
    [(gogoproto.nullable) = false, (gogoproto.jsontag) = "topics"];
}
// AddTopicRequest represents a request to add a topic to the cluster.
message AddTopicRequest {}
// AddTopicResponse represents a response of AddTopicRequest.
message AddTopicResponse {
  varlogpb.TopicDescriptor topic = 1 [(gogoproto.jsontag) = "topic"];
}
message UnregisterTopicRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
}
message UnregisterTopicResponse {}

message GetLogStreamRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}
message GetLogStreamResponse {
  varlogpb.LogStreamDescriptor log_stream = 1
    [(gogoproto.jsontag) = "logStream"];
}
message ListLogStreamsRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
}
message ListLogStreamsResponse {
  repeated varlogpb.LogStreamDescriptor log_streams = 1
    [(gogoproto.nullable) = false, (gogoproto.jsontag) = "logStreams"];
}
message AddLogStreamRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  // TODO: nullable = false
  repeated varlogpb.ReplicaDescriptor replicas = 2
    [(gogoproto.nullable) = true];
}
message AddLogStreamResponse {
  varlogpb.LogStreamDescriptor log_stream = 1;
}
message UpdateLogStreamRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  /*
  // NOTE: popped_replica need not be varlog.ReplicaDescriptor, but it is
  // natural. Though it is awkward, popped_storage_node_id is used here.
  uint32 popped_storage_node_id = 2 [
      (gogoproto.casttype) =
          "github.com/kakao/varlog/pkg/types.StorageNodeID",
      (gogoproto.customname) = "PoppedStorageNodeID"
  ];
  */
  varlogpb.ReplicaDescriptor popped_replica = 3 [(gogoproto.nullable) = false];
  varlogpb.ReplicaDescriptor pushed_replica = 4 [(gogoproto.nullable) = false];
}
message UpdateLogStreamResponse {
  varlogpb.LogStreamDescriptor log_stream = 1;
}
message UnregisterLogStreamRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}
message UnregisterLogStreamResponse {}

message RemoveLogStreamReplicaRequest {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 3 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}
message RemoveLogStreamReplicaResponse {}

message SealRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message SealResponse {
  repeated snpb.LogStreamReplicaMetadataDescriptor log_streams = 1
    [(gogoproto.nullable) = false, (gogoproto.jsontag) = "logStreams"];
  uint64 sealed_glsn = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "SealedGLSN",
    (gogoproto.jsontag) = "sealedGLSN"
  ];
}

message UnsealRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message UnsealResponse {
  varlogpb.LogStreamDescriptor log_stream = 1
    [(gogoproto.jsontag) = "logStream"];
}

message SyncRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  int32 src_storage_node_id = 3 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "SrcStorageNodeID"
  ];
  int32 dst_storage_node_id = 4 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "DstStorageNodeID"
  ];
}
message SyncResponse {
  snpb.SyncStatus status = 1;
}
message TrimRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID",
    (gogoproto.jsontag) = "topicId"
  ];
  uint64 last_glsn = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "LastGLSN",
    (gogoproto.jsontag) = "lastGLSN"
  ];
}
message TrimResult {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID",
    (gogoproto.jsontag) = "storageNodeId"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID",
    (gogoproto.jsontag) = "logStreamId"
  ];
  string error = 3 [(gogoproto.jsontag) = "error,omitempty"];
}
message TrimResponse {
  repeated TrimResult results = 1 [(gogoproto.nullable) = false];
}

message GetMetadataRepositoryNodeRequest {
  uint64 node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
}
message GetMetadataRepositoryNodeResponse {
  varlogpb.MetadataRepositoryNode node = 1;
}
message ListMetadataRepositoryNodesRequest {}
message ListMetadataRepositoryNodesResponse {
  repeated varlogpb.MetadataRepositoryNode nodes = 1
    [(gogoproto.nullable) = false, (gogoproto.jsontag) = "nodes"];
}
message GetMRMembersResponse {
  uint64 leader = 1
    [(gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID"];

  int32 replication_factor = 2
    [(gogoproto.jsontag) = "replicationFactor,omitempty"];

  map<uint64, string> members = 3
    [(gogoproto.castkey) = "github.com/kakao/varlog/pkg/types.NodeID"];
}
message AddMetadataRepositoryNodeRequest {
  string raft_url = 1 [(gogoproto.customname) = "RaftURL"];
  string rpc_addr = 2 [(gogoproto.customname) = "RPCAddr"];
}
message AddMetadataRepositoryNodeResponse {
  varlogpb.MetadataRepositoryNode node = 1;
}
message AddMRPeerRequest {
  string raft_url = 1 [(gogoproto.customname) = "RaftURL"];
  string rpc_addr = 2 [(gogoproto.customname) = "RPCAddr"];
}
message AddMRPeerResponse {
  uint64 node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID",
    (gogoproto.jsontag) = "nodeId,omitempty"
  ];
}
message DeleteMetadataRepositoryNodeRequest {
  uint64 node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID",
    (gogoproto.jsontag) = "nodeId"
  ];
}
message DeleteMetadataRepositoryNodeResponse {}
message RemoveMRPeerRequest {
  string raft_url = 1 [(gogoproto.customname) = "RaftURL"];
}
message RemoveMRPeerResponse {}

service ClusterManager {
  // GetStorageNode returns the metadata of storage node requested.
  // It returns NotFound if the storage node does not exist.
  rpc GetStorageNode(GetStorageNodeRequest) returns (GetStorageNodeResponse) {}
  // ListStorageNodes returns a list of storage nodes in the cluster.
  rpc ListStorageNodes(ListStorageNodesRequest)
    returns (ListStorageNodesResponse) {}
  // AddStorageNode adds a new storage node to the cluster.
  // It is idempotent, that is, adding an already added storage node is okay.
  rpc AddStorageNode(AddStorageNodeRequest) returns (AddStorageNodeResponse) {}
  // UnregisterStorageNode unregisters the storage node specified by the
  // request.
  rpc UnregisterStorageNode(UnregisterStorageNodeRequest)
    returns (UnregisterStorageNodeResponse) {}

  // GetTopic returns the topic specified by the request.
  rpc GetTopic(GetTopicRequest) returns (GetTopicResponse) {}
  // DescribeTopic returns the topic specified by the request.
  // Deprecated: Use GetTopic.
  rpc DescribeTopic(DescribeTopicRequest) returns (DescribeTopicResponse) {}
  // ListTopics returns a list of topics in the cluster.
  rpc ListTopics(ListTopicsRequest) returns (ListTopicsResponse) {}
  // AddTopic adds a new topic and returns its metadata.
  rpc AddTopic(AddTopicRequest) returns (AddTopicResponse) {}
  rpc UnregisterTopic(UnregisterTopicRequest)
    returns (UnregisterTopicResponse) {}

  rpc GetLogStream(GetLogStreamRequest) returns (GetLogStreamResponse) {}
  rpc ListLogStreams(ListLogStreamsRequest) returns (ListLogStreamsResponse) {}
  // AddLogStream adds a new log stream to the cluster.
  // The error code ResourceExhausted is returned if the number of log streams
  // is reached the upper limit.
  rpc AddLogStream(AddLogStreamRequest) returns (AddLogStreamResponse) {}
  // UpdateLogStream changes the configuration of replicas in a log stream.
  // Its codes are defines as followings:
  // - InvalidArgument: The client tries to swap the same replica.
  // - Unavailable: The cluster metadata cannot be fetched from the metadata
  // repository transiently.
  // - NotFound: The target log stream does not exist.
  // - FailedPrecondition: Either the target log stream is not sealed, the
  // target log stream doesn't have a victim replica, or the target log stream
  // already has both victim and new replica. Note that clients should not retry
  // without any action.
  // - Unknown: Either storage node or metadata repository returns an error.
  //
  // TODO: Moving the data directory within the same node is not supported yet.
  // TODO: We will define codes for errors returned from storage nodes and
  // metadata repository soon.
  rpc UpdateLogStream(UpdateLogStreamRequest)
    returns (UpdateLogStreamResponse) {}
  rpc UnregisterLogStream(UnregisterLogStreamRequest)
    returns (UnregisterLogStreamResponse) {}

  rpc RemoveLogStreamReplica(RemoveLogStreamReplicaRequest)
    returns (RemoveLogStreamReplicaResponse) {}

  rpc Seal(SealRequest) returns (SealResponse) {}
  rpc Unseal(UnsealRequest) returns (UnsealResponse) {}
  rpc Sync(SyncRequest) returns (SyncResponse) {}
  rpc Trim(TrimRequest) returns (TrimResponse) {}

  rpc GetMetadataRepositoryNode(GetMetadataRepositoryNodeRequest)
    returns (GetMetadataRepositoryNodeResponse) {}
  rpc ListMetadataRepositoryNodes(ListMetadataRepositoryNodesRequest)
    returns (ListMetadataRepositoryNodesResponse) {}
  rpc GetMRMembers(google.protobuf.Empty) returns (GetMRMembersResponse) {}
  rpc AddMetadataRepositoryNode(AddMetadataRepositoryNodeRequest)
    returns (AddMetadataRepositoryNodeResponse) {}
  rpc AddMRPeer(AddMRPeerRequest) returns (AddMRPeerResponse) {}
  rpc DeleteMetadataRepositoryNode(DeleteMetadataRepositoryNodeRequest)
    returns (DeleteMetadataRepositoryNodeResponse) {}
  rpc RemoveMRPeer(RemoveMRPeerRequest) returns (RemoveMRPeerResponse) {}
}
