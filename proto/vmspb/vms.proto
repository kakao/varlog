syntax = "proto3";

package varlog.vmspb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "varlogpb/metadata.proto";
import "snpb/replicator.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/vmspb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

message AddStorageNodeRequest {
  // address is IP of a node to be added to the cluster.
  string address = 1;
}

message AddStorageNodeResponse {
  varlogpb.StorageNodeMetadataDescriptor storage_node = 1;
}

message UnregisterStorageNodeRequest {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
}

message UnregisterStorageNodeResponse {}

// AddTopicRequest represents a request to add a topic to the cluster.
message AddTopicRequest {}

// AddTopicResponse represents a response of AddTopicRequest.
message AddTopicResponse {
  varlogpb.TopicDescriptor topic = 1 [(gogoproto.nullable) = false];
}

// TopicsRequest represents a request to get a list of topics in the cluster.
message TopicsRequest {}

// TopicsResponse represents a response of TopicsRequest.
message TopicsResponse {
  repeated varlogpb.TopicDescriptor topics = 1 [(gogoproto.nullable) = false];
}

message UnregisterTopicRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
}

message UnregisterTopicResponse {}

message AddLogStreamRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  // TODO: nullable = false
  repeated varlogpb.ReplicaDescriptor replicas = 2
      [(gogoproto.nullable) = true];
}

message AddLogStreamResponse {
  varlogpb.LogStreamDescriptor log_stream = 1;
}

message UnregisterLogStreamRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message UnregisterLogStreamResponse {}

message RemoveLogStreamReplicaRequest {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message RemoveLogStreamReplicaResponse {}

message UpdateLogStreamRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  /*
  // NOTE: popped_replica need not be varlog.ReplicaDescriptor, but it is
  // natural. Though it is awkward, popped_storage_node_id is used here.
  uint32 popped_storage_node_id = 2 [
      (gogoproto.casttype) =
          "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
      (gogoproto.customname) = "PoppedStorageNodeID"
  ];
  */
  varlogpb.ReplicaDescriptor popped_replica = 3;
  varlogpb.ReplicaDescriptor pushed_replica = 4;
}

message UpdateLogStreamResponse {
  varlogpb.LogStreamDescriptor log_stream = 1;
}

message SealRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message SealResponse {
  repeated varlogpb.LogStreamMetadataDescriptor log_streams = 1
      [(gogoproto.nullable) = false];
  uint64 sealed_glsn = 2 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "SealedGLSN"
  ];
}

message SyncRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  int32 src_storage_node_id = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "SrcStorageNodeID"
  ];
  int32 dst_storage_node_id = 4 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "DstStorageNodeID"
  ];
}

message SyncResponse {
  snpb.SyncStatus status = 1;
}

message UnsealRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message UnsealResponse {
  varlogpb.LogStreamDescriptor log_stream = 1;
}

message GetMRMembersResponse {
  uint64 leader = 1 [(gogoproto.casttype) =
                         "github.daumkakao.com/varlog/varlog/pkg/types.NodeID"];

  int32 replication_factor = 2
      [(gogoproto.jsontag) = "replicationFactor,omitempty"];

  map<uint64, string> members = 3
      [(gogoproto.castkey) =
           "github.daumkakao.com/varlog/varlog/pkg/types.NodeID"];
}

message GetStorageNodesResponse {
  map<int32, string> storage_nodes = 1 [
    (gogoproto.castkey) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.jsontag) = "storageNodes"
  ];
}

message AddMRPeerRequest {
  string raft_url = 1 [(gogoproto.customname) = "RaftURL"];
  string rpc_addr = 2 [(gogoproto.customname) = "RPCAddr"];
}

message AddMRPeerResponse {
  uint64 node_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID",
    (gogoproto.jsontag) = "nodeId,omitempty"
  ];
}

message RemoveMRPeerRequest {
  string raft_url = 1 [(gogoproto.customname) = "RaftURL"];
}

message RemoveMRPeerResponse {}

service ClusterManager {
  rpc AddStorageNode(AddStorageNodeRequest) returns (AddStorageNodeResponse) {}

  rpc UnregisterStorageNode(UnregisterStorageNodeRequest)
      returns (UnregisterStorageNodeResponse) {}

  rpc AddTopic(AddTopicRequest) returns (AddTopicResponse) {}

  rpc Topics(TopicsRequest) returns (TopicsResponse) {}

  rpc UnregisterTopic(UnregisterTopicRequest)
      returns (UnregisterTopicResponse) {}

  rpc AddLogStream(AddLogStreamRequest) returns (AddLogStreamResponse) {}

  rpc UnregisterLogStream(UnregisterLogStreamRequest)
      returns (UnregisterLogStreamResponse) {}

  rpc RemoveLogStreamReplica(RemoveLogStreamReplicaRequest)
      returns (RemoveLogStreamReplicaResponse) {}

  rpc UpdateLogStream(UpdateLogStreamRequest)
      returns (UpdateLogStreamResponse) {}

  rpc Seal(SealRequest) returns (SealResponse) {}

  rpc Sync(SyncRequest) returns (SyncResponse) {}

  rpc Unseal(UnsealRequest) returns (UnsealResponse) {}

  rpc GetMRMembers(google.protobuf.Empty) returns (GetMRMembersResponse) {}

  rpc AddMRPeer(AddMRPeerRequest) returns (AddMRPeerResponse) {}

  rpc RemoveMRPeer(RemoveMRPeerRequest) returns (RemoveMRPeerResponse) {}

  rpc GetStorageNodes(google.protobuf.Empty) returns (GetStorageNodesResponse) {
  }
}
