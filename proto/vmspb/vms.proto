syntax = "proto3";

package varlog.vmspb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "varlogpb/metadata.proto";
import "snpb/replicator.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/vmspb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message AddStorageNodeRequest {
    // address is IP of a node to be added to the cluster.
    string address = 1;
}

message AddStorageNodeResponse {
    varlogpb.StorageNodeMetadataDescriptor storage_node = 1;
}

message UnregisterStorageNodeRequest {
    uint32 storage_node_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
        (gogoproto.customname) = "StorageNodeID"
    ];
}

message UnregisterStorageNodeResponse {}

message AddLogStreamRequest {
    // TODO: nullable = false
    repeated varlogpb.ReplicaDescriptor replicas = 1
        [(gogoproto.nullable) = true];
}

message AddLogStreamResponse {
    varlogpb.LogStreamDescriptor log_stream = 1;
}

message UnregisterLogStreamRequest {
    uint32 log_stream_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
}

message UnregisterLogStreamResponse {}

message RemoveLogStreamReplicaRequest {
    uint32 storage_node_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
        (gogoproto.customname) = "StorageNodeID"
    ];
    uint32 log_stream_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
}

message RemoveLogStreamReplicaResponse {}

message UpdateLogStreamRequest {
    uint32 log_stream_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
    /*
    // NOTE: popped_replica need not be varlog.ReplicaDescriptor, but it is
    // natural. Though it is awkward, popped_storage_node_id is used here.
    uint32 popped_storage_node_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
        (gogoproto.customname) = "PoppedStorageNodeID"
    ];
    */
    varlogpb.ReplicaDescriptor popped_replica = 2;
    varlogpb.ReplicaDescriptor pushed_replica = 3;
}

message UpdateLogStreamResponse {
    varlogpb.LogStreamDescriptor log_stream = 1;
}

message SealRequest {
    uint32 log_stream_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
}

message SealResponse {
    repeated varlogpb.LogStreamMetadataDescriptor log_streams = 1
        [(gogoproto.nullable) = false];
    uint64 sealed_glsn = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
        (gogoproto.customname) = "SealedGLSN"
    ];
}

message SyncRequest {
    uint32 log_stream_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
    uint32 src_storage_node_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
        (gogoproto.customname) = "SrcStorageNodeID"
    ];
    uint32 dst_storage_node_id = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
        (gogoproto.customname) = "DstStorageNodeID"
    ];
}

message SyncResponse {
    snpb.SyncStatus status = 1;
}

message UnsealRequest {
    uint32 log_stream_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
}

message UnsealResponse {
    varlogpb.LogStreamDescriptor log_stream = 1;
}

message GetMRMembersResponse {
    uint64 leader = 1
        [(gogoproto.casttype) =
             "github.daumkakao.com/varlog/varlog/pkg/types.NodeID"];

    int32 replication_factor = 2;

    map<uint64, string> members = 3
        [(gogoproto.castkey) =
             "github.daumkakao.com/varlog/varlog/pkg/types.NodeID"];
}

message GetStorageNodesResponse {
    map<uint32, string> storagenodes = 1
        [(gogoproto.castkey) =
             "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID"];
}

message AddMRPeerRequest {
    string raft_url = 1 [(gogoproto.customname) = "RaftURL"];
    string rpc_addr = 2 [(gogoproto.customname) = "RPCAddr"];
}

message AddMRPeerResponse {
    uint64 node_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.NodeID",
        (gogoproto.customname) = "NodeID"
    ];
}

service ClusterManager {
    rpc AddStorageNode(AddStorageNodeRequest) returns (AddStorageNodeResponse) {
    }

    rpc UnregisterStorageNode(UnregisterStorageNodeRequest)
        returns (UnregisterStorageNodeResponse) {}

    rpc AddLogStream(AddLogStreamRequest) returns (AddLogStreamResponse) {}

    rpc UnregisterLogStream(UnregisterLogStreamRequest)
        returns (UnregisterLogStreamResponse) {}

    rpc RemoveLogStreamReplica(RemoveLogStreamReplicaRequest)
        returns (RemoveLogStreamReplicaResponse) {}

    rpc UpdateLogStream(UpdateLogStreamRequest)
        returns (UpdateLogStreamResponse) {}

    rpc Seal(SealRequest) returns (SealResponse) {}

    rpc Sync(SyncRequest) returns (SyncResponse) {}

    rpc Unseal(UnsealRequest) returns (UnsealResponse) {}

    rpc GetMRMembers(google.protobuf.Empty) returns (GetMRMembersResponse) {}

    rpc AddMRPeer(AddMRPeerRequest) returns (AddMRPeerResponse) {}

    rpc GetStorageNodes(google.protobuf.Empty)
        returns (GetStorageNodesResponse) {}
}
