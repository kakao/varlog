// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/snpb/management.proto

package snpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	github_daumkakao_com_varlog_varlog_pkg_types "github.daumkakao.com/varlog/varlog/pkg/types"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LogStreamCommitInfo_Status int32

const (
	GetPrevCommitStatusOK           LogStreamCommitInfo_Status = 0
	GetPrevCommitStatusNotFound     LogStreamCommitInfo_Status = 1
	GetPrevCommitStatusInconsistent LogStreamCommitInfo_Status = 2
)

var LogStreamCommitInfo_Status_name = map[int32]string{
	0: "OK",
	1: "NOT_FOUND",
	2: "INCONSISTENT",
}

var LogStreamCommitInfo_Status_value = map[string]int32{
	"OK":           0,
	"NOT_FOUND":    1,
	"INCONSISTENT": 2,
}

func (x LogStreamCommitInfo_Status) String() string {
	return proto.EnumName(LogStreamCommitInfo_Status_name, int32(x))
}

func (LogStreamCommitInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{11, 0}
}

type GetMetadataRequest struct {
	ClusterID github_daumkakao_com_varlog_varlog_pkg_types.ClusterID `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
}

func (m *GetMetadataRequest) Reset()         { *m = GetMetadataRequest{} }
func (m *GetMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*GetMetadataRequest) ProtoMessage()    {}
func (*GetMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{0}
}
func (m *GetMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetadataRequest.Merge(m, src)
}
func (m *GetMetadataRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetadataRequest proto.InternalMessageInfo

func (m *GetMetadataRequest) GetClusterID() github_daumkakao_com_varlog_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

type GetMetadataResponse struct {
	StorageNodeMetadata *varlogpb.StorageNodeMetadataDescriptor `protobuf:"bytes,1,opt,name=storage_node_metadata,json=storageNodeMetadata,proto3" json:"storage_node_metadata,omitempty"`
}

func (m *GetMetadataResponse) Reset()         { *m = GetMetadataResponse{} }
func (m *GetMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*GetMetadataResponse) ProtoMessage()    {}
func (*GetMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{1}
}
func (m *GetMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetadataResponse.Merge(m, src)
}
func (m *GetMetadataResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetadataResponse proto.InternalMessageInfo

func (m *GetMetadataResponse) GetStorageNodeMetadata() *varlogpb.StorageNodeMetadataDescriptor {
	if m != nil {
		return m.StorageNodeMetadata
	}
	return nil
}

type AddLogStreamReplicaRequest struct {
	ClusterID     github_daumkakao_com_varlog_varlog_pkg_types.ClusterID     `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	StorageNodeID github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,2,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	TopicID       github_daumkakao_com_varlog_varlog_pkg_types.TopicID       `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID   github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID   `protobuf:"varint,4,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	Storage       *varlogpb.StorageDescriptor                                `protobuf:"bytes,5,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (m *AddLogStreamReplicaRequest) Reset()         { *m = AddLogStreamReplicaRequest{} }
func (m *AddLogStreamReplicaRequest) String() string { return proto.CompactTextString(m) }
func (*AddLogStreamReplicaRequest) ProtoMessage()    {}
func (*AddLogStreamReplicaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{2}
}
func (m *AddLogStreamReplicaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLogStreamReplicaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLogStreamReplicaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddLogStreamReplicaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLogStreamReplicaRequest.Merge(m, src)
}
func (m *AddLogStreamReplicaRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AddLogStreamReplicaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLogStreamReplicaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddLogStreamReplicaRequest proto.InternalMessageInfo

func (m *AddLogStreamReplicaRequest) GetClusterID() github_daumkakao_com_varlog_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *AddLogStreamReplicaRequest) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

func (m *AddLogStreamReplicaRequest) GetTopicID() github_daumkakao_com_varlog_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *AddLogStreamReplicaRequest) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *AddLogStreamReplicaRequest) GetStorage() *varlogpb.StorageDescriptor {
	if m != nil {
		return m.Storage
	}
	return nil
}

type AddLogStreamReplicaResponse struct {
	// TODO (jun): Use LogStreamMetadataDescriptor
	LogStream *varlogpb.LogStreamDescriptor `protobuf:"bytes,1,opt,name=log_stream,json=logStream,proto3" json:"log_stream,omitempty"`
}

func (m *AddLogStreamReplicaResponse) Reset()         { *m = AddLogStreamReplicaResponse{} }
func (m *AddLogStreamReplicaResponse) String() string { return proto.CompactTextString(m) }
func (*AddLogStreamReplicaResponse) ProtoMessage()    {}
func (*AddLogStreamReplicaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{3}
}
func (m *AddLogStreamReplicaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLogStreamReplicaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLogStreamReplicaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddLogStreamReplicaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLogStreamReplicaResponse.Merge(m, src)
}
func (m *AddLogStreamReplicaResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AddLogStreamReplicaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLogStreamReplicaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddLogStreamReplicaResponse proto.InternalMessageInfo

func (m *AddLogStreamReplicaResponse) GetLogStream() *varlogpb.LogStreamDescriptor {
	if m != nil {
		return m.LogStream
	}
	return nil
}

type RemoveLogStreamRequest struct {
	ClusterID     github_daumkakao_com_varlog_varlog_pkg_types.ClusterID     `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	StorageNodeID github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,2,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	TopicID       github_daumkakao_com_varlog_varlog_pkg_types.TopicID       `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID   github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID   `protobuf:"varint,4,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *RemoveLogStreamRequest) Reset()         { *m = RemoveLogStreamRequest{} }
func (m *RemoveLogStreamRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveLogStreamRequest) ProtoMessage()    {}
func (*RemoveLogStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{4}
}
func (m *RemoveLogStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveLogStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveLogStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveLogStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveLogStreamRequest.Merge(m, src)
}
func (m *RemoveLogStreamRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RemoveLogStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveLogStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveLogStreamRequest proto.InternalMessageInfo

func (m *RemoveLogStreamRequest) GetClusterID() github_daumkakao_com_varlog_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *RemoveLogStreamRequest) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

func (m *RemoveLogStreamRequest) GetTopicID() github_daumkakao_com_varlog_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *RemoveLogStreamRequest) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

type SealRequest struct {
	ClusterID         github_daumkakao_com_varlog_varlog_pkg_types.ClusterID     `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	StorageNodeID     github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,2,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	TopicID           github_daumkakao_com_varlog_varlog_pkg_types.TopicID       `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID       github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID   `protobuf:"varint,4,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	LastCommittedGLSN github_daumkakao_com_varlog_varlog_pkg_types.GLSN          `protobuf:"varint,5,opt,name=last_committed_glsn,json=lastCommittedGlsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"last_committed_glsn,omitempty"`
}

func (m *SealRequest) Reset()         { *m = SealRequest{} }
func (m *SealRequest) String() string { return proto.CompactTextString(m) }
func (*SealRequest) ProtoMessage()    {}
func (*SealRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{5}
}
func (m *SealRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SealRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SealRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SealRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealRequest.Merge(m, src)
}
func (m *SealRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SealRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SealRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SealRequest proto.InternalMessageInfo

func (m *SealRequest) GetClusterID() github_daumkakao_com_varlog_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *SealRequest) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

func (m *SealRequest) GetTopicID() github_daumkakao_com_varlog_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *SealRequest) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *SealRequest) GetLastCommittedGLSN() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.LastCommittedGLSN
	}
	return 0
}

type SealResponse struct {
	Status            varlogpb.LogStreamStatus                          `protobuf:"varint,1,opt,name=status,proto3,enum=varlog.varlogpb.LogStreamStatus" json:"status,omitempty"`
	LastCommittedGLSN github_daumkakao_com_varlog_varlog_pkg_types.GLSN `protobuf:"varint,2,opt,name=last_committed_glsn,json=lastCommittedGlsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"last_committed_glsn,omitempty"`
}

func (m *SealResponse) Reset()         { *m = SealResponse{} }
func (m *SealResponse) String() string { return proto.CompactTextString(m) }
func (*SealResponse) ProtoMessage()    {}
func (*SealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{6}
}
func (m *SealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealResponse.Merge(m, src)
}
func (m *SealResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SealResponse proto.InternalMessageInfo

func (m *SealResponse) GetStatus() varlogpb.LogStreamStatus {
	if m != nil {
		return m.Status
	}
	return varlogpb.LogStreamStatusRunning
}

func (m *SealResponse) GetLastCommittedGLSN() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.LastCommittedGLSN
	}
	return 0
}

type UnsealRequest struct {
	ClusterID     github_daumkakao_com_varlog_varlog_pkg_types.ClusterID     `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	StorageNodeID github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,2,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	TopicID       github_daumkakao_com_varlog_varlog_pkg_types.TopicID       `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID   github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID   `protobuf:"varint,4,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	Replicas      []varlogpb.Replica                                         `protobuf:"bytes,5,rep,name=replicas,proto3" json:"replicas"`
}

func (m *UnsealRequest) Reset()         { *m = UnsealRequest{} }
func (m *UnsealRequest) String() string { return proto.CompactTextString(m) }
func (*UnsealRequest) ProtoMessage()    {}
func (*UnsealRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{7}
}
func (m *UnsealRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsealRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsealRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsealRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsealRequest.Merge(m, src)
}
func (m *UnsealRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UnsealRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsealRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnsealRequest proto.InternalMessageInfo

func (m *UnsealRequest) GetClusterID() github_daumkakao_com_varlog_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *UnsealRequest) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

func (m *UnsealRequest) GetTopicID() github_daumkakao_com_varlog_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *UnsealRequest) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *UnsealRequest) GetReplicas() []varlogpb.Replica {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type SyncRequest struct {
	ClusterID     github_daumkakao_com_varlog_varlog_pkg_types.ClusterID     `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	StorageNodeID github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,2,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	TopicID       github_daumkakao_com_varlog_varlog_pkg_types.TopicID       `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID   github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID   `protobuf:"varint,4,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	Backup        *SyncRequest_BackupNode                                    `protobuf:"bytes,5,opt,name=backup,proto3" json:"backup,omitempty"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{8}
}
func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

func (m *SyncRequest) GetClusterID() github_daumkakao_com_varlog_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *SyncRequest) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

func (m *SyncRequest) GetTopicID() github_daumkakao_com_varlog_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *SyncRequest) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *SyncRequest) GetBackup() *SyncRequest_BackupNode {
	if m != nil {
		return m.Backup
	}
	return nil
}

// FIXME: Use Replica instead of BackupNode
type SyncRequest_BackupNode struct {
	StorageNodeID github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,1,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	Address       string                                                     `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *SyncRequest_BackupNode) Reset()         { *m = SyncRequest_BackupNode{} }
func (m *SyncRequest_BackupNode) String() string { return proto.CompactTextString(m) }
func (*SyncRequest_BackupNode) ProtoMessage()    {}
func (*SyncRequest_BackupNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{8, 0}
}
func (m *SyncRequest_BackupNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRequest_BackupNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRequest_BackupNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRequest_BackupNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest_BackupNode.Merge(m, src)
}
func (m *SyncRequest_BackupNode) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncRequest_BackupNode) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest_BackupNode.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest_BackupNode proto.InternalMessageInfo

func (m *SyncRequest_BackupNode) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

func (m *SyncRequest_BackupNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type SyncResponse struct {
	Status *SyncStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *SyncResponse) Reset()         { *m = SyncResponse{} }
func (m *SyncResponse) String() string { return proto.CompactTextString(m) }
func (*SyncResponse) ProtoMessage()    {}
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{9}
}
func (m *SyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncResponse.Merge(m, src)
}
func (m *SyncResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncResponse proto.InternalMessageInfo

func (m *SyncResponse) GetStatus() *SyncStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetPrevCommitInfoRequest struct {
	PrevVersion github_daumkakao_com_varlog_varlog_pkg_types.Version `protobuf:"varint,1,opt,name=prev_version,json=prevVersion,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.Version" json:"prev_version,omitempty"`
}

func (m *GetPrevCommitInfoRequest) Reset()         { *m = GetPrevCommitInfoRequest{} }
func (m *GetPrevCommitInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetPrevCommitInfoRequest) ProtoMessage()    {}
func (*GetPrevCommitInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{10}
}
func (m *GetPrevCommitInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrevCommitInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrevCommitInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPrevCommitInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrevCommitInfoRequest.Merge(m, src)
}
func (m *GetPrevCommitInfoRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetPrevCommitInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrevCommitInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrevCommitInfoRequest proto.InternalMessageInfo

func (m *GetPrevCommitInfoRequest) GetPrevVersion() github_daumkakao_com_varlog_varlog_pkg_types.Version {
	if m != nil {
		return m.PrevVersion
	}
	return 0
}

type LogStreamCommitInfo struct {
	LogStreamID         github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID `protobuf:"varint,1,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	Status              LogStreamCommitInfo_Status                               `protobuf:"varint,2,opt,name=status,proto3,enum=varlog.snpb.LogStreamCommitInfo_Status" json:"status,omitempty"`
	CommittedLLSNOffset github_daumkakao_com_varlog_varlog_pkg_types.LLSN        `protobuf:"varint,3,opt,name=committed_llsn_offset,json=committedLlsnOffset,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LLSN" json:"committed_llsn_offset,omitempty"`
	CommittedGLSNOffset github_daumkakao_com_varlog_varlog_pkg_types.GLSN        `protobuf:"varint,4,opt,name=committed_glsn_offset,json=committedGlsnOffset,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"committed_glsn_offset,omitempty"`
	CommittedGLSNLength uint64                                                   `protobuf:"varint,5,opt,name=committed_glsn_length,json=committedGlsnLength,proto3" json:"committed_glsn_length,omitempty"`
	HighestWrittenLLSN  github_daumkakao_com_varlog_varlog_pkg_types.LLSN        `protobuf:"varint,6,opt,name=highest_written_llsn,json=highestWrittenLlsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LLSN" json:"highest_written_llsn,omitempty"`
	Version             github_daumkakao_com_varlog_varlog_pkg_types.Version     `protobuf:"varint,7,opt,name=version,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.Version" json:"version,omitempty"`
}

func (m *LogStreamCommitInfo) Reset()         { *m = LogStreamCommitInfo{} }
func (m *LogStreamCommitInfo) String() string { return proto.CompactTextString(m) }
func (*LogStreamCommitInfo) ProtoMessage()    {}
func (*LogStreamCommitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{11}
}
func (m *LogStreamCommitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStreamCommitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStreamCommitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStreamCommitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStreamCommitInfo.Merge(m, src)
}
func (m *LogStreamCommitInfo) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LogStreamCommitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStreamCommitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogStreamCommitInfo proto.InternalMessageInfo

func (m *LogStreamCommitInfo) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *LogStreamCommitInfo) GetStatus() LogStreamCommitInfo_Status {
	if m != nil {
		return m.Status
	}
	return GetPrevCommitStatusOK
}

func (m *LogStreamCommitInfo) GetCommittedLLSNOffset() github_daumkakao_com_varlog_varlog_pkg_types.LLSN {
	if m != nil {
		return m.CommittedLLSNOffset
	}
	return 0
}

func (m *LogStreamCommitInfo) GetCommittedGLSNOffset() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.CommittedGLSNOffset
	}
	return 0
}

func (m *LogStreamCommitInfo) GetCommittedGLSNLength() uint64 {
	if m != nil {
		return m.CommittedGLSNLength
	}
	return 0
}

func (m *LogStreamCommitInfo) GetHighestWrittenLLSN() github_daumkakao_com_varlog_varlog_pkg_types.LLSN {
	if m != nil {
		return m.HighestWrittenLLSN
	}
	return 0
}

func (m *LogStreamCommitInfo) GetVersion() github_daumkakao_com_varlog_varlog_pkg_types.Version {
	if m != nil {
		return m.Version
	}
	return 0
}

type GetPrevCommitInfoResponse struct {
	StorageNodeID github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,1,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	CommitInfos   []*LogStreamCommitInfo                                     `protobuf:"bytes,2,rep,name=commit_infos,json=commitInfos,proto3" json:"commit_infos,omitempty"`
}

func (m *GetPrevCommitInfoResponse) Reset()         { *m = GetPrevCommitInfoResponse{} }
func (m *GetPrevCommitInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetPrevCommitInfoResponse) ProtoMessage()    {}
func (*GetPrevCommitInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a108895042472a, []int{12}
}
func (m *GetPrevCommitInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrevCommitInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrevCommitInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPrevCommitInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrevCommitInfoResponse.Merge(m, src)
}
func (m *GetPrevCommitInfoResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetPrevCommitInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrevCommitInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrevCommitInfoResponse proto.InternalMessageInfo

func (m *GetPrevCommitInfoResponse) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

func (m *GetPrevCommitInfoResponse) GetCommitInfos() []*LogStreamCommitInfo {
	if m != nil {
		return m.CommitInfos
	}
	return nil
}

func init() {
	proto.RegisterEnum("varlog.snpb.LogStreamCommitInfo_Status", LogStreamCommitInfo_Status_name, LogStreamCommitInfo_Status_value)
	proto.RegisterType((*GetMetadataRequest)(nil), "varlog.snpb.GetMetadataRequest")
	proto.RegisterType((*GetMetadataResponse)(nil), "varlog.snpb.GetMetadataResponse")
	proto.RegisterType((*AddLogStreamReplicaRequest)(nil), "varlog.snpb.AddLogStreamReplicaRequest")
	proto.RegisterType((*AddLogStreamReplicaResponse)(nil), "varlog.snpb.AddLogStreamReplicaResponse")
	proto.RegisterType((*RemoveLogStreamRequest)(nil), "varlog.snpb.RemoveLogStreamRequest")
	proto.RegisterType((*SealRequest)(nil), "varlog.snpb.SealRequest")
	proto.RegisterType((*SealResponse)(nil), "varlog.snpb.SealResponse")
	proto.RegisterType((*UnsealRequest)(nil), "varlog.snpb.UnsealRequest")
	proto.RegisterType((*SyncRequest)(nil), "varlog.snpb.SyncRequest")
	proto.RegisterType((*SyncRequest_BackupNode)(nil), "varlog.snpb.SyncRequest.BackupNode")
	proto.RegisterType((*SyncResponse)(nil), "varlog.snpb.SyncResponse")
	proto.RegisterType((*GetPrevCommitInfoRequest)(nil), "varlog.snpb.GetPrevCommitInfoRequest")
	proto.RegisterType((*LogStreamCommitInfo)(nil), "varlog.snpb.LogStreamCommitInfo")
	proto.RegisterType((*GetPrevCommitInfoResponse)(nil), "varlog.snpb.GetPrevCommitInfoResponse")
}

func init() { proto.RegisterFile("proto/snpb/management.proto", fileDescriptor_b2a108895042472a) }

var fileDescriptor_b2a108895042472a = []byte{
	// 1248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0x26, 0x1b, 0xbb, 0x79, 0x4e, 0xbe, 0x6d, 0xc7, 0xdf, 0xb4, 0xee, 0x46, 0xf2, 0x9a,
	0x2d, 0x3f, 0x72, 0xe9, 0x5a, 0x84, 0x1f, 0xaa, 0x2a, 0xa0, 0xaa, 0xdd, 0xd6, 0x98, 0xb8, 0x76,
	0xb5, 0x4e, 0x41, 0x02, 0x09, 0x6b, 0xed, 0x1d, 0x6f, 0x4c, 0xd6, 0x3b, 0xcb, 0xce, 0x38, 0x95,
	0x11, 0x48, 0x1c, 0x51, 0x85, 0x10, 0x47, 0x2e, 0x15, 0x95, 0xe0, 0xbf, 0xe0, 0x86, 0x38, 0x54,
	0x9c, 0x7a, 0x84, 0x8b, 0x0f, 0xce, 0x85, 0xbf, 0xa1, 0x12, 0x12, 0xda, 0xd9, 0x1f, 0xf6, 0xda,
	0x8e, 0x82, 0x8b, 0x28, 0x8a, 0x94, 0x93, 0xbd, 0xfb, 0x7e, 0x7c, 0xde, 0x7b, 0xf3, 0x99, 0xf7,
	0x66, 0x07, 0x36, 0x1d, 0x97, 0x30, 0x52, 0xa0, 0xb6, 0xd3, 0x2a, 0xf4, 0x74, 0x5b, 0x37, 0x71,
	0x0f, 0xdb, 0x4c, 0xe5, 0x6f, 0x51, 0xfa, 0x40, 0x77, 0x2d, 0x62, 0xaa, 0x9e, 0x54, 0xba, 0x62,
	0x76, 0xd9, 0x5e, 0xbf, 0xa5, 0xb6, 0x49, 0xaf, 0x60, 0x12, 0x93, 0x14, 0xb8, 0x4e, 0xab, 0xdf,
	0xe1, 0x4f, 0xbe, 0x1b, 0xef, 0x9f, 0x6f, 0x2b, 0x6d, 0x9a, 0x84, 0x98, 0x16, 0x1e, 0x6b, 0xe1,
	0x9e, 0xc3, 0x06, 0x81, 0xf0, 0xa2, 0xef, 0xd8, 0xc3, 0xc4, 0x4c, 0x37, 0x74, 0xa6, 0x07, 0x82,
	0x0d, 0x1e, 0x88, 0x8b, 0x1d, 0xab, 0xdb, 0xd6, 0x19, 0x71, 0xfd, 0xd7, 0xca, 0xe7, 0x80, 0xca,
	0x98, 0xdd, 0x09, 0x74, 0x35, 0xfc, 0x69, 0x1f, 0x53, 0x86, 0x3a, 0x00, 0x6d, 0xab, 0x4f, 0x19,
	0x76, 0x9b, 0x5d, 0x23, 0x2b, 0xe4, 0x85, 0xad, 0xf5, 0x62, 0x79, 0x34, 0x94, 0x57, 0x4b, 0xfe,
	0xdb, 0xca, 0xcd, 0xa7, 0x43, 0xf9, 0xcd, 0x20, 0x6c, 0x43, 0xef, 0xf7, 0xf6, 0xf5, 0x7d, 0x9d,
	0xf0, 0x04, 0x7c, 0xfc, 0xf0, 0xc7, 0xd9, 0x37, 0x0b, 0x6c, 0xe0, 0x60, 0xaa, 0x46, 0x96, 0xda,
	0x6a, 0xe0, 0xba, 0x62, 0x28, 0x03, 0xc8, 0xc4, 0xd0, 0xa9, 0x43, 0x6c, 0x8a, 0x51, 0x0b, 0x36,
	0x28, 0x23, 0xae, 0x6e, 0xe2, 0xa6, 0x4d, 0x0c, 0xdc, 0x0c, 0x53, 0xe1, 0x91, 0xa4, 0xb7, 0x55,
	0x35, 0xa8, 0x5e, 0x98, 0xab, 0xda, 0xf0, 0xb5, 0x6b, 0xc4, 0xc0, 0xa1, 0xb3, 0x9b, 0x98, 0xb6,
	0xdd, 0xae, 0xc3, 0x88, 0xab, 0x65, 0xe8, 0xac, 0x58, 0xf9, 0x5a, 0x04, 0xe9, 0x86, 0x61, 0x54,
	0x89, 0xd9, 0x60, 0x2e, 0xd6, 0x7b, 0x9a, 0x5f, 0x99, 0xe7, 0x5c, 0x01, 0x74, 0x1f, 0xce, 0xc6,
	0x52, 0xed, 0x1a, 0xd9, 0xa5, 0xbc, 0xb0, 0xb5, 0x52, 0xac, 0x8f, 0x86, 0xf2, 0xfa, 0x44, 0x5e,
	0x1c, 0xf0, 0xda, 0x42, 0x80, 0x31, 0x6b, 0x6d, 0x7d, 0xa2, 0x0a, 0x15, 0x03, 0x7d, 0x0c, 0x67,
	0x18, 0x71, 0xba, 0x6d, 0x0f, 0x71, 0x99, 0x23, 0x96, 0x46, 0x43, 0x39, 0xb5, 0xeb, 0xbd, 0xe3,
	0x58, 0xaf, 0x2f, 0x84, 0x15, 0xd8, 0x69, 0x29, 0xee, 0xb4, 0x62, 0x20, 0x02, 0xeb, 0x16, 0x31,
	0x9b, 0x94, 0x17, 0xd7, 0x03, 0x11, 0x39, 0xc8, 0xce, 0x68, 0x28, 0xa7, 0xa3, 0xa2, 0x73, 0xa0,
	0xab, 0x0b, 0x01, 0x4d, 0xd8, 0x6a, 0x69, 0x2b, 0x7a, 0x30, 0xd0, 0x5b, 0x90, 0x0a, 0x32, 0xcc,
	0xae, 0x70, 0x9a, 0x28, 0x47, 0xd1, 0x64, 0x82, 0x1a, 0xa1, 0x89, 0xd2, 0x82, 0xcd, 0xb9, 0x6c,
	0x08, 0x18, 0x59, 0x02, 0x18, 0x67, 0x13, 0xd0, 0xf0, 0xc5, 0x19, 0xff, 0x91, 0xf9, 0x04, 0xc2,
	0x6a, 0x14, 0xa3, 0xf2, 0xeb, 0x32, 0x5c, 0xd0, 0x70, 0x8f, 0x1c, 0xe0, 0x09, 0x9c, 0x53, 0xba,
	0x9d, 0x48, 0xba, 0x29, 0x3f, 0x89, 0x90, 0x6e, 0x60, 0xdd, 0x3a, 0x5d, 0xc1, 0x93, 0xda, 0x30,
	0x3e, 0x83, 0x8c, 0xa5, 0x53, 0xd6, 0x6c, 0x93, 0x5e, 0xaf, 0xcb, 0x18, 0x36, 0x9a, 0xa6, 0x45,
	0x6d, 0xde, 0x3c, 0xc4, 0xe2, 0x7b, 0xa3, 0xa1, 0x7c, 0xbe, 0xaa, 0x53, 0x56, 0x0a, 0xa5, 0xe5,
	0x6a, 0xa3, 0xf6, 0x74, 0x28, 0xbf, 0xba, 0x10, 0xb8, 0x67, 0xa4, 0x9d, 0xb7, 0x62, 0x7e, 0x2c,
	0x6a, 0x2b, 0xbf, 0x08, 0xb0, 0xe6, 0xb3, 0x27, 0x68, 0x30, 0x57, 0x21, 0x49, 0x99, 0xce, 0xfa,
	0x94, 0x53, 0xe7, 0x7f, 0xdb, 0xf9, 0xa3, 0x9b, 0x4b, 0x83, 0xeb, 0x69, 0x81, 0xfe, 0x51, 0x69,
	0x2c, 0x3d, 0x8f, 0x34, 0xfe, 0x5c, 0x86, 0xf5, 0x7b, 0x36, 0x3d, 0xdd, 0x06, 0x27, 0x78, 0x1b,
	0x5c, 0x83, 0x33, 0xc1, 0xa9, 0x90, 0x66, 0x57, 0xf2, 0xcb, 0x5b, 0xe9, 0xed, 0xec, 0x0c, 0xf7,
	0x82, 0x71, 0x58, 0x14, 0x1f, 0x0f, 0xe5, 0x84, 0x16, 0xe9, 0x2b, 0x3f, 0xae, 0x40, 0xba, 0x31,
	0xb0, 0xdb, 0xa7, 0xab, 0x7f, 0x52, 0x57, 0xff, 0x06, 0x24, 0x5b, 0x7a, 0x7b, 0xbf, 0xef, 0x04,
	0x87, 0xa6, 0xcb, 0xea, 0xc4, 0x97, 0x89, 0x3a, 0xb1, 0xb6, 0x6a, 0x91, 0xab, 0x79, 0x75, 0xe0,
	0x34, 0x10, 0xb4, 0xc0, 0x50, 0xfa, 0x5e, 0x00, 0x18, 0x0b, 0xe7, 0xad, 0x8d, 0xf0, 0x5c, 0xd6,
	0x26, 0x0b, 0x29, 0xdd, 0x30, 0x5c, 0x4c, 0x29, 0x27, 0xc3, 0xaa, 0x16, 0x3e, 0x2a, 0xd7, 0x61,
	0xcd, 0xcf, 0x24, 0x68, 0xb6, 0x85, 0x58, 0xb3, 0x4d, 0x6f, 0x5f, 0x9c, 0x49, 0x3a, 0xde, 0x63,
	0x95, 0xfb, 0x90, 0x2d, 0x63, 0x76, 0xd7, 0xc5, 0x07, 0x7e, 0xff, 0xab, 0xd8, 0x1d, 0x12, 0x72,
	0xfe, 0x23, 0x58, 0x73, 0x5c, 0x7c, 0xd0, 0x3c, 0xc0, 0x2e, 0xed, 0x12, 0x9b, 0xbb, 0x14, 0x8b,
	0x57, 0x17, 0xe6, 0xc2, 0xfb, 0xbe, 0xbd, 0x96, 0xf6, 0xbc, 0x05, 0x0f, 0xca, 0x37, 0x29, 0xc8,
	0x44, 0x6b, 0x37, 0xc6, 0x9e, 0xe5, 0x89, 0xf0, 0x2f, 0xf3, 0xe4, 0x7a, 0x54, 0xb2, 0x25, 0x3e,
	0x9f, 0x5e, 0x89, 0x95, 0x6c, 0x4e, 0x88, 0xea, 0xd4, 0x98, 0xfa, 0x52, 0x80, 0x8d, 0xf1, 0x88,
	0xb2, 0x2c, 0x6a, 0x37, 0x49, 0xa7, 0x43, 0x31, 0xe3, 0xfb, 0x48, 0x2c, 0x56, 0x47, 0x43, 0x39,
	0x13, 0x4d, 0x97, 0x6a, 0xb5, 0x51, 0xab, 0x73, 0xf1, 0xc2, 0xb3, 0xca, 0x33, 0xd5, 0x32, 0x11,
	0x54, 0xd5, 0xa2, 0xb6, 0xef, 0x69, 0x2a, 0x04, 0x73, 0x22, 0x04, 0x71, 0x4e, 0x08, 0xe5, 0x67,
	0x0f, 0xa1, 0x1c, 0x0f, 0xa1, 0x3c, 0x0e, 0x61, 0x67, 0x26, 0x02, 0x0b, 0xdb, 0x26, 0xdb, 0x0b,
	0x4e, 0x1d, 0x17, 0x67, 0x22, 0xa8, 0x72, 0xf1, 0x94, 0x33, 0xff, 0x25, 0xfa, 0x02, 0xfe, 0xbf,
	0xd7, 0x35, 0xf7, 0x30, 0x65, 0xcd, 0xfb, 0xae, 0x27, 0xb4, 0x79, 0x5d, 0xb3, 0x49, 0xee, 0xcb,
	0xe3, 0x02, 0x7a, 0xd7, 0x97, 0x7f, 0xe0, 0x8b, 0xab, 0xcf, 0x32, 0xfb, 0x79, 0x3d, 0xd1, 0x5e,
	0xdc, 0x91, 0x45, 0x6d, 0xa4, 0x41, 0x2a, 0xe4, 0x7c, 0xea, 0x1f, 0x72, 0x3e, 0x74, 0xa4, 0x7c,
	0x27, 0x40, 0xd2, 0x27, 0x0e, 0x7a, 0x01, 0x96, 0xea, 0x3b, 0xe7, 0x12, 0xd2, 0xa5, 0x07, 0x0f,
	0xf3, 0x1b, 0xb1, 0xdd, 0xe7, 0x2b, 0xd4, 0x77, 0x90, 0x0a, 0xab, 0xb5, 0xfa, 0x6e, 0xf3, 0x76,
	0xfd, 0x5e, 0xed, 0xe6, 0x39, 0x41, 0x92, 0x1f, 0x3c, 0xcc, 0x6f, 0xce, 0xd1, 0xac, 0x11, 0x76,
	0x9b, 0xf4, 0x6d, 0x03, 0xbd, 0x01, 0x6b, 0x95, 0x5a, 0xa9, 0x5e, 0x6b, 0x54, 0x1a, 0xbb, 0xb7,
	0x6a, 0xbb, 0xe7, 0x96, 0xa4, 0xcb, 0x0f, 0x1e, 0xe6, 0xe5, 0x39, 0x26, 0x15, 0xbb, 0x4d, 0x6c,
	0xda, 0xa5, 0x0c, 0xdb, 0x4c, 0x12, 0xbf, 0xfa, 0x21, 0x97, 0xb8, 0x26, 0xfe, 0xf1, 0x48, 0x16,
	0x94, 0xdf, 0x05, 0xb8, 0x34, 0xa7, 0x15, 0x04, 0x8d, 0xe5, 0x3f, 0xeb, 0x7d, 0x25, 0x58, 0xf3,
	0x19, 0xd2, 0xec, 0xda, 0x1d, 0xe2, 0x6d, 0x52, 0x6f, 0x90, 0xe7, 0x8f, 0xdb, 0xa4, 0x5a, 0xba,
	0x1d, 0xfd, 0xa7, 0xdb, 0x3f, 0x8b, 0x00, 0x77, 0xa2, 0x9b, 0x2a, 0xa4, 0x41, 0x7a, 0xe2, 0x72,
	0x06, 0xc9, 0x31, 0x67, 0xb3, 0x97, 0x46, 0x52, 0xfe, 0x68, 0x05, 0xbf, 0x3c, 0x4a, 0x02, 0x7d,
	0x02, 0x99, 0x39, 0x9f, 0xd9, 0x28, 0xde, 0x4d, 0x8e, 0xbe, 0x96, 0x91, 0xb6, 0x8e, 0x57, 0x8c,
	0xb0, 0xee, 0xc2, 0xd9, 0xa9, 0xaf, 0x6d, 0x14, 0x9f, 0x6e, 0xf3, 0xbf, 0xc5, 0xa5, 0x0b, 0xaa,
	0x7f, 0xc1, 0xa6, 0x86, 0x17, 0x6c, 0xea, 0xad, 0x9e, 0xc3, 0x06, 0x4a, 0x02, 0xbd, 0x0d, 0xa2,
	0x77, 0x68, 0x47, 0xd9, 0xf8, 0xbc, 0x18, 0x1f, 0x7f, 0xa5, 0x4b, 0x73, 0x24, 0x51, 0x40, 0xef,
	0x40, 0xd2, 0x3f, 0x2c, 0x23, 0x29, 0xa6, 0x16, 0x3b, 0x41, 0x1f, 0x03, 0x3f, 0xb0, 0xdb, 0xd3,
	0xf0, 0xe3, 0x19, 0x3d, 0x0d, 0x3f, 0x31, 0xf3, 0x94, 0x04, 0x32, 0xe0, 0xfc, 0x0c, 0x73, 0xd1,
	0x4b, 0xd3, 0x8b, 0x36, 0x77, 0xc8, 0x49, 0x2f, 0x1f, 0xa7, 0x16, 0xa2, 0x14, 0xcb, 0x8f, 0x47,
	0x39, 0xe1, 0xc9, 0x28, 0x27, 0x7c, 0x7b, 0x98, 0x4b, 0x3c, 0x3a, 0xcc, 0x09, 0x4f, 0x0e, 0x73,
	0x89, 0xdf, 0x0e, 0x73, 0x89, 0x0f, 0xaf, 0xfc, 0x1d, 0xba, 0x47, 0x77, 0xa6, 0xad, 0x24, 0xff,
	0xff, 0xda, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x62, 0xb7, 0x11, 0x43, 0x48, 0x15, 0x00, 0x00,
}

func (this *LogStreamCommitInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogStreamCommitInfo)
	if !ok {
		that2, ok := that.(LogStreamCommitInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LogStreamID != that1.LogStreamID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.CommittedLLSNOffset != that1.CommittedLLSNOffset {
		return false
	}
	if this.CommittedGLSNOffset != that1.CommittedGLSNOffset {
		return false
	}
	if this.CommittedGLSNLength != that1.CommittedGLSNLength {
		return false
	}
	if this.HighestWrittenLLSN != that1.HighestWrittenLLSN {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagementClient interface {
	// GetMetadata returns metadata of StorageNode.
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)
	// AddLogStream adds a new LogStream to StorageNode.
	AddLogStreamReplica(ctx context.Context, in *AddLogStreamReplicaRequest, opts ...grpc.CallOption) (*AddLogStreamReplicaResponse, error)
	// RemoveLogStream removes a LogStream from StorageNode.
	RemoveLogStream(ctx context.Context, in *RemoveLogStreamRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Seal changes the status of LogStreamExecutor to LogStreamStatusSealing or
	// LogStreamStatusSealed.
	Seal(ctx context.Context, in *SealRequest, opts ...grpc.CallOption) (*SealResponse, error)
	// Unseal changes the status of LogStreamExecutor to LogStreamStatusRunning.
	Unseal(ctx context.Context, in *UnsealRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Sync starts mirroring between two StorageNodes.
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	GetPrevCommitInfo(ctx context.Context, in *GetPrevCommitInfoRequest, opts ...grpc.CallOption) (*GetPrevCommitInfoResponse, error)
}

type managementClient struct {
	cc *grpc.ClientConn
}

func NewManagementClient(cc *grpc.ClientConn) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
	out := new(GetMetadataResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Management/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddLogStreamReplica(ctx context.Context, in *AddLogStreamReplicaRequest, opts ...grpc.CallOption) (*AddLogStreamReplicaResponse, error) {
	out := new(AddLogStreamReplicaResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Management/AddLogStreamReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) RemoveLogStream(ctx context.Context, in *RemoveLogStreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Management/RemoveLogStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Seal(ctx context.Context, in *SealRequest, opts ...grpc.CallOption) (*SealResponse, error) {
	out := new(SealResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Management/Seal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Unseal(ctx context.Context, in *UnsealRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Management/Unseal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Management/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetPrevCommitInfo(ctx context.Context, in *GetPrevCommitInfoRequest, opts ...grpc.CallOption) (*GetPrevCommitInfoResponse, error) {
	out := new(GetPrevCommitInfoResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Management/GetPrevCommitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
type ManagementServer interface {
	// GetMetadata returns metadata of StorageNode.
	GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error)
	// AddLogStream adds a new LogStream to StorageNode.
	AddLogStreamReplica(context.Context, *AddLogStreamReplicaRequest) (*AddLogStreamReplicaResponse, error)
	// RemoveLogStream removes a LogStream from StorageNode.
	RemoveLogStream(context.Context, *RemoveLogStreamRequest) (*types.Empty, error)
	// Seal changes the status of LogStreamExecutor to LogStreamStatusSealing or
	// LogStreamStatusSealed.
	Seal(context.Context, *SealRequest) (*SealResponse, error)
	// Unseal changes the status of LogStreamExecutor to LogStreamStatusRunning.
	Unseal(context.Context, *UnsealRequest) (*types.Empty, error)
	// Sync starts mirroring between two StorageNodes.
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	GetPrevCommitInfo(context.Context, *GetPrevCommitInfoRequest) (*GetPrevCommitInfoResponse, error)
}

// UnimplementedManagementServer can be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (*UnimplementedManagementServer) GetMetadata(ctx context.Context, req *GetMetadataRequest) (*GetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (*UnimplementedManagementServer) AddLogStreamReplica(ctx context.Context, req *AddLogStreamReplicaRequest) (*AddLogStreamReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogStreamReplica not implemented")
}
func (*UnimplementedManagementServer) RemoveLogStream(ctx context.Context, req *RemoveLogStreamRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLogStream not implemented")
}
func (*UnimplementedManagementServer) Seal(ctx context.Context, req *SealRequest) (*SealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seal not implemented")
}
func (*UnimplementedManagementServer) Unseal(ctx context.Context, req *UnsealRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unseal not implemented")
}
func (*UnimplementedManagementServer) Sync(ctx context.Context, req *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedManagementServer) GetPrevCommitInfo(ctx context.Context, req *GetPrevCommitInfoRequest) (*GetPrevCommitInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrevCommitInfo not implemented")
}

func RegisterManagementServer(s *grpc.Server, srv ManagementServer) {
	s.RegisterService(&_Management_serviceDesc, srv)
}

func _Management_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Management/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddLogStreamReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLogStreamReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddLogStreamReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Management/AddLogStreamReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddLogStreamReplica(ctx, req.(*AddLogStreamReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_RemoveLogStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLogStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).RemoveLogStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Management/RemoveLogStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).RemoveLogStream(ctx, req.(*RemoveLogStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Seal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Seal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Management/Seal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Seal(ctx, req.(*SealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Unseal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Unseal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Management/Unseal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Unseal(ctx, req.(*UnsealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Management/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetPrevCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrevCommitInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetPrevCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Management/GetPrevCommitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetPrevCommitInfo(ctx, req.(*GetPrevCommitInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Management_serviceDesc = grpc.ServiceDesc{
	ServiceName: "varlog.snpb.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadata",
			Handler:    _Management_GetMetadata_Handler,
		},
		{
			MethodName: "AddLogStreamReplica",
			Handler:    _Management_AddLogStreamReplica_Handler,
		},
		{
			MethodName: "RemoveLogStream",
			Handler:    _Management_RemoveLogStream_Handler,
		},
		{
			MethodName: "Seal",
			Handler:    _Management_Seal_Handler,
		},
		{
			MethodName: "Unseal",
			Handler:    _Management_Unseal_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Management_Sync_Handler,
		},
		{
			MethodName: "GetPrevCommitInfo",
			Handler:    _Management_GetPrevCommitInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/snpb/management.proto",
}

func (m *GetMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StorageNodeMetadata != nil {
		{
			size, err := m.StorageNodeMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddLogStreamReplicaRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLogStreamReplicaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddLogStreamReplicaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Storage != nil {
		{
			size, err := m.Storage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LogStreamID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x20
	}
	if m.TopicID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x18
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddLogStreamReplicaResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLogStreamReplicaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddLogStreamReplicaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStream != nil {
		{
			size, err := m.LogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveLogStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveLogStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveLogStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x20
	}
	if m.TopicID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x18
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SealRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SealRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SealRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommittedGLSN != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.LastCommittedGLSN))
		i--
		dAtA[i] = 0x28
	}
	if m.LogStreamID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x20
	}
	if m.TopicID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x18
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SealResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommittedGLSN != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.LastCommittedGLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnsealRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsealRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsealRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Replicas) > 0 {
		for iNdEx := len(m.Replicas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Replicas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LogStreamID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x20
	}
	if m.TopicID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x18
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Backup != nil {
		{
			size, err := m.Backup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LogStreamID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x20
	}
	if m.TopicID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x18
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncRequest_BackupNode) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRequest_BackupNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRequest_BackupNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintManagement(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPrevCommitInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrevCommitInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPrevCommitInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrevVersion != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.PrevVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogStreamCommitInfo) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStreamCommitInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStreamCommitInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x38
	}
	if m.HighestWrittenLLSN != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.HighestWrittenLLSN))
		i--
		dAtA[i] = 0x30
	}
	if m.CommittedGLSNLength != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.CommittedGLSNLength))
		i--
		dAtA[i] = 0x28
	}
	if m.CommittedGLSNOffset != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.CommittedGLSNOffset))
		i--
		dAtA[i] = 0x20
	}
	if m.CommittedLLSNOffset != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.CommittedLLSNOffset))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.LogStreamID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPrevCommitInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrevCommitInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPrevCommitInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommitInfos) > 0 {
		for iNdEx := len(m.CommitInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommitInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintManagement(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintManagement(dAtA []byte, offset int, v uint64) int {
	offset -= sovManagement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetMetadataRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovManagement(uint64(m.ClusterID))
	}
	return n
}

func (m *GetMetadataResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageNodeMetadata != nil {
		l = m.StorageNodeMetadata.ProtoSize()
		n += 1 + l + sovManagement(uint64(l))
	}
	return n
}

func (m *AddLogStreamReplicaRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovManagement(uint64(m.ClusterID))
	}
	if m.StorageNodeID != 0 {
		n += 1 + sovManagement(uint64(m.StorageNodeID))
	}
	if m.TopicID != 0 {
		n += 1 + sovManagement(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovManagement(uint64(m.LogStreamID))
	}
	if m.Storage != nil {
		l = m.Storage.ProtoSize()
		n += 1 + l + sovManagement(uint64(l))
	}
	return n
}

func (m *AddLogStreamReplicaResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogStream != nil {
		l = m.LogStream.ProtoSize()
		n += 1 + l + sovManagement(uint64(l))
	}
	return n
}

func (m *RemoveLogStreamRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovManagement(uint64(m.ClusterID))
	}
	if m.StorageNodeID != 0 {
		n += 1 + sovManagement(uint64(m.StorageNodeID))
	}
	if m.TopicID != 0 {
		n += 1 + sovManagement(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovManagement(uint64(m.LogStreamID))
	}
	return n
}

func (m *SealRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovManagement(uint64(m.ClusterID))
	}
	if m.StorageNodeID != 0 {
		n += 1 + sovManagement(uint64(m.StorageNodeID))
	}
	if m.TopicID != 0 {
		n += 1 + sovManagement(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovManagement(uint64(m.LogStreamID))
	}
	if m.LastCommittedGLSN != 0 {
		n += 1 + sovManagement(uint64(m.LastCommittedGLSN))
	}
	return n
}

func (m *SealResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovManagement(uint64(m.Status))
	}
	if m.LastCommittedGLSN != 0 {
		n += 1 + sovManagement(uint64(m.LastCommittedGLSN))
	}
	return n
}

func (m *UnsealRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovManagement(uint64(m.ClusterID))
	}
	if m.StorageNodeID != 0 {
		n += 1 + sovManagement(uint64(m.StorageNodeID))
	}
	if m.TopicID != 0 {
		n += 1 + sovManagement(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovManagement(uint64(m.LogStreamID))
	}
	if len(m.Replicas) > 0 {
		for _, e := range m.Replicas {
			l = e.ProtoSize()
			n += 1 + l + sovManagement(uint64(l))
		}
	}
	return n
}

func (m *SyncRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovManagement(uint64(m.ClusterID))
	}
	if m.StorageNodeID != 0 {
		n += 1 + sovManagement(uint64(m.StorageNodeID))
	}
	if m.TopicID != 0 {
		n += 1 + sovManagement(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovManagement(uint64(m.LogStreamID))
	}
	if m.Backup != nil {
		l = m.Backup.ProtoSize()
		n += 1 + l + sovManagement(uint64(l))
	}
	return n
}

func (m *SyncRequest_BackupNode) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageNodeID != 0 {
		n += 1 + sovManagement(uint64(m.StorageNodeID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovManagement(uint64(l))
	}
	return n
}

func (m *SyncResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.ProtoSize()
		n += 1 + l + sovManagement(uint64(l))
	}
	return n
}

func (m *GetPrevCommitInfoRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrevVersion != 0 {
		n += 1 + sovManagement(uint64(m.PrevVersion))
	}
	return n
}

func (m *LogStreamCommitInfo) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogStreamID != 0 {
		n += 1 + sovManagement(uint64(m.LogStreamID))
	}
	if m.Status != 0 {
		n += 1 + sovManagement(uint64(m.Status))
	}
	if m.CommittedLLSNOffset != 0 {
		n += 1 + sovManagement(uint64(m.CommittedLLSNOffset))
	}
	if m.CommittedGLSNOffset != 0 {
		n += 1 + sovManagement(uint64(m.CommittedGLSNOffset))
	}
	if m.CommittedGLSNLength != 0 {
		n += 1 + sovManagement(uint64(m.CommittedGLSNLength))
	}
	if m.HighestWrittenLLSN != 0 {
		n += 1 + sovManagement(uint64(m.HighestWrittenLLSN))
	}
	if m.Version != 0 {
		n += 1 + sovManagement(uint64(m.Version))
	}
	return n
}

func (m *GetPrevCommitInfoResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageNodeID != 0 {
		n += 1 + sovManagement(uint64(m.StorageNodeID))
	}
	if len(m.CommitInfos) > 0 {
		for _, e := range m.CommitInfos {
			l = e.ProtoSize()
			n += 1 + l + sovManagement(uint64(l))
		}
	}
	return n
}

func sovManagement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozManagement(x uint64) (n int) {
	return sovManagement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_daumkakao_com_varlog_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageNodeMetadata == nil {
				m.StorageNodeMetadata = &varlogpb.StorageNodeMetadataDescriptor{}
			}
			if err := m.StorageNodeMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLogStreamReplicaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLogStreamReplicaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLogStreamReplicaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_daumkakao_com_varlog_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_daumkakao_com_varlog_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Storage == nil {
				m.Storage = &varlogpb.StorageDescriptor{}
			}
			if err := m.Storage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLogStreamReplicaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLogStreamReplicaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLogStreamReplicaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogStream == nil {
				m.LogStream = &varlogpb.LogStreamDescriptor{}
			}
			if err := m.LogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveLogStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveLogStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveLogStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_daumkakao_com_varlog_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_daumkakao_com_varlog_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SealRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SealRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SealRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_daumkakao_com_varlog_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_daumkakao_com_varlog_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommittedGLSN", wireType)
			}
			m.LastCommittedGLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommittedGLSN |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= varlogpb.LogStreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommittedGLSN", wireType)
			}
			m.LastCommittedGLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommittedGLSN |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsealRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsealRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsealRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_daumkakao_com_varlog_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_daumkakao_com_varlog_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, varlogpb.Replica{})
			if err := m.Replicas[len(m.Replicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_daumkakao_com_varlog_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_daumkakao_com_varlog_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Backup == nil {
				m.Backup = &SyncRequest_BackupNode{}
			}
			if err := m.Backup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRequest_BackupNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SyncStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrevCommitInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrevCommitInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrevCommitInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevVersion", wireType)
			}
			m.PrevVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevVersion |= github_daumkakao_com_varlog_varlog_pkg_types.Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStreamCommitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamCommitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamCommitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LogStreamCommitInfo_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedLLSNOffset", wireType)
			}
			m.CommittedLLSNOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedLLSNOffset |= github_daumkakao_com_varlog_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedGLSNOffset", wireType)
			}
			m.CommittedGLSNOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedGLSNOffset |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedGLSNLength", wireType)
			}
			m.CommittedGLSNLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedGLSNLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestWrittenLLSN", wireType)
			}
			m.HighestWrittenLLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestWrittenLLSN |= github_daumkakao_com_varlog_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= github_daumkakao_com_varlog_varlog_pkg_types.Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrevCommitInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrevCommitInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrevCommitInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitInfos = append(m.CommitInfos, &LogStreamCommitInfo{})
			if err := m.CommitInfos[len(m.CommitInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManagement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManagement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManagement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthManagement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupManagement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthManagement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthManagement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManagement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupManagement = fmt.Errorf("proto: unexpected end of group")
)
