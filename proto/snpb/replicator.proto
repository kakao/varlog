syntax = "proto3";

package varlog.snpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "varlogpb/metadata.proto";
import "snpb/replica.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/snpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// ReplicationRequest contains LLSN (Local Log Sequence Number) that indicates
// a log position in the local log stream of the primary storage node.
message ReplicationRequest {
    uint32 log_stream_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
    uint64 llsn = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
        (gogoproto.customname) = "LLSN"
    ];
    bytes payload = 3;
}

// ReplicationResponse indicates that a log entry at given LLSN is replicated.
message ReplicationResponse {
    uint32 storage_node_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
        (gogoproto.customname) = "StorageNodeID"
    ];
    uint32 log_stream_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
    uint64 llsn = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
        (gogoproto.customname) = "LLSN"
    ];
}

enum SyncState {
    option (gogoproto.goproto_enum_prefix) = false;
    option (gogoproto.goproto_enum_stringer) = false;
    option (gogoproto.enum_stringer) = true;

    ERROR = 0 [(gogoproto.enumvalue_customname) = "SyncStateError"];
    IN_PROGRESS = 1 [(gogoproto.enumvalue_customname) = "SyncStateInProgress"];
    COMPLETE = 2 [(gogoproto.enumvalue_customname) = "SyncStateComplete"];
}

message SyncPosition {
    option (gogoproto.equal) = true;
    uint64 llsn = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
        (gogoproto.customname) = "LLSN"
    ];
    uint64 glsn = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
        (gogoproto.customname) = "GLSN"
    ];
}

message SyncRange {
    uint64 first_llsn = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
        (gogoproto.customname) = "FirstLLSN"
    ];
    uint64 last_llsn = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
        (gogoproto.customname) = "LastLLSN"
    ];
}

message SyncStatus {
    SyncState state = 1;
    SyncPosition first = 2 [(gogoproto.nullable) = false];
    SyncPosition last = 3 [(gogoproto.nullable) = false];
    SyncPosition current = 4 [(gogoproto.nullable) = false];
}

message SyncPayload {
    option (gogoproto.onlyone) = true;
    varlogpb.CommitContext commit_context = 1;
    varlogpb.LogEntry log_entry = 2;
}

message SyncInitRequest {
    uint32 cluster_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.ClusterID",
        (gogoproto.customname) = "ClusterID"
    ];
    Replica source = 2 [(gogoproto.nullable) = false];
    Replica destination = 3 [(gogoproto.nullable) = false];
    SyncRange range = 4 [(gogoproto.nullable) = false];
}

message SyncInitResponse {
    SyncRange range = 1 [(gogoproto.nullable) = false];
}

message SyncReplicateRequest {
    uint32 cluster_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.ClusterID",
        (gogoproto.customname) = "ClusterID"
    ];
    Replica source = 2 [(gogoproto.nullable) = false];
    Replica destination = 3 [(gogoproto.nullable) = false];
    SyncPayload payload = 4 [(gogoproto.nullable) = false];
}

message SyncReplicateResponse {
    SyncStatus status = 1;
}

service Replicator {
    rpc Replicate(stream ReplicationRequest)
        returns (stream ReplicationResponse) {}
    rpc SyncInit(SyncInitRequest) returns (SyncInitResponse) {}
    rpc SyncReplicate(SyncReplicateRequest) returns (SyncReplicateResponse) {}
}
