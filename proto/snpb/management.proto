syntax = "proto3";

package varlog.snpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

import "varlogpb/metadata.proto";
import "snpb/metadata.proto";
import "snpb/replicator.proto";

option go_package = "github.com/kakao/varlog/proto/snpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

message GetMetadataRequest {
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
}

message GetMetadataResponse {
  StorageNodeMetadataDescriptor storage_node_metadata = 1;
}

message AddLogStreamReplicaRequest {
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  int32 storage_node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 4 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  string storage_node_path = 5;
}
message AddLogStreamReplicaResponse {
  LogStreamReplicaMetadataDescriptor log_stream_replica = 1
    [(gogoproto.nullable) = false];
}

message RemoveLogStreamRequest {
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  int32 storage_node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 4 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message SealRequest {
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  int32 storage_node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 4 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  uint64 last_committed_glsn = 5 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "LastCommittedGLSN"
  ];
}

message SealResponse {
  varlogpb.LogStreamStatus status = 1;
  uint64 last_committed_glsn = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "LastCommittedGLSN"
  ];
}

message UnsealRequest {
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  int32 storage_node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 4 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  repeated varlogpb.LogStreamReplica replicas = 5
    [(gogoproto.nullable) = false];
}

message SyncRequest {
  // FIXME: Use Replica instead of BackupNode
  message BackupNode {
    int32 storage_node_id = 1 [
      (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
      (gogoproto.customname) = "StorageNodeID"
    ];
    string address = 2;
  }
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  int32 storage_node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 4 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  BackupNode backup = 5 [(gogoproto.nullable) = true];
}

message SyncResponse {
  SyncStatus status = 1;
}

message TrimRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  uint64 last_glsn = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "LastGLSN"
  ];
}

message TrimResponse {
  map<int32, string> results = 1
    [(gogoproto.castkey) = "github.com/kakao/varlog/pkg/types.LogStreamID"];
}

// Management defines the public APIs for managing StorageNode.
service Management {
  // GetMetadata returns the metadata of the storage node. It produces a gRPC
  // Unavailable error if the storage node is shutting down.
  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse) {}
  // AddLogStreamReplica adds a new log stream replica to a storage node.
  //
  // It returns the following gRPC errors:
  // - Unavailable: The storage node is shutting down.
  // - ResourceExhausted: The number of log stream replicas in the storage node
  // reaches the upper limit.
  // - Canceled: The client canceled the request.
  // DeadlineExceeded: The client's timeout has expired.
  rpc AddLogStreamReplica(AddLogStreamReplicaRequest)
    returns (AddLogStreamReplicaResponse) {}
  // RemoveLogStream removes a log stream replica from the storage node.
  //
  // It returns the following gRPC errors:
  // - Unavailable: The storage node is shutting down.
  // - NotFound: The log stream replica does not exist.
  // - Canceled: The client canceled the request.
  // - DeadlineExceeded: The client's timeout has expired.
  //
  // TODO: It should be renamed to RemoveLogStreamReplica to represent its
  // purpose precisely.
  rpc RemoveLogStream(RemoveLogStreamRequest) returns (google.protobuf.Empty) {}
  // Seal changes the status of the log stream replica to LogStreamStatusSealing
  // or LogStreamStatusSealed.
  //
  // It returns the following gRPC errors:
  // - InvalidArgument: SealRequest has invalid fields; for instance, TopicID
  // is invalid.
  // - Unavailable: The storage node is shutting down.
  // - NotFound: The log stream replica does not exist.
  // - Canceled: The client canceled the request.
  // - DeadlineExceeded: The client's timeout has expired.
  rpc Seal(SealRequest) returns (SealResponse) {}
  // Unseal changes the status of the log stream replica to
  // LogStreamStatusRunning.
  //
  // It returns the following gRPC errors:
  // - InvalidArgument: UnsealRequest has invalid fields; for instance, TopicID
  // is invalid.
  // - Unavailable: The storage node is shutting down.
  // - NotFound: The log stream replica does not exist.
  // - Canceled: The client canceled the request.
  // - DeadlineExceeded: The client's timeout has expired.
  rpc Unseal(UnsealRequest) returns (google.protobuf.Empty) {}
  // Sync duplicates log entries from the source log stream replica to the
  // destination log stream replica.
  //
  // It returns the following gRPC errors:
  // - Unavailable: The storage node is shutting down.
  // - NotFound: The log stream replica does not exist.
  // - Canceled: The client canceled the request.
  // - DeadlineExceeded: The client's timeout has expired.
  rpc Sync(SyncRequest) returns (SyncResponse) {}
  // Trim removes prefix log entries from each log stream replica in the topic.
  rpc Trim(TrimRequest) returns (TrimResponse) {}
}
