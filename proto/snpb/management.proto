syntax = "proto3";

package varlog.snpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

import "varlogpb/metadata.proto";
import "snpb/replicator.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/snpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

message GetMetadataRequest {
  uint32 cluster_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
}

message GetMetadataResponse {
  varlogpb.StorageNodeMetadataDescriptor storage_node_metadata = 1;
}

message AddLogStreamReplicaRequest {
  uint32 cluster_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  int32 storage_node_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 4 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  varlogpb.StorageDescriptor storage = 5;
}
message AddLogStreamReplicaResponse {
  // TODO (jun): Use LogStreamMetadataDescriptor
  varlogpb.LogStreamDescriptor log_stream = 1;
}

message RemoveLogStreamRequest {
  uint32 cluster_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  int32 storage_node_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 4 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message SealRequest {
  uint32 cluster_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  int32 storage_node_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 4 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  uint64 last_committed_glsn = 5 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "LastCommittedGLSN"
  ];
}

message SealResponse {
  varlogpb.LogStreamStatus status = 1;
  uint64 last_committed_glsn = 2 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "LastCommittedGLSN"
  ];
}

message UnsealRequest {
  uint32 cluster_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  int32 storage_node_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 4 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  repeated varlogpb.Replica replicas = 5 [(gogoproto.nullable) = false];
}

message SyncRequest {
  // FIXME: Use Replica instead of BackupNode
  message BackupNode {
    int32 storage_node_id = 1 [
      (gogoproto.casttype) =
          "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
      (gogoproto.customname) = "StorageNodeID"
    ];
    string address = 2;
  }
  uint32 cluster_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  int32 storage_node_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 4 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  BackupNode backup = 5 [(gogoproto.nullable) = true];
}

message SyncResponse {
  SyncStatus status = 1;
}

message TrimRequest {
  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  uint64 last_glsn = 2 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "LastGLSN"
  ];
}

message TrimResponse {
  map<int32, string> results = 1
      [(gogoproto.castkey) =
           "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID"];
}

// Management defines the public APIs for managing StorageNode.
service Management {
  // GetMetadata returns metadata of StorageNode.
  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse) {}
  // AddLogStream adds a new LogStream to StorageNode.
  rpc AddLogStreamReplica(AddLogStreamReplicaRequest)
      returns (AddLogStreamReplicaResponse) {}
  // RemoveLogStream removes a LogStream from StorageNode.
  rpc RemoveLogStream(RemoveLogStreamRequest) returns (google.protobuf.Empty) {}
  // Seal changes the status of LogStreamExecutor to LogStreamStatusSealing or
  // LogStreamStatusSealed.
  rpc Seal(SealRequest) returns (SealResponse) {}
  // Unseal changes the status of LogStreamExecutor to LogStreamStatusRunning.
  rpc Unseal(UnsealRequest) returns (google.protobuf.Empty) {}
  // Sync starts mirroring between two StorageNodes.
  rpc Sync(SyncRequest) returns (SyncResponse) {}
  rpc Trim(TrimRequest) returns (TrimResponse) {}
}
