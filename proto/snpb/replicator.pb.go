// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/snpb/replicator.proto

package snpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"

	github_com_kakao_varlog_pkg_types "github.com/kakao/varlog/pkg/types"
	varlogpb "github.com/kakao/varlog/proto/varlogpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SyncState indicates the state of the synchronization process.
type SyncState int32

const (
	// SyncStateError means that the synchronization job fails.
	SyncStateError SyncState = 0
	// SyncStateInProgress means that the synchronization job is still in
	// progress.
	SyncStateInProgress SyncState = 1
	// SyncStateComplete means that the synchronization job is done successfully.
	SyncStateComplete SyncState = 2
	// SyncStateStart means that the synchronization job starts.
	SyncStateStart SyncState = 3
)

var SyncState_name = map[int32]string{
	0: "ERROR",
	1: "IN_PROGRESS",
	2: "COMPLETE",
	3: "START",
}

var SyncState_value = map[string]int32{
	"ERROR":       0,
	"IN_PROGRESS": 1,
	"COMPLETE":    2,
	"START":       3,
}

func (SyncState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{0}
}

type ReplicateRequest struct {
	TopicID     github_com_kakao_varlog_pkg_types.TopicID     `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3,casttype=github.com/kakao/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,2,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	LLSN        []github_com_kakao_varlog_pkg_types.LLSN      `protobuf:"varint,3,rep,packed,name=llsn,proto3,casttype=github.com/kakao/varlog/pkg/types.LLSN" json:"llsn,omitempty"`
	Data        [][]byte                                      `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *ReplicateRequest) Reset()         { *m = ReplicateRequest{} }
func (m *ReplicateRequest) String() string { return proto.CompactTextString(m) }
func (*ReplicateRequest) ProtoMessage()    {}
func (*ReplicateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{0}
}
func (m *ReplicateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicateRequest.Merge(m, src)
}
func (m *ReplicateRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReplicateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicateRequest proto.InternalMessageInfo

func (m *ReplicateRequest) GetTopicID() github_com_kakao_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *ReplicateRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *ReplicateRequest) GetLLSN() []github_com_kakao_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSN
	}
	return nil
}

func (m *ReplicateRequest) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ReplicateResponse struct {
}

func (m *ReplicateResponse) Reset()         { *m = ReplicateResponse{} }
func (m *ReplicateResponse) String() string { return proto.CompactTextString(m) }
func (*ReplicateResponse) ProtoMessage()    {}
func (*ReplicateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{1}
}
func (m *ReplicateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicateResponse.Merge(m, src)
}
func (m *ReplicateResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReplicateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicateResponse proto.InternalMessageInfo

type SyncPosition struct {
	LLSN github_com_kakao_varlog_pkg_types.LLSN `protobuf:"varint,1,opt,name=llsn,proto3,casttype=github.com/kakao/varlog/pkg/types.LLSN" json:"llsn,omitempty"`
	GLSN github_com_kakao_varlog_pkg_types.GLSN `protobuf:"varint,2,opt,name=glsn,proto3,casttype=github.com/kakao/varlog/pkg/types.GLSN" json:"glsn,omitempty"`
}

func (m *SyncPosition) Reset()         { *m = SyncPosition{} }
func (m *SyncPosition) String() string { return proto.CompactTextString(m) }
func (*SyncPosition) ProtoMessage()    {}
func (*SyncPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{2}
}
func (m *SyncPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncPosition.Merge(m, src)
}
func (m *SyncPosition) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncPosition.DiscardUnknown(m)
}

var xxx_messageInfo_SyncPosition proto.InternalMessageInfo

func (m *SyncPosition) GetLLSN() github_com_kakao_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSN
	}
	return 0
}

func (m *SyncPosition) GetGLSN() github_com_kakao_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSN
	}
	return 0
}

// SyncRange indicates a range of synchronization. In request, it represents the
// boundary of copiable log entries; conversely, in response, it means the
// border of necessary log entries.
type SyncRange struct {
	// FirstLLSN is the inclusive lower LLSN of SyncRange.
	FirstLLSN github_com_kakao_varlog_pkg_types.LLSN `protobuf:"varint,1,opt,name=first_llsn,json=firstLlsn,proto3,casttype=github.com/kakao/varlog/pkg/types.LLSN" json:"first_llsn,omitempty"`
	// LastLLSN is the inclusive upper LLSN of SyncRange.
	LastLLSN github_com_kakao_varlog_pkg_types.LLSN `protobuf:"varint,2,opt,name=last_llsn,json=lastLlsn,proto3,casttype=github.com/kakao/varlog/pkg/types.LLSN" json:"last_llsn,omitempty"`
}

func (m *SyncRange) Reset()         { *m = SyncRange{} }
func (m *SyncRange) String() string { return proto.CompactTextString(m) }
func (*SyncRange) ProtoMessage()    {}
func (*SyncRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{3}
}
func (m *SyncRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRange.Merge(m, src)
}
func (m *SyncRange) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncRange) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRange.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRange proto.InternalMessageInfo

func (m *SyncRange) GetFirstLLSN() github_com_kakao_varlog_pkg_types.LLSN {
	if m != nil {
		return m.FirstLLSN
	}
	return 0
}

func (m *SyncRange) GetLastLLSN() github_com_kakao_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LastLLSN
	}
	return 0
}

// SyncInitRequest represents a range of synchronization from source to
// destination. The field Range indicates the first and the last log sequence
// numbers the source can send to the destination. The field CommitContext
// indicates the last commit sent from the metadata repository to the source.
type SyncInitRequest struct {
	// ClusterID is the identifier of the cluster.
	ClusterID github_com_kakao_varlog_pkg_types.ClusterID `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.com/kakao/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	// Source is metadata for source log stream replica.
	Source varlogpb.LogStreamReplica `protobuf:"bytes,2,opt,name=source,proto3" json:"source"`
	// Destination is metadata for destination log stream replica.
	Destination varlogpb.LogStreamReplica `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination"`
	// Range is the boundaries of log entries that can be copied from source to
	// destination.
	Range SyncRange `protobuf:"bytes,4,opt,name=range,proto3" json:"range"`
	// LastCommittedLLSN is the LLSN to which the last log entry was committed in
	// the source replica.
	LastCommittedLLSN github_com_kakao_varlog_pkg_types.LLSN `protobuf:"varint,5,opt,name=last_committed_llsn,json=lastCommittedLlsn,proto3,casttype=github.com/kakao/varlog/pkg/types.LLSN" json:"last_committed_llsn,omitempty"`
}

func (m *SyncInitRequest) Reset()         { *m = SyncInitRequest{} }
func (m *SyncInitRequest) String() string { return proto.CompactTextString(m) }
func (*SyncInitRequest) ProtoMessage()    {}
func (*SyncInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{4}
}
func (m *SyncInitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncInitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncInitRequest.Merge(m, src)
}
func (m *SyncInitRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncInitRequest proto.InternalMessageInfo

func (m *SyncInitRequest) GetClusterID() github_com_kakao_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *SyncInitRequest) GetSource() varlogpb.LogStreamReplica {
	if m != nil {
		return m.Source
	}
	return varlogpb.LogStreamReplica{}
}

func (m *SyncInitRequest) GetDestination() varlogpb.LogStreamReplica {
	if m != nil {
		return m.Destination
	}
	return varlogpb.LogStreamReplica{}
}

func (m *SyncInitRequest) GetRange() SyncRange {
	if m != nil {
		return m.Range
	}
	return SyncRange{}
}

func (m *SyncInitRequest) GetLastCommittedLLSN() github_com_kakao_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LastCommittedLLSN
	}
	return 0
}

// SyncInitResponse represents a range of log entries necessary for the
// destination. If all fields of Range that are FirstLLSN and LastLLSN are
// InvalidLLSN, the destination does not need any log entry, but only the commit
// context.
type SyncInitResponse struct {
	Range SyncRange `protobuf:"bytes,1,opt,name=range,proto3" json:"range"`
}

func (m *SyncInitResponse) Reset()         { *m = SyncInitResponse{} }
func (m *SyncInitResponse) String() string { return proto.CompactTextString(m) }
func (*SyncInitResponse) ProtoMessage()    {}
func (*SyncInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{5}
}
func (m *SyncInitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncInitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncInitResponse.Merge(m, src)
}
func (m *SyncInitResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncInitResponse proto.InternalMessageInfo

func (m *SyncInitResponse) GetRange() SyncRange {
	if m != nil {
		return m.Range
	}
	return SyncRange{}
}

type SyncStatus struct {
	State   SyncState    `protobuf:"varint,1,opt,name=state,proto3,enum=varlog.snpb.SyncState" json:"state,omitempty"`
	First   SyncPosition `protobuf:"bytes,2,opt,name=first,proto3" json:"first"`
	Last    SyncPosition `protobuf:"bytes,3,opt,name=last,proto3" json:"last"`
	Current SyncPosition `protobuf:"bytes,4,opt,name=current,proto3" json:"current"`
}

func (m *SyncStatus) Reset()         { *m = SyncStatus{} }
func (m *SyncStatus) String() string { return proto.CompactTextString(m) }
func (*SyncStatus) ProtoMessage()    {}
func (*SyncStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{6}
}
func (m *SyncStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncStatus.Merge(m, src)
}
func (m *SyncStatus) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SyncStatus proto.InternalMessageInfo

func (m *SyncStatus) GetState() SyncState {
	if m != nil {
		return m.State
	}
	return SyncStateError
}

func (m *SyncStatus) GetFirst() SyncPosition {
	if m != nil {
		return m.First
	}
	return SyncPosition{}
}

func (m *SyncStatus) GetLast() SyncPosition {
	if m != nil {
		return m.Last
	}
	return SyncPosition{}
}

func (m *SyncStatus) GetCurrent() SyncPosition {
	if m != nil {
		return m.Current
	}
	return SyncPosition{}
}

type SyncPayload struct {
	CommitContext *varlogpb.CommitContext `protobuf:"bytes,1,opt,name=commit_context,json=commitContext,proto3" json:"commit_context,omitempty"`
	LogEntry      *varlogpb.LogEntry      `protobuf:"bytes,2,opt,name=log_entry,json=logEntry,proto3" json:"log_entry,omitempty"`
}

func (m *SyncPayload) Reset()         { *m = SyncPayload{} }
func (m *SyncPayload) String() string { return proto.CompactTextString(m) }
func (*SyncPayload) ProtoMessage()    {}
func (*SyncPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{7}
}
func (m *SyncPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncPayload.Merge(m, src)
}
func (m *SyncPayload) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SyncPayload proto.InternalMessageInfo

func (m *SyncPayload) GetCommitContext() *varlogpb.CommitContext {
	if m != nil {
		return m.CommitContext
	}
	return nil
}

func (m *SyncPayload) GetLogEntry() *varlogpb.LogEntry {
	if m != nil {
		return m.LogEntry
	}
	return nil
}

type SyncReplicateRequest struct {
	ClusterID   github_com_kakao_varlog_pkg_types.ClusterID `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.com/kakao/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	Source      varlogpb.LogStreamReplica                   `protobuf:"bytes,2,opt,name=source,proto3" json:"source"`
	Destination varlogpb.LogStreamReplica                   `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination"`
	Payload     SyncPayload                                 `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload"`
}

func (m *SyncReplicateRequest) Reset()         { *m = SyncReplicateRequest{} }
func (m *SyncReplicateRequest) String() string { return proto.CompactTextString(m) }
func (*SyncReplicateRequest) ProtoMessage()    {}
func (*SyncReplicateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{8}
}
func (m *SyncReplicateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncReplicateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncReplicateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncReplicateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncReplicateRequest.Merge(m, src)
}
func (m *SyncReplicateRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncReplicateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncReplicateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncReplicateRequest proto.InternalMessageInfo

func (m *SyncReplicateRequest) GetClusterID() github_com_kakao_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *SyncReplicateRequest) GetSource() varlogpb.LogStreamReplica {
	if m != nil {
		return m.Source
	}
	return varlogpb.LogStreamReplica{}
}

func (m *SyncReplicateRequest) GetDestination() varlogpb.LogStreamReplica {
	if m != nil {
		return m.Destination
	}
	return varlogpb.LogStreamReplica{}
}

func (m *SyncReplicateRequest) GetPayload() SyncPayload {
	if m != nil {
		return m.Payload
	}
	return SyncPayload{}
}

type SyncReplicateResponse struct {
	Status *SyncStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *SyncReplicateResponse) Reset()         { *m = SyncReplicateResponse{} }
func (m *SyncReplicateResponse) String() string { return proto.CompactTextString(m) }
func (*SyncReplicateResponse) ProtoMessage()    {}
func (*SyncReplicateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{9}
}
func (m *SyncReplicateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncReplicateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncReplicateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncReplicateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncReplicateResponse.Merge(m, src)
}
func (m *SyncReplicateResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncReplicateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncReplicateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncReplicateResponse proto.InternalMessageInfo

func (m *SyncReplicateResponse) GetStatus() *SyncStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterEnum("varlog.snpb.SyncState", SyncState_name, SyncState_value)
	proto.RegisterType((*ReplicateRequest)(nil), "varlog.snpb.ReplicateRequest")
	proto.RegisterType((*ReplicateResponse)(nil), "varlog.snpb.ReplicateResponse")
	proto.RegisterType((*SyncPosition)(nil), "varlog.snpb.SyncPosition")
	proto.RegisterType((*SyncRange)(nil), "varlog.snpb.SyncRange")
	proto.RegisterType((*SyncInitRequest)(nil), "varlog.snpb.SyncInitRequest")
	proto.RegisterType((*SyncInitResponse)(nil), "varlog.snpb.SyncInitResponse")
	proto.RegisterType((*SyncStatus)(nil), "varlog.snpb.SyncStatus")
	proto.RegisterType((*SyncPayload)(nil), "varlog.snpb.SyncPayload")
	proto.RegisterType((*SyncReplicateRequest)(nil), "varlog.snpb.SyncReplicateRequest")
	proto.RegisterType((*SyncReplicateResponse)(nil), "varlog.snpb.SyncReplicateResponse")
}

func init() { proto.RegisterFile("proto/snpb/replicator.proto", fileDescriptor_85705cb817486b63) }

var fileDescriptor_85705cb817486b63 = []byte{
	// 1000 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x13, 0xa7, 0x4d, 0x5e, 0xda, 0x92, 0x4e, 0x59, 0x1a, 0x02, 0xb5, 0xb3, 0x46, 0x42,
	0xe1, 0xc7, 0xc6, 0x52, 0x57, 0x2c, 0xcb, 0x6a, 0xa5, 0x85, 0x96, 0xb4, 0x44, 0x0a, 0x6d, 0x35,
	0xae, 0x10, 0x82, 0x43, 0x71, 0x9d, 0x59, 0x63, 0xd5, 0xf1, 0x18, 0x7b, 0x82, 0xe8, 0x7f, 0x80,
	0x7a, 0x42, 0xdc, 0x2b, 0x56, 0xa2, 0x42, 0x70, 0xe3, 0x08, 0xff, 0x41, 0x8f, 0x7b, 0xe4, 0x14,
	0x89, 0xf4, 0xc2, 0xdf, 0xb0, 0x27, 0x34, 0xe3, 0xb1, 0x93, 0xa6, 0x5b, 0xda, 0x0a, 0x6e, 0xdc,
	0xec, 0x79, 0xdf, 0xfb, 0xe6, 0xcd, 0xfb, 0xbe, 0x37, 0x36, 0xbc, 0x12, 0x46, 0x94, 0x51, 0x33,
	0x0e, 0xc2, 0x7d, 0x33, 0x22, 0xa1, 0xef, 0x39, 0x36, 0xa3, 0x51, 0x4b, 0xac, 0xa2, 0xca, 0xd7,
	0x76, 0xe4, 0x53, 0xb7, 0xc5, 0xa3, 0x75, 0xdd, 0xa5, 0xd4, 0xf5, 0x89, 0x29, 0x42, 0xfb, 0x83,
	0xc7, 0x26, 0xf3, 0xfa, 0x24, 0x66, 0x76, 0x3f, 0x4c, 0xd0, 0xf5, 0x3b, 0xae, 0xc7, 0xbe, 0x1c,
	0xec, 0xb7, 0x1c, 0xda, 0x37, 0x5d, 0xea, 0xd2, 0x31, 0x92, 0xbf, 0x25, 0xfb, 0xf0, 0x27, 0x09,
	0x5f, 0x4e, 0xc8, 0xc3, 0x7d, 0xb3, 0x4f, 0x98, 0xdd, 0xb3, 0x99, 0x9d, 0x04, 0x8c, 0x5f, 0xf2,
	0x50, 0xc5, 0xb2, 0x14, 0x82, 0xc9, 0x57, 0x03, 0x12, 0x33, 0x64, 0x41, 0x89, 0xd1, 0xd0, 0x73,
	0xf6, 0xbc, 0x5e, 0x4d, 0x69, 0x28, 0xcd, 0xe2, 0xda, 0xfd, 0xd1, 0x50, 0x9f, 0xdd, 0xe5, 0x6b,
	0x9d, 0x0f, 0x9f, 0x0d, 0xf5, 0x37, 0x26, 0x76, 0x3f, 0xb0, 0x0f, 0x6c, 0x6a, 0x26, 0xfc, 0x66,
	0x78, 0xe0, 0x9a, 0xec, 0x30, 0x24, 0x71, 0x4b, 0x82, 0xf1, 0xac, 0x60, 0xea, 0xf4, 0x50, 0x0f,
	0xe6, 0x7d, 0xea, 0xee, 0xc5, 0x2c, 0x22, 0x76, 0x9f, 0x33, 0xe7, 0x05, 0xf3, 0xfb, 0xa3, 0xa1,
	0x5e, 0xe9, 0x52, 0xd7, 0x12, 0xeb, 0x82, 0xfd, 0xce, 0xd5, 0xec, 0x13, 0x09, 0xb8, 0xe2, 0x67,
	0x2f, 0x3d, 0xb4, 0x01, 0xaa, 0xef, 0xc7, 0x41, 0xad, 0xd0, 0x28, 0x34, 0xd5, 0xb5, 0xd5, 0xd1,
	0x50, 0x57, 0xbb, 0x5d, 0x6b, 0xeb, 0xd9, 0x50, 0x7f, 0xfd, 0x1a, 0xac, 0x5d, 0x6b, 0x0b, 0x8b,
	0x7c, 0x84, 0x40, 0xe5, 0x5d, 0xaa, 0xa9, 0x8d, 0x42, 0x73, 0x0e, 0x8b, 0x67, 0x63, 0x09, 0x16,
	0x27, 0x5a, 0x15, 0x87, 0x34, 0x88, 0x89, 0x71, 0xa2, 0xc0, 0x9c, 0x75, 0x18, 0x38, 0x3b, 0x34,
	0xf6, 0x98, 0x47, 0x83, 0xac, 0x02, 0xde, 0xb8, 0x7f, 0x53, 0xc1, 0x06, 0xa8, 0x2e, 0xe7, 0xc9,
	0x8f, 0x79, 0x36, 0xaf, 0xcd, 0xb3, 0x29, 0x78, 0x78, 0xfe, 0x03, 0xf5, 0xaf, 0x27, 0xba, 0x62,
	0xfc, 0xa6, 0x40, 0x99, 0x97, 0x89, 0xed, 0xc0, 0x25, 0xe8, 0x13, 0x80, 0xc7, 0x5e, 0x14, 0xb3,
	0xbd, 0x89, 0x4a, 0xdf, 0x1d, 0x0d, 0xf5, 0xf2, 0x06, 0x5f, 0xbd, 0x61, 0xb9, 0x65, 0x41, 0xd5,
	0xe5, 0x35, 0x5b, 0x50, 0xf6, 0xed, 0x94, 0x36, 0x29, 0xfc, 0xde, 0x68, 0xa8, 0x97, 0xba, 0xf6,
	0x8d, 0x59, 0x4b, 0x9c, 0x88, 0x93, 0x1a, 0x3f, 0x14, 0xe0, 0x05, 0x5e, 0x7a, 0x27, 0xf0, 0x58,
	0xea, 0xd0, 0xcf, 0x01, 0x1c, 0x7f, 0x10, 0x33, 0x12, 0x8d, 0x3d, 0xfa, 0x90, 0x1f, 0x60, 0x3d,
	0x59, 0x15, 0x3e, 0x7a, 0xeb, 0xea, 0xad, 0x32, 0x38, 0x2e, 0x4b, 0xbe, 0x4e, 0x0f, 0x3d, 0x82,
	0x99, 0x98, 0x0e, 0x22, 0x87, 0x88, 0x23, 0x54, 0x56, 0x6f, 0xb7, 0xe4, 0x68, 0xa6, 0x43, 0x34,
	0xb6, 0x9f, 0xf4, 0xc3, 0x9a, 0x7a, 0x3a, 0xd4, 0x73, 0x58, 0xa6, 0xa1, 0x0e, 0x54, 0x7a, 0x24,
	0x66, 0x5e, 0x60, 0x73, 0x47, 0xd4, 0x0a, 0x37, 0x63, 0x99, 0xcc, 0x45, 0xab, 0x50, 0x8c, 0xb8,
	0x64, 0x35, 0x55, 0x90, 0xbc, 0xd4, 0x9a, 0xb8, 0x25, 0x5a, 0x99, 0xa0, 0x32, 0x33, 0x81, 0x22,
	0x0a, 0x4b, 0x42, 0x05, 0x87, 0xf6, 0xfb, 0x1e, 0x63, 0xa4, 0x97, 0xe8, 0x51, 0x14, 0x7a, 0x3c,
	0x1a, 0x0d, 0xf5, 0x45, 0xae, 0xc7, 0x7a, 0x1a, 0xbd, 0xa1, 0x30, 0x8b, 0xfe, 0xb9, 0x64, 0xae,
	0xd0, 0x06, 0x54, 0xc7, 0x02, 0x25, 0x73, 0x31, 0x2e, 0x5c, 0xb9, 0x76, 0xe1, 0xc6, 0x9f, 0x0a,
	0x00, 0x0f, 0x59, 0xcc, 0x66, 0x83, 0x18, 0xbd, 0x0d, 0xc5, 0x98, 0xd9, 0x2c, 0xa1, 0x58, 0x78,
	0x0e, 0x05, 0xc7, 0x11, 0x9c, 0x80, 0xd0, 0x3b, 0x50, 0x14, 0x46, 0x94, 0xa2, 0xbd, 0x7c, 0x01,
	0x9d, 0x4e, 0x68, 0xba, 0xa7, 0x40, 0xa3, 0xbb, 0xa0, 0xf2, 0x03, 0x49, 0x91, 0xae, 0xcc, 0x12,
	0x60, 0xf4, 0x1e, 0xcc, 0x3a, 0x83, 0x28, 0x22, 0x01, 0x93, 0xba, 0x5c, 0x99, 0x97, 0xe2, 0x8d,
	0xef, 0x15, 0xa8, 0x88, 0xb8, 0x7d, 0xe8, 0x53, 0xbb, 0x87, 0xda, 0xb0, 0x90, 0xe8, 0xb4, 0xe7,
	0xd0, 0x80, 0x91, 0x6f, 0x98, 0x6c, 0x98, 0x76, 0xc1, 0x2e, 0x49, 0xcf, 0xd7, 0x13, 0x14, 0x9e,
	0x77, 0x26, 0x5f, 0xd1, 0x3d, 0x28, 0xf3, 0xdb, 0x95, 0x04, 0x2c, 0x3a, 0x9c, 0xee, 0xc0, 0xa4,
	0xe1, 0xda, 0x1c, 0x80, 0x4b, 0xbe, 0x7c, 0x7a, 0xa0, 0x9e, 0xf2, 0xdb, 0xe1, 0xf7, 0x3c, 0xbc,
	0x28, 0x34, 0x99, 0xfe, 0x12, 0xfc, 0x6f, 0xe6, 0xec, 0x3e, 0xcc, 0x86, 0x89, 0x22, 0x52, 0xd1,
	0xda, 0x45, 0x45, 0x93, 0x78, 0x2a, 0xa8, 0x84, 0x1b, 0x1f, 0xc1, 0xad, 0xa9, 0xd6, 0xc9, 0x09,
	0x30, 0x61, 0x26, 0x16, 0x46, 0x96, 0x8a, 0x2e, 0x3f, 0xd7, 0xbf, 0x83, 0x18, 0x4b, 0xd8, 0x9b,
	0x3f, 0xc9, 0x3b, 0x5a, 0xd8, 0x1a, 0xad, 0x40, 0xb1, 0x8d, 0xf1, 0x36, 0xae, 0xe6, 0xea, 0xe8,
	0xe8, 0xb8, 0xb1, 0x90, 0x45, 0xda, 0x51, 0x44, 0x23, 0xd4, 0x84, 0x4a, 0x67, 0x6b, 0x6f, 0x07,
	0x6f, 0x6f, 0xe2, 0xb6, 0x65, 0x55, 0x95, 0xfa, 0xf2, 0xd1, 0x71, 0x63, 0x29, 0x03, 0x75, 0x82,
	0x9d, 0x88, 0xba, 0x11, 0x89, 0x63, 0xf4, 0x1a, 0x94, 0xd6, 0xb7, 0x3f, 0xde, 0xe9, 0xb6, 0x77,
	0xdb, 0xd5, 0x7c, 0xfd, 0xd6, 0xd1, 0x71, 0x63, 0x31, 0x83, 0xad, 0xd3, 0x7e, 0xe8, 0x93, 0x64,
	0x37, 0x6b, 0xf7, 0x03, 0xbc, 0x5b, 0x2d, 0x4c, 0xed, 0x66, 0x31, 0x3b, 0x62, 0xf5, 0xb9, 0x6f,
	0x7f, 0xd4, 0x72, 0x3f, 0x9f, 0x68, 0xb9, 0x5f, 0x4f, 0x34, 0x65, 0xf5, 0x2c, 0x0f, 0x80, 0xb3,
	0xff, 0x17, 0xb4, 0x05, 0xe5, 0xec, 0xf4, 0x68, 0xe5, 0xdc, 0x29, 0xa7, 0x0d, 0x55, 0xd7, 0x2e,
	0x0b, 0xcb, 0xcf, 0x69, 0xae, 0xa9, 0xa0, 0x0e, 0x94, 0xd2, 0xeb, 0x04, 0xbd, 0x7a, 0xa1, 0x69,
	0x13, 0x9f, 0x81, 0xfa, 0xca, 0x25, 0xd1, 0x94, 0x0c, 0x7d, 0x0a, 0xf3, 0xe7, 0xc4, 0x41, 0xb7,
	0x2f, 0xde, 0x43, 0xd3, 0x25, 0x1a, 0xff, 0x04, 0xc9, 0x98, 0xbf, 0x80, 0xa5, 0x73, 0xa1, 0xc4,
	0x61, 0xff, 0x19, 0x7f, 0x53, 0x59, 0x7b, 0x78, 0x3a, 0xd2, 0x94, 0xa7, 0x23, 0x4d, 0xf9, 0xee,
	0x4c, 0xcb, 0x3d, 0x39, 0xd3, 0x94, 0xa7, 0x67, 0x5a, 0xee, 0x8f, 0x33, 0x2d, 0xf7, 0x99, 0x71,
	0xe9, 0xc0, 0x65, 0xff, 0x97, 0xfb, 0x33, 0xe2, 0xf9, 0xee, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xc7, 0x56, 0x67, 0x23, 0x74, 0x0a, 0x00, 0x00,
}

func (x SyncState) String() string {
	s, ok := SyncState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SyncPosition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncPosition)
	if !ok {
		that2, ok := that.(SyncPosition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LLSN != that1.LLSN {
		return false
	}
	if this.GLSN != that1.GLSN {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReplicatorClient is the client API for Replicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicatorClient interface {
	Replicate(ctx context.Context, opts ...grpc.CallOption) (Replicator_ReplicateClient, error)
	// SyncInit tells the source replica's log entries range to the destination
	// replica. According to the range sent by the request of SyncInit, the
	// destination replica can decide whether it is necessary to copy log entries
	// from the source and even delete stale ones.
	//
	// To be a source replica, the status of the log stream replica must be
	// SEALED, which indicates that the log stream replica has all the log entries
	// that the metadata repository has committed. To be a destination replica,
	// the status of the log stream replica must be SEALING which means that the
	// log stream replica does not have all log entries yet.
	//
	// To represent log entry ranges, each request and response of SyncInit embeds
	// a field of type SyncRange. The source replica sends a range of overall log
	// entries to the destination replica; that is, the FirstLLSN of SyncRange is
	// the local low watermark, and the LastLLSN of it is the local high
	// watermark. There are several cases in the destination replica:
	//
	// - The destination replica already has log entries and the commit context,
	// which are the same as the source replica: No synchronization is necessary.
	// The destination replica should reply with a SyncInitResponse having the
	// FirstLLSN and the LastLLSN as InvalidLLSNs.
	// - The destination replica's local high watermark is equal to the LastLLSN.
	// However, it does not have the corresponding commit context that contains
	// the last log entry: It means that only copying the commit context from the
	// source to the destination is necessary. The destination should reply with a
	// SyncInitResponse having a larger FirstLLSN than the LastLLSN.
	// - The destination replica's local high watermark is lower than the LastLLSN
	// of SyncInitRequest: Some log entries should be cloned from the source to
	// the destination. The destination replica should reply with a
	// SyncInitResponse denoting the missing range.
	//
	// A destination replica sometimes should remove log entries according to the
	// SyncRange in the request, usually when the source replica has trimmed the
	// log entries.
	//
	// When a source replica has no log entries due to Trim, the source replica
	// can invoke SyncInit with InvalidLLSNs for FirstLLSN and LastLLSN of
	// SyncRange. Destination replica should remove their stale log entries and
	// receive a commit context from the source replica.
	//
	// TODO: Use the gRPC error code instead of setting particular values for the
	// SyncRange to avoid ambiguity.
	SyncInit(ctx context.Context, in *SyncInitRequest, opts ...grpc.CallOption) (*SyncInitResponse, error)
	// SyncReplicate
	//
	// Deprecated: Use SyncReplicateStream
	SyncReplicate(ctx context.Context, in *SyncReplicateRequest, opts ...grpc.CallOption) (*SyncReplicateResponse, error)
	// SyncReplicateStream copies log entries between replicas in a log stream.
	SyncReplicateStream(ctx context.Context, opts ...grpc.CallOption) (Replicator_SyncReplicateStreamClient, error)
}

type replicatorClient struct {
	cc *grpc.ClientConn
}

func NewReplicatorClient(cc *grpc.ClientConn) ReplicatorClient {
	return &replicatorClient{cc}
}

func (c *replicatorClient) Replicate(ctx context.Context, opts ...grpc.CallOption) (Replicator_ReplicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Replicator_serviceDesc.Streams[0], "/varlog.snpb.Replicator/Replicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicatorReplicateClient{stream}
	return x, nil
}

type Replicator_ReplicateClient interface {
	Send(*ReplicateRequest) error
	CloseAndRecv() (*ReplicateResponse, error)
	grpc.ClientStream
}

type replicatorReplicateClient struct {
	grpc.ClientStream
}

func (x *replicatorReplicateClient) Send(m *ReplicateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicatorReplicateClient) CloseAndRecv() (*ReplicateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplicateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicatorClient) SyncInit(ctx context.Context, in *SyncInitRequest, opts ...grpc.CallOption) (*SyncInitResponse, error) {
	out := new(SyncInitResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Replicator/SyncInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) SyncReplicate(ctx context.Context, in *SyncReplicateRequest, opts ...grpc.CallOption) (*SyncReplicateResponse, error) {
	out := new(SyncReplicateResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Replicator/SyncReplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) SyncReplicateStream(ctx context.Context, opts ...grpc.CallOption) (Replicator_SyncReplicateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Replicator_serviceDesc.Streams[1], "/varlog.snpb.Replicator/SyncReplicateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicatorSyncReplicateStreamClient{stream}
	return x, nil
}

type Replicator_SyncReplicateStreamClient interface {
	Send(*SyncReplicateRequest) error
	CloseAndRecv() (*SyncReplicateResponse, error)
	grpc.ClientStream
}

type replicatorSyncReplicateStreamClient struct {
	grpc.ClientStream
}

func (x *replicatorSyncReplicateStreamClient) Send(m *SyncReplicateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicatorSyncReplicateStreamClient) CloseAndRecv() (*SyncReplicateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SyncReplicateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplicatorServer is the server API for Replicator service.
type ReplicatorServer interface {
	Replicate(Replicator_ReplicateServer) error
	// SyncInit tells the source replica's log entries range to the destination
	// replica. According to the range sent by the request of SyncInit, the
	// destination replica can decide whether it is necessary to copy log entries
	// from the source and even delete stale ones.
	//
	// To be a source replica, the status of the log stream replica must be
	// SEALED, which indicates that the log stream replica has all the log entries
	// that the metadata repository has committed. To be a destination replica,
	// the status of the log stream replica must be SEALING which means that the
	// log stream replica does not have all log entries yet.
	//
	// To represent log entry ranges, each request and response of SyncInit embeds
	// a field of type SyncRange. The source replica sends a range of overall log
	// entries to the destination replica; that is, the FirstLLSN of SyncRange is
	// the local low watermark, and the LastLLSN of it is the local high
	// watermark. There are several cases in the destination replica:
	//
	// - The destination replica already has log entries and the commit context,
	// which are the same as the source replica: No synchronization is necessary.
	// The destination replica should reply with a SyncInitResponse having the
	// FirstLLSN and the LastLLSN as InvalidLLSNs.
	// - The destination replica's local high watermark is equal to the LastLLSN.
	// However, it does not have the corresponding commit context that contains
	// the last log entry: It means that only copying the commit context from the
	// source to the destination is necessary. The destination should reply with a
	// SyncInitResponse having a larger FirstLLSN than the LastLLSN.
	// - The destination replica's local high watermark is lower than the LastLLSN
	// of SyncInitRequest: Some log entries should be cloned from the source to
	// the destination. The destination replica should reply with a
	// SyncInitResponse denoting the missing range.
	//
	// A destination replica sometimes should remove log entries according to the
	// SyncRange in the request, usually when the source replica has trimmed the
	// log entries.
	//
	// When a source replica has no log entries due to Trim, the source replica
	// can invoke SyncInit with InvalidLLSNs for FirstLLSN and LastLLSN of
	// SyncRange. Destination replica should remove their stale log entries and
	// receive a commit context from the source replica.
	//
	// TODO: Use the gRPC error code instead of setting particular values for the
	// SyncRange to avoid ambiguity.
	SyncInit(context.Context, *SyncInitRequest) (*SyncInitResponse, error)
	// SyncReplicate
	//
	// Deprecated: Use SyncReplicateStream
	SyncReplicate(context.Context, *SyncReplicateRequest) (*SyncReplicateResponse, error)
	// SyncReplicateStream copies log entries between replicas in a log stream.
	SyncReplicateStream(Replicator_SyncReplicateStreamServer) error
}

// UnimplementedReplicatorServer can be embedded to have forward compatible implementations.
type UnimplementedReplicatorServer struct {
}

func (*UnimplementedReplicatorServer) Replicate(srv Replicator_ReplicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (*UnimplementedReplicatorServer) SyncInit(ctx context.Context, req *SyncInitRequest) (*SyncInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncInit not implemented")
}
func (*UnimplementedReplicatorServer) SyncReplicate(ctx context.Context, req *SyncReplicateRequest) (*SyncReplicateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncReplicate not implemented")
}
func (*UnimplementedReplicatorServer) SyncReplicateStream(srv Replicator_SyncReplicateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncReplicateStream not implemented")
}

func RegisterReplicatorServer(s *grpc.Server, srv ReplicatorServer) {
	s.RegisterService(&_Replicator_serviceDesc, srv)
}

func _Replicator_Replicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicatorServer).Replicate(&replicatorReplicateServer{stream})
}

type Replicator_ReplicateServer interface {
	SendAndClose(*ReplicateResponse) error
	Recv() (*ReplicateRequest, error)
	grpc.ServerStream
}

type replicatorReplicateServer struct {
	grpc.ServerStream
}

func (x *replicatorReplicateServer) SendAndClose(m *ReplicateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicatorReplicateServer) Recv() (*ReplicateRequest, error) {
	m := new(ReplicateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Replicator_SyncInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).SyncInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Replicator/SyncInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).SyncInit(ctx, req.(*SyncInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_SyncReplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).SyncReplicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Replicator/SyncReplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).SyncReplicate(ctx, req.(*SyncReplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_SyncReplicateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicatorServer).SyncReplicateStream(&replicatorSyncReplicateStreamServer{stream})
}

type Replicator_SyncReplicateStreamServer interface {
	SendAndClose(*SyncReplicateResponse) error
	Recv() (*SyncReplicateRequest, error)
	grpc.ServerStream
}

type replicatorSyncReplicateStreamServer struct {
	grpc.ServerStream
}

func (x *replicatorSyncReplicateStreamServer) SendAndClose(m *SyncReplicateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicatorSyncReplicateStreamServer) Recv() (*SyncReplicateRequest, error) {
	m := new(SyncReplicateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Replicator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "varlog.snpb.Replicator",
	HandlerType: (*ReplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncInit",
			Handler:    _Replicator_SyncInit_Handler,
		},
		{
			MethodName: "SyncReplicate",
			Handler:    _Replicator_SyncReplicate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Replicate",
			Handler:       _Replicator_Replicate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncReplicateStream",
			Handler:       _Replicator_SyncReplicateStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/snpb/replicator.proto",
}

func (m *ReplicateRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintReplicator(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LLSN) > 0 {
		dAtA2 := make([]byte, len(m.LLSN)*10)
		var j1 int
		for _, num := range m.LLSN {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintReplicator(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.LogStreamID != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicateResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SyncPosition) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.GLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.LLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.LLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncRange) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastLLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.LastLLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.FirstLLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.FirstLLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncInitRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncInitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncInitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommittedLLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.LastCommittedLLSN))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ClusterID != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncInitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncInitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SyncStatus) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Current.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Last.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.First.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.State != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncPayload) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogEntry != nil {
		{
			size, err := m.LogEntry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplicator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CommitContext != nil {
		{
			size, err := m.CommitContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplicator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncReplicateRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncReplicateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncReplicateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ClusterID != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncReplicateResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncReplicateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncReplicateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplicator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReplicator(dAtA []byte, offset int, v uint64) int {
	offset -= sovReplicator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReplicateRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovReplicator(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovReplicator(uint64(m.LogStreamID))
	}
	if len(m.LLSN) > 0 {
		l = 0
		for _, e := range m.LLSN {
			l += sovReplicator(uint64(e))
		}
		n += 1 + sovReplicator(uint64(l)) + l
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovReplicator(uint64(l))
		}
	}
	return n
}

func (m *ReplicateResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SyncPosition) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LLSN != 0 {
		n += 1 + sovReplicator(uint64(m.LLSN))
	}
	if m.GLSN != 0 {
		n += 1 + sovReplicator(uint64(m.GLSN))
	}
	return n
}

func (m *SyncRange) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FirstLLSN != 0 {
		n += 1 + sovReplicator(uint64(m.FirstLLSN))
	}
	if m.LastLLSN != 0 {
		n += 1 + sovReplicator(uint64(m.LastLLSN))
	}
	return n
}

func (m *SyncInitRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovReplicator(uint64(m.ClusterID))
	}
	l = m.Source.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Destination.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Range.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	if m.LastCommittedLLSN != 0 {
		n += 1 + sovReplicator(uint64(m.LastCommittedLLSN))
	}
	return n
}

func (m *SyncInitResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Range.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	return n
}

func (m *SyncStatus) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovReplicator(uint64(m.State))
	}
	l = m.First.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Last.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Current.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	return n
}

func (m *SyncPayload) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitContext != nil {
		l = m.CommitContext.ProtoSize()
		n += 1 + l + sovReplicator(uint64(l))
	}
	if m.LogEntry != nil {
		l = m.LogEntry.ProtoSize()
		n += 1 + l + sovReplicator(uint64(l))
	}
	return n
}

func (m *SyncReplicateRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovReplicator(uint64(m.ClusterID))
	}
	l = m.Source.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Destination.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Payload.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	return n
}

func (m *SyncReplicateResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.ProtoSize()
		n += 1 + l + sovReplicator(uint64(l))
	}
	return n
}

func sovReplicator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReplicator(x uint64) (n int) {
	return sovReplicator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SyncPayload) GetValue() interface{} {
	if this.CommitContext != nil {
		return this.CommitContext
	}
	if this.LogEntry != nil {
		return this.LogEntry
	}
	return nil
}

func (this *SyncPayload) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *varlogpb.CommitContext:
		this.CommitContext = vt
	case *varlogpb.LogEntry:
		this.LogEntry = vt
	default:
		return false
	}
	return true
}
func (m *ReplicateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_com_kakao_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v github_com_kakao_varlog_pkg_types.LLSN
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReplicator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_kakao_varlog_pkg_types.LLSN(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LLSN = append(m.LLSN, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReplicator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReplicator
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReplicator
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LLSN) == 0 {
					m.LLSN = make([]github_com_kakao_varlog_pkg_types.LLSN, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_kakao_varlog_pkg_types.LLSN
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReplicator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_kakao_varlog_pkg_types.LLSN(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LLSN = append(m.LLSN, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSN", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSN", wireType)
			}
			m.LLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LLSN |= github_com_kakao_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSN", wireType)
			}
			m.GLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSN |= github_com_kakao_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLLSN", wireType)
			}
			m.FirstLLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstLLSN |= github_com_kakao_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLLSN", wireType)
			}
			m.LastLLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLLSN |= github_com_kakao_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncInitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncInitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncInitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_com_kakao_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommittedLLSN", wireType)
			}
			m.LastCommittedLLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommittedLLSN |= github_com_kakao_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= SyncState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.First.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Last.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Current.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommitContext == nil {
				m.CommitContext = &varlogpb.CommitContext{}
			}
			if err := m.CommitContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogEntry == nil {
				m.LogEntry = &varlogpb.LogEntry{}
			}
			if err := m.LogEntry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncReplicateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncReplicateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncReplicateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_com_kakao_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncReplicateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncReplicateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncReplicateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SyncStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplicator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReplicator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReplicator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReplicator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReplicator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplicator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReplicator = fmt.Errorf("proto: unexpected end of group")
)
