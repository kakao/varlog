// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/snpb/replicator.proto

package snpb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	github_daumkakao_com_varlog_varlog_pkg_types "github.daumkakao.com/varlog/varlog/pkg/types"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SyncState int32

const (
	SyncStateError      SyncState = 0
	SyncStateInProgress SyncState = 1
	SyncStateComplete   SyncState = 2
)

var SyncState_name = map[int32]string{
	0: "ERROR",
	1: "IN_PROGRESS",
	2: "COMPLETE",
}

var SyncState_value = map[string]int32{
	"ERROR":       0,
	"IN_PROGRESS": 1,
	"COMPLETE":    2,
}

func (SyncState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{0}
}

// ReplicationRequest contains LLSN (Local Log Sequence Number) that indicates
// a log position in the local log stream of the primary storage node.
type ReplicationRequest struct {
	LogStreamID          github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID `protobuf:"varint,1,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	LLSN                 github_daumkakao_com_varlog_varlog_pkg_types.LLSN        `protobuf:"varint,2,opt,name=llsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LLSN" json:"llsn,omitempty"`
	Payload              []byte                                                   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *ReplicationRequest) Reset()         { *m = ReplicationRequest{} }
func (m *ReplicationRequest) String() string { return proto.CompactTextString(m) }
func (*ReplicationRequest) ProtoMessage()    {}
func (*ReplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{0}
}
func (m *ReplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationRequest.Merge(m, src)
}
func (m *ReplicationRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationRequest proto.InternalMessageInfo

func (m *ReplicationRequest) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *ReplicationRequest) GetLLSN() github_daumkakao_com_varlog_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSN
	}
	return 0
}

func (m *ReplicationRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// ReplicationResponse indicates that a log entry at given LLSN is replicated.
type ReplicationResponse struct {
	StorageNodeID        github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,1,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	LogStreamID          github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID   `protobuf:"varint,2,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	LLSN                 github_daumkakao_com_varlog_varlog_pkg_types.LLSN          `protobuf:"varint,3,opt,name=llsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LLSN" json:"llsn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *ReplicationResponse) Reset()         { *m = ReplicationResponse{} }
func (m *ReplicationResponse) String() string { return proto.CompactTextString(m) }
func (*ReplicationResponse) ProtoMessage()    {}
func (*ReplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{1}
}
func (m *ReplicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationResponse.Merge(m, src)
}
func (m *ReplicationResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationResponse proto.InternalMessageInfo

func (m *ReplicationResponse) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

func (m *ReplicationResponse) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *ReplicationResponse) GetLLSN() github_daumkakao_com_varlog_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSN
	}
	return 0
}

type SyncPosition struct {
	LLSN                 github_daumkakao_com_varlog_varlog_pkg_types.LLSN `protobuf:"varint,1,opt,name=llsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LLSN" json:"llsn,omitempty"`
	GLSN                 github_daumkakao_com_varlog_varlog_pkg_types.GLSN `protobuf:"varint,2,opt,name=glsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"glsn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *SyncPosition) Reset()         { *m = SyncPosition{} }
func (m *SyncPosition) String() string { return proto.CompactTextString(m) }
func (*SyncPosition) ProtoMessage()    {}
func (*SyncPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{2}
}
func (m *SyncPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncPosition.Merge(m, src)
}
func (m *SyncPosition) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncPosition.DiscardUnknown(m)
}

var xxx_messageInfo_SyncPosition proto.InternalMessageInfo

func (m *SyncPosition) GetLLSN() github_daumkakao_com_varlog_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSN
	}
	return 0
}

func (m *SyncPosition) GetGLSN() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSN
	}
	return 0
}

type SyncRange struct {
	FirstLLSN            github_daumkakao_com_varlog_varlog_pkg_types.LLSN `protobuf:"varint,1,opt,name=first_llsn,json=firstLlsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LLSN" json:"first_llsn,omitempty"`
	LastLLSN             github_daumkakao_com_varlog_varlog_pkg_types.LLSN `protobuf:"varint,2,opt,name=last_llsn,json=lastLlsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LLSN" json:"last_llsn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *SyncRange) Reset()         { *m = SyncRange{} }
func (m *SyncRange) String() string { return proto.CompactTextString(m) }
func (*SyncRange) ProtoMessage()    {}
func (*SyncRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{3}
}
func (m *SyncRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRange.Merge(m, src)
}
func (m *SyncRange) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncRange) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRange.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRange proto.InternalMessageInfo

func (m *SyncRange) GetFirstLLSN() github_daumkakao_com_varlog_varlog_pkg_types.LLSN {
	if m != nil {
		return m.FirstLLSN
	}
	return 0
}

func (m *SyncRange) GetLastLLSN() github_daumkakao_com_varlog_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LastLLSN
	}
	return 0
}

type SyncStatus struct {
	State                SyncState    `protobuf:"varint,1,opt,name=state,proto3,enum=varlog.snpb.SyncState" json:"state,omitempty"`
	First                SyncPosition `protobuf:"bytes,2,opt,name=first,proto3" json:"first"`
	Last                 SyncPosition `protobuf:"bytes,3,opt,name=last,proto3" json:"last"`
	Current              SyncPosition `protobuf:"bytes,4,opt,name=current,proto3" json:"current"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SyncStatus) Reset()         { *m = SyncStatus{} }
func (m *SyncStatus) String() string { return proto.CompactTextString(m) }
func (*SyncStatus) ProtoMessage()    {}
func (*SyncStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{4}
}
func (m *SyncStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncStatus.Merge(m, src)
}
func (m *SyncStatus) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SyncStatus proto.InternalMessageInfo

func (m *SyncStatus) GetState() SyncState {
	if m != nil {
		return m.State
	}
	return SyncStateError
}

func (m *SyncStatus) GetFirst() SyncPosition {
	if m != nil {
		return m.First
	}
	return SyncPosition{}
}

func (m *SyncStatus) GetLast() SyncPosition {
	if m != nil {
		return m.Last
	}
	return SyncPosition{}
}

func (m *SyncStatus) GetCurrent() SyncPosition {
	if m != nil {
		return m.Current
	}
	return SyncPosition{}
}

type SyncPayload struct {
	CommitContext        *varlogpb.CommitContext `protobuf:"bytes,1,opt,name=commit_context,json=commitContext,proto3" json:"commit_context,omitempty"`
	LogEntry             *varlogpb.LogEntry      `protobuf:"bytes,2,opt,name=log_entry,json=logEntry,proto3" json:"log_entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SyncPayload) Reset()         { *m = SyncPayload{} }
func (m *SyncPayload) String() string { return proto.CompactTextString(m) }
func (*SyncPayload) ProtoMessage()    {}
func (*SyncPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{5}
}
func (m *SyncPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncPayload.Merge(m, src)
}
func (m *SyncPayload) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SyncPayload proto.InternalMessageInfo

func (m *SyncPayload) GetCommitContext() *varlogpb.CommitContext {
	if m != nil {
		return m.CommitContext
	}
	return nil
}

func (m *SyncPayload) GetLogEntry() *varlogpb.LogEntry {
	if m != nil {
		return m.LogEntry
	}
	return nil
}

type SyncInitRequest struct {
	ClusterID            github_daumkakao_com_varlog_varlog_pkg_types.ClusterID `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	Source               Replica                                                `protobuf:"bytes,2,opt,name=source,proto3" json:"source"`
	Destination          Replica                                                `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination"`
	Range                SyncRange                                              `protobuf:"bytes,4,opt,name=range,proto3" json:"range"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *SyncInitRequest) Reset()         { *m = SyncInitRequest{} }
func (m *SyncInitRequest) String() string { return proto.CompactTextString(m) }
func (*SyncInitRequest) ProtoMessage()    {}
func (*SyncInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{6}
}
func (m *SyncInitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncInitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncInitRequest.Merge(m, src)
}
func (m *SyncInitRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncInitRequest proto.InternalMessageInfo

func (m *SyncInitRequest) GetClusterID() github_daumkakao_com_varlog_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *SyncInitRequest) GetSource() Replica {
	if m != nil {
		return m.Source
	}
	return Replica{}
}

func (m *SyncInitRequest) GetDestination() Replica {
	if m != nil {
		return m.Destination
	}
	return Replica{}
}

func (m *SyncInitRequest) GetRange() SyncRange {
	if m != nil {
		return m.Range
	}
	return SyncRange{}
}

type SyncInitResponse struct {
	Range                SyncRange `protobuf:"bytes,1,opt,name=range,proto3" json:"range"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SyncInitResponse) Reset()         { *m = SyncInitResponse{} }
func (m *SyncInitResponse) String() string { return proto.CompactTextString(m) }
func (*SyncInitResponse) ProtoMessage()    {}
func (*SyncInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{7}
}
func (m *SyncInitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncInitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncInitResponse.Merge(m, src)
}
func (m *SyncInitResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncInitResponse proto.InternalMessageInfo

func (m *SyncInitResponse) GetRange() SyncRange {
	if m != nil {
		return m.Range
	}
	return SyncRange{}
}

type SyncReplicateRequest struct {
	ClusterID            github_daumkakao_com_varlog_varlog_pkg_types.ClusterID `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	Source               Replica                                                `protobuf:"bytes,2,opt,name=source,proto3" json:"source"`
	Destination          Replica                                                `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination"`
	Payload              SyncPayload                                            `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *SyncReplicateRequest) Reset()         { *m = SyncReplicateRequest{} }
func (m *SyncReplicateRequest) String() string { return proto.CompactTextString(m) }
func (*SyncReplicateRequest) ProtoMessage()    {}
func (*SyncReplicateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{8}
}
func (m *SyncReplicateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncReplicateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncReplicateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncReplicateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncReplicateRequest.Merge(m, src)
}
func (m *SyncReplicateRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncReplicateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncReplicateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncReplicateRequest proto.InternalMessageInfo

func (m *SyncReplicateRequest) GetClusterID() github_daumkakao_com_varlog_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *SyncReplicateRequest) GetSource() Replica {
	if m != nil {
		return m.Source
	}
	return Replica{}
}

func (m *SyncReplicateRequest) GetDestination() Replica {
	if m != nil {
		return m.Destination
	}
	return Replica{}
}

func (m *SyncReplicateRequest) GetPayload() SyncPayload {
	if m != nil {
		return m.Payload
	}
	return SyncPayload{}
}

type SyncReplicateResponse struct {
	Status               *SyncStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SyncReplicateResponse) Reset()         { *m = SyncReplicateResponse{} }
func (m *SyncReplicateResponse) String() string { return proto.CompactTextString(m) }
func (*SyncReplicateResponse) ProtoMessage()    {}
func (*SyncReplicateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85705cb817486b63, []int{9}
}
func (m *SyncReplicateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncReplicateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncReplicateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncReplicateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncReplicateResponse.Merge(m, src)
}
func (m *SyncReplicateResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncReplicateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncReplicateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncReplicateResponse proto.InternalMessageInfo

func (m *SyncReplicateResponse) GetStatus() *SyncStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterEnum("varlog.snpb.SyncState", SyncState_name, SyncState_value)
	proto.RegisterType((*ReplicationRequest)(nil), "varlog.snpb.ReplicationRequest")
	proto.RegisterType((*ReplicationResponse)(nil), "varlog.snpb.ReplicationResponse")
	proto.RegisterType((*SyncPosition)(nil), "varlog.snpb.SyncPosition")
	proto.RegisterType((*SyncRange)(nil), "varlog.snpb.SyncRange")
	proto.RegisterType((*SyncStatus)(nil), "varlog.snpb.SyncStatus")
	proto.RegisterType((*SyncPayload)(nil), "varlog.snpb.SyncPayload")
	proto.RegisterType((*SyncInitRequest)(nil), "varlog.snpb.SyncInitRequest")
	proto.RegisterType((*SyncInitResponse)(nil), "varlog.snpb.SyncInitResponse")
	proto.RegisterType((*SyncReplicateRequest)(nil), "varlog.snpb.SyncReplicateRequest")
	proto.RegisterType((*SyncReplicateResponse)(nil), "varlog.snpb.SyncReplicateResponse")
}

func init() { proto.RegisterFile("proto/snpb/replicator.proto", fileDescriptor_85705cb817486b63) }

var fileDescriptor_85705cb817486b63 = []byte{
	// 949 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xb8, 0x4e, 0x6a, 0x3f, 0xc7, 0x69, 0x98, 0xb6, 0xc4, 0x18, 0xea, 0x35, 0xe6, 0x62,
	0x21, 0x6a, 0x83, 0x2b, 0xaa, 0x12, 0xe0, 0x80, 0x8d, 0x1b, 0x2c, 0x4c, 0x92, 0x8e, 0x7b, 0x40,
	0x1c, 0xb0, 0xc6, 0xde, 0xc9, 0xb2, 0xca, 0x7a, 0x67, 0x99, 0x99, 0x05, 0xf2, 0x09, 0x8a, 0x72,
	0xe4, 0x1e, 0x51, 0x89, 0x1e, 0x10, 0x27, 0xce, 0x7c, 0x82, 0x9c, 0x10, 0xe2, 0x03, 0x58, 0xc2,
	0x5c, 0x38, 0x73, 0xec, 0x09, 0xed, 0xec, 0x9f, 0x6c, 0xe2, 0xb6, 0x4a, 0x4a, 0xc4, 0x81, 0x93,
	0x77, 0xe6, 0xfd, 0xde, 0x6f, 0xde, 0xfb, 0xcd, 0x7b, 0xcf, 0x03, 0x2f, 0x7b, 0x82, 0x2b, 0xde,
	0x92, 0xae, 0x37, 0x6e, 0x09, 0xe6, 0x39, 0xf6, 0x84, 0x2a, 0x2e, 0x9a, 0x7a, 0x17, 0x17, 0xbf,
	0xa2, 0xc2, 0xe1, 0x56, 0x33, 0xb0, 0x56, 0x6e, 0x5a, 0xb6, 0xfa, 0xc2, 0x1f, 0x37, 0x27, 0x7c,
	0xda, 0xb2, 0xb8, 0xc5, 0x5b, 0x1a, 0x33, 0xf6, 0x77, 0xf5, 0x2a, 0xa4, 0x09, 0xbe, 0x42, 0xdf,
	0xca, 0x7a, 0xe8, 0xeb, 0x8d, 0x5b, 0x53, 0xa6, 0xa8, 0x49, 0x15, 0x8d, 0x0c, 0x38, 0x7d, 0x56,
	0xb8, 0x57, 0xff, 0x1b, 0x01, 0x26, 0xd1, 0xe9, 0x36, 0x77, 0x09, 0xfb, 0xd2, 0x67, 0x52, 0x61,
	0x0e, 0x25, 0x87, 0x5b, 0x23, 0xa9, 0x04, 0xa3, 0xd3, 0x91, 0x6d, 0x96, 0x51, 0x0d, 0x35, 0x4a,
	0x9d, 0x8f, 0xe7, 0x33, 0xa3, 0x38, 0xe0, 0xd6, 0x50, 0xef, 0xf7, 0x3f, 0x7c, 0x3c, 0x33, 0xee,
	0x44, 0xc1, 0x99, 0xd4, 0x9f, 0xee, 0xd1, 0x3d, 0xca, 0x75, 0x98, 0x61, 0x08, 0xf1, 0x8f, 0xb7,
	0x67, 0xb5, 0xd4, 0xbe, 0xc7, 0x64, 0x33, 0xe5, 0x4b, 0x8a, 0x4e, 0xb2, 0x30, 0xf1, 0x3d, 0xc8,
	0x39, 0x8e, 0x74, 0xcb, 0xd9, 0x1a, 0x6a, 0xe4, 0x3a, 0xef, 0xcf, 0x67, 0x46, 0x6e, 0x30, 0x18,
	0x6e, 0x3d, 0x9e, 0x19, 0x6f, 0x9d, 0xef, 0x80, 0xc1, 0x70, 0x8b, 0x68, 0x2a, 0x5c, 0x86, 0xcb,
	0x1e, 0xdd, 0x77, 0x38, 0x35, 0xcb, 0x97, 0x6a, 0xa8, 0xb1, 0x42, 0xe2, 0x65, 0xfd, 0xf7, 0x2c,
	0x5c, 0x3d, 0x91, 0xb4, 0xf4, 0xb8, 0x2b, 0x19, 0xfe, 0x1a, 0xae, 0x48, 0xc5, 0x05, 0xb5, 0xd8,
	0xc8, 0xe5, 0x26, 0x3b, 0xce, 0x7b, 0x7b, 0x3e, 0x33, 0x4a, 0xc3, 0xd0, 0xb4, 0xc5, 0x4d, 0xa6,
	0x33, 0xdf, 0x38, 0x57, 0x60, 0x27, 0xbc, 0x49, 0x49, 0xa6, 0x96, 0xe6, 0xa2, 0xdc, 0xd9, 0xff,
	0x48, 0xee, 0x4b, 0x17, 0x26, 0x77, 0xfd, 0x17, 0x04, 0x2b, 0xc3, 0x7d, 0x77, 0xb2, 0xc3, 0xa5,
	0x1d, 0xa8, 0x9a, 0x9c, 0x81, 0x2e, 0xee, 0x4a, 0xef, 0x41, 0xce, 0x3a, 0x55, 0x25, 0x9b, 0xcf,
	0x43, 0xb9, 0xa9, 0x29, 0x03, 0xaa, 0x8d, 0xdc, 0x5f, 0x0f, 0x0d, 0x54, 0xff, 0x15, 0x41, 0x21,
	0x08, 0x9e, 0x50, 0xd7, 0x62, 0x98, 0x02, 0xec, 0xda, 0x42, 0xaa, 0x51, 0x2a, 0xfe, 0xce, 0x7c,
	0x66, 0x14, 0xee, 0x06, 0xbb, 0xcf, 0x9f, 0x44, 0x41, 0xb3, 0x0e, 0x82, 0x4c, 0x3e, 0x87, 0x82,
	0x43, 0xe3, 0x13, 0xc2, 0x74, 0x3e, 0x98, 0xcf, 0x8c, 0xfc, 0x80, 0xfe, 0x9b, 0x03, 0xf2, 0x01,
	0x67, 0xc0, 0x5f, 0xff, 0x03, 0x01, 0x04, 0x09, 0x0d, 0x15, 0x55, 0xbe, 0xc4, 0x6f, 0xc0, 0x92,
	0x54, 0x54, 0x31, 0x9d, 0xcc, 0x6a, 0xfb, 0xc5, 0x66, 0x6a, 0xbe, 0x34, 0x63, 0x1c, 0x23, 0x21,
	0x08, 0xbf, 0x0d, 0x4b, 0x3a, 0x52, 0x1d, 0x58, 0xb1, 0xfd, 0xd2, 0x02, 0x3a, 0xbe, 0xe3, 0x4e,
	0xee, 0x68, 0x66, 0x64, 0x48, 0x88, 0xc6, 0xb7, 0x20, 0x17, 0x9c, 0xaf, 0x8b, 0xea, 0x0c, 0x5e,
	0x1a, 0x8c, 0xdf, 0x81, 0xcb, 0x13, 0x5f, 0x08, 0xe6, 0xaa, 0x72, 0xee, 0x6c, 0x7e, 0x31, 0xbe,
	0xfe, 0x1d, 0x82, 0xa2, 0xb6, 0x87, 0x6d, 0x8d, 0x7b, 0xb0, 0x3a, 0xe1, 0xd3, 0xa9, 0xad, 0x46,
	0x13, 0xee, 0x2a, 0xf6, 0x8d, 0xd2, 0xd9, 0x16, 0xdb, 0xd5, 0x98, 0x31, 0x1e, 0x8c, 0xcd, 0xae,
	0x86, 0x75, 0x43, 0x14, 0x29, 0x4d, 0xd2, 0x4b, 0x7c, 0x1b, 0x0a, 0x41, 0x33, 0x32, 0x57, 0x89,
	0xfd, 0xd3, 0x0a, 0x24, 0x0c, 0x03, 0x6e, 0xf5, 0x02, 0x00, 0xc9, 0x3b, 0xd1, 0xd7, 0x46, 0xee,
	0x28, 0xa8, 0xa4, 0xef, 0xb3, 0x70, 0x25, 0x08, 0xaa, 0xef, 0xda, 0x2a, 0x9e, 0xa6, 0xbb, 0x00,
	0x13, 0xc7, 0x97, 0x8a, 0x89, 0xe3, 0x91, 0xb2, 0x19, 0xd4, 0x53, 0x37, 0xdc, 0xd5, 0x9d, 0x7d,
	0xfb, 0x5c, 0xd7, 0x9d, 0x78, 0x92, 0x42, 0x44, 0xdd, 0x37, 0x71, 0x1b, 0x96, 0x25, 0xf7, 0xc5,
	0x84, 0x45, 0x61, 0x5f, 0x3b, 0x21, 0x65, 0x34, 0xf1, 0x22, 0x15, 0x23, 0x24, 0x7e, 0x0f, 0x8a,
	0x26, 0x93, 0xca, 0x76, 0xf5, 0x28, 0x8c, 0xee, 0xee, 0x59, 0x8e, 0x69, 0x38, 0x6e, 0xc3, 0x92,
	0x08, 0x5a, 0x26, 0xba, 0xbb, 0xc5, 0xba, 0xd2, 0x0d, 0x15, 0x97, 0x89, 0x86, 0xd6, 0xef, 0xc2,
	0xda, 0xb1, 0x40, 0xd1, 0xe4, 0x4d, 0x78, 0xd0, 0xd9, 0x79, 0x7e, 0xca, 0xc2, 0x35, 0x6d, 0x8a,
	0x26, 0x39, 0xfb, 0xff, 0xcb, 0x7d, 0xe7, 0xf8, 0x2f, 0x2d, 0x14, 0xbc, 0xbc, 0xd8, 0x2c, 0xa1,
	0x3d, 0xee, 0x95, 0xf8, 0x2f, 0xef, 0x23, 0xb8, 0x7e, 0x4a, 0xab, 0x48, 0xf9, 0x16, 0x2c, 0x4b,
	0x3d, 0x23, 0x22, 0xe9, 0xd7, 0x9f, 0x38, 0x1a, 0x7c, 0x49, 0x22, 0xd8, 0xeb, 0x0f, 0xa2, 0x51,
	0xa9, 0x27, 0x06, 0xbe, 0x01, 0x4b, 0x3d, 0x42, 0xb6, 0xc9, 0x5a, 0xa6, 0x82, 0x0f, 0x0e, 0x6b,
	0xab, 0x89, 0xa5, 0x27, 0x04, 0x17, 0xb8, 0x01, 0xc5, 0xfe, 0xd6, 0x68, 0x87, 0x6c, 0x6f, 0x92,
	0xde, 0x70, 0xb8, 0x86, 0x2a, 0xeb, 0x07, 0x87, 0xb5, 0xab, 0x09, 0xa8, 0xef, 0xee, 0x08, 0x6e,
	0x09, 0x26, 0x25, 0x7e, 0x0d, 0xf2, 0xdd, 0xed, 0x4f, 0x76, 0x06, 0xbd, 0xfb, 0xbd, 0xb5, 0x6c,
	0xe5, 0xfa, 0xc1, 0x61, 0xed, 0x85, 0x04, 0xd6, 0xe5, 0x53, 0xcf, 0x61, 0x8a, 0x55, 0x56, 0xbe,
	0xfd, 0xa1, 0x9a, 0xf9, 0xf1, 0x51, 0x35, 0xf3, 0xf3, 0xa3, 0x2a, 0x6a, 0x3f, 0xc8, 0x02, 0x90,
	0xe4, 0xe5, 0x84, 0xef, 0x43, 0x21, 0x49, 0x0f, 0x1b, 0x4f, 0x92, 0x34, 0xf5, 0xc2, 0xa9, 0xd4,
	0x9e, 0x0e, 0x08, 0x95, 0xa9, 0x67, 0x1a, 0xe8, 0x4d, 0x84, 0xfb, 0x90, 0x8f, 0xab, 0x15, 0xbf,
	0xb2, 0xa0, 0x4d, 0xaa, 0xcb, 0x2b, 0x37, 0x9e, 0x62, 0x8d, 0xe9, 0xf0, 0xa7, 0x50, 0x3a, 0x71,
	0x07, 0xf8, 0xd5, 0xc5, 0x32, 0x3f, 0x55, 0xcb, 0x95, 0xfa, 0xb3, 0x20, 0x31, 0x73, 0xe7, 0xdd,
	0xa3, 0x79, 0x15, 0xfd, 0x36, 0xaf, 0xa2, 0x87, 0x7f, 0x56, 0xd1, 0x67, 0x37, 0xcf, 0x52, 0xda,
	0xc9, 0xe3, 0x73, 0xbc, 0xac, 0xbf, 0x6f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x57, 0x02, 0x0a,
	0x0a, 0x91, 0x0a, 0x00, 0x00,
}

func (x SyncState) String() string {
	s, ok := SyncState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SyncPosition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncPosition)
	if !ok {
		that2, ok := that.(SyncPosition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LLSN != that1.LLSN {
		return false
	}
	if this.GLSN != that1.GLSN {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReplicatorClient is the client API for Replicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicatorClient interface {
	Replicate(ctx context.Context, opts ...grpc.CallOption) (Replicator_ReplicateClient, error)
	SyncInit(ctx context.Context, in *SyncInitRequest, opts ...grpc.CallOption) (*SyncInitResponse, error)
	SyncReplicate(ctx context.Context, in *SyncReplicateRequest, opts ...grpc.CallOption) (*SyncReplicateResponse, error)
}

type replicatorClient struct {
	cc *grpc.ClientConn
}

func NewReplicatorClient(cc *grpc.ClientConn) ReplicatorClient {
	return &replicatorClient{cc}
}

func (c *replicatorClient) Replicate(ctx context.Context, opts ...grpc.CallOption) (Replicator_ReplicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Replicator_serviceDesc.Streams[0], "/varlog.snpb.Replicator/Replicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicatorReplicateClient{stream}
	return x, nil
}

type Replicator_ReplicateClient interface {
	Send(*ReplicationRequest) error
	Recv() (*ReplicationResponse, error)
	grpc.ClientStream
}

type replicatorReplicateClient struct {
	grpc.ClientStream
}

func (x *replicatorReplicateClient) Send(m *ReplicationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicatorReplicateClient) Recv() (*ReplicationResponse, error) {
	m := new(ReplicationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicatorClient) SyncInit(ctx context.Context, in *SyncInitRequest, opts ...grpc.CallOption) (*SyncInitResponse, error) {
	out := new(SyncInitResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Replicator/SyncInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) SyncReplicate(ctx context.Context, in *SyncReplicateRequest, opts ...grpc.CallOption) (*SyncReplicateResponse, error) {
	out := new(SyncReplicateResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.Replicator/SyncReplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicatorServer is the server API for Replicator service.
type ReplicatorServer interface {
	Replicate(Replicator_ReplicateServer) error
	SyncInit(context.Context, *SyncInitRequest) (*SyncInitResponse, error)
	SyncReplicate(context.Context, *SyncReplicateRequest) (*SyncReplicateResponse, error)
}

// UnimplementedReplicatorServer can be embedded to have forward compatible implementations.
type UnimplementedReplicatorServer struct {
}

func (*UnimplementedReplicatorServer) Replicate(srv Replicator_ReplicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (*UnimplementedReplicatorServer) SyncInit(ctx context.Context, req *SyncInitRequest) (*SyncInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncInit not implemented")
}
func (*UnimplementedReplicatorServer) SyncReplicate(ctx context.Context, req *SyncReplicateRequest) (*SyncReplicateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncReplicate not implemented")
}

func RegisterReplicatorServer(s *grpc.Server, srv ReplicatorServer) {
	s.RegisterService(&_Replicator_serviceDesc, srv)
}

func _Replicator_Replicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicatorServer).Replicate(&replicatorReplicateServer{stream})
}

type Replicator_ReplicateServer interface {
	Send(*ReplicationResponse) error
	Recv() (*ReplicationRequest, error)
	grpc.ServerStream
}

type replicatorReplicateServer struct {
	grpc.ServerStream
}

func (x *replicatorReplicateServer) Send(m *ReplicationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicatorReplicateServer) Recv() (*ReplicationRequest, error) {
	m := new(ReplicationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Replicator_SyncInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).SyncInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Replicator/SyncInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).SyncInit(ctx, req.(*SyncInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_SyncReplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).SyncReplicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.Replicator/SyncReplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).SyncReplicate(ctx, req.(*SyncReplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Replicator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "varlog.snpb.Replicator",
	HandlerType: (*ReplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncInit",
			Handler:    _Replicator_SyncInit_Handler,
		},
		{
			MethodName: "SyncReplicate",
			Handler:    _Replicator_SyncReplicate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Replicate",
			Handler:       _Replicator_Replicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/snpb/replicator.proto",
}

func (m *ReplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.LLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.LogStreamID != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.LLSN))
		i--
		dAtA[i] = 0x18
	}
	if m.LogStreamID != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x10
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncPosition) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.GLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.LLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.LLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncRange) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastLLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.LastLLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.FirstLLSN != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.FirstLLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncStatus) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Current.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Last.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.First.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.State != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncPayload) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogEntry != nil {
		{
			size, err := m.LogEntry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplicator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CommitContext != nil {
		{
			size, err := m.CommitContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplicator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncInitRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncInitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncInitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ClusterID != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncInitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncInitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SyncReplicateRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncReplicateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncReplicateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReplicator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ClusterID != 0 {
		i = encodeVarintReplicator(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncReplicateResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncReplicateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncReplicateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplicator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReplicator(dAtA []byte, offset int, v uint64) int {
	offset -= sovReplicator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReplicationRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogStreamID != 0 {
		n += 1 + sovReplicator(uint64(m.LogStreamID))
	}
	if m.LLSN != 0 {
		n += 1 + sovReplicator(uint64(m.LLSN))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplicationResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageNodeID != 0 {
		n += 1 + sovReplicator(uint64(m.StorageNodeID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovReplicator(uint64(m.LogStreamID))
	}
	if m.LLSN != 0 {
		n += 1 + sovReplicator(uint64(m.LLSN))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncPosition) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LLSN != 0 {
		n += 1 + sovReplicator(uint64(m.LLSN))
	}
	if m.GLSN != 0 {
		n += 1 + sovReplicator(uint64(m.GLSN))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncRange) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FirstLLSN != 0 {
		n += 1 + sovReplicator(uint64(m.FirstLLSN))
	}
	if m.LastLLSN != 0 {
		n += 1 + sovReplicator(uint64(m.LastLLSN))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncStatus) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovReplicator(uint64(m.State))
	}
	l = m.First.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Last.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Current.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncPayload) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitContext != nil {
		l = m.CommitContext.ProtoSize()
		n += 1 + l + sovReplicator(uint64(l))
	}
	if m.LogEntry != nil {
		l = m.LogEntry.ProtoSize()
		n += 1 + l + sovReplicator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncInitRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovReplicator(uint64(m.ClusterID))
	}
	l = m.Source.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Destination.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Range.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncInitResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Range.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncReplicateRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovReplicator(uint64(m.ClusterID))
	}
	l = m.Source.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Destination.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	l = m.Payload.ProtoSize()
	n += 1 + l + sovReplicator(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncReplicateResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.ProtoSize()
		n += 1 + l + sovReplicator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReplicator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReplicator(x uint64) (n int) {
	return sovReplicator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SyncPayload) GetValue() interface{} {
	if this.CommitContext != nil {
		return this.CommitContext
	}
	if this.LogEntry != nil {
		return this.LogEntry
	}
	return nil
}

func (this *SyncPayload) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *varlogpb.CommitContext:
		this.CommitContext = vt
	case *varlogpb.LogEntry:
		this.LogEntry = vt
	default:
		return false
	}
	return true
}
func (m *ReplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSN", wireType)
			}
			m.LLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LLSN |= github_daumkakao_com_varlog_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSN", wireType)
			}
			m.LLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LLSN |= github_daumkakao_com_varlog_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSN", wireType)
			}
			m.LLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LLSN |= github_daumkakao_com_varlog_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSN", wireType)
			}
			m.GLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSN |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLLSN", wireType)
			}
			m.FirstLLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstLLSN |= github_daumkakao_com_varlog_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLLSN", wireType)
			}
			m.LastLLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLLSN |= github_daumkakao_com_varlog_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= SyncState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.First.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Last.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Current.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommitContext == nil {
				m.CommitContext = &varlogpb.CommitContext{}
			}
			if err := m.CommitContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogEntry == nil {
				m.LogEntry = &varlogpb.LogEntry{}
			}
			if err := m.LogEntry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncInitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncInitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncInitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_daumkakao_com_varlog_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncReplicateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncReplicateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncReplicateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_daumkakao_com_varlog_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncReplicateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncReplicateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncReplicateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SyncStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplicator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReplicator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReplicator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReplicator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReplicator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplicator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReplicator = fmt.Errorf("proto: unexpected end of group")
)
