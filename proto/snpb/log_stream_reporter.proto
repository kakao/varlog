syntax = "proto3";

package varlog.snpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/snpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// LogStreamUncommitReport is manifest that log stream reports to metadata
// repository about log entries those are waiting to commit.
message LogStreamUncommitReport {
    option (gogoproto.equal) = true;

    uint32 log_stream_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
    uint64 uncommitted_llsn_offset = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
        (gogoproto.customname) = "UncommittedLLSNOffset"
    ];
    uint64 uncommitted_llsn_length = 3
        [(gogoproto.customname) = "UncommittedLLSNLength"];
    uint64 high_watermark = 4
        [(gogoproto.casttype) =
             "github.daumkakao.com/varlog/varlog/pkg/types.GLSN"];
}

message GetReportRequest {}
message GetReportResponse {
    uint32 storage_node_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
        (gogoproto.customname) = "StorageNodeID"
    ];
    repeated LogStreamUncommitReport uncommit_reports = 2
        [(gogoproto.nullable) = false];
}

// GlobalLogStreamDescriptor is a committing result against with
// LocalLogStreamDescriptor. Field highest_glsn is the highest position in the
// global log space.
// Field commit_result contains positions of all log entries of log streams in
// a storage node which is a receiver of this GlobalLogStreamDescriptor.
message LogStreamCommitResult {
    option (gogoproto.equal) = true;

    uint32 log_stream_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
    uint64 committed_llsn_offset = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
        (gogoproto.customname) = "CommittedLLSNOffset"
    ];
    uint64 committed_glsn_offset = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
        (gogoproto.customname) = "CommittedGLSNOffset"
    ];
    uint64 committed_glsn_length = 4
        [(gogoproto.customname) = "CommittedGLSNLength"];
    uint64 high_watermark = 5
        [(gogoproto.casttype) =
             "github.daumkakao.com/varlog/varlog/pkg/types.GLSN"];
    uint64 prev_high_watermark = 6
        [(gogoproto.casttype) =
             "github.daumkakao.com/varlog/varlog/pkg/types.GLSN"];
}

message CommitRequest {
    uint32 storage_node_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
        (gogoproto.customname) = "StorageNodeID"
    ];
    repeated LogStreamCommitResult commit_results = 2
        [(gogoproto.nullable) = false];
}

message CommitResponse {
    // TODO:
}

service LogStreamReporter {
    rpc GetReport(stream GetReportRequest) returns (stream GetReportResponse) {}
    rpc Commit(CommitRequest) returns (CommitResponse) {}
}
