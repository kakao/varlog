syntax = "proto3";

package varlog.snpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "github.com/kakao/varlog/proto/snpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// LogStreamUncommitReport is manifest that log stream reports to metadata
// repository about log entries those are waiting to commit.
message LogStreamUncommitReport {
  option (gogoproto.equal) = true;

  int32 log_stream_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  uint64 uncommitted_llsn_offset = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LLSN",
    (gogoproto.customname) = "UncommittedLLSNOffset"
  ];
  uint64 uncommitted_llsn_length = 3
    [(gogoproto.customname) = "UncommittedLLSNLength"];
  uint64 version = 4
    [(gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.Version"];
  uint64 high_watermark = 5
    [(gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.GLSN"];
}

message GetReportRequest {}
message GetReportResponse {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  repeated LogStreamUncommitReport uncommit_reports = 2
    [(gogoproto.nullable) = false];
}

// LogStreamCommitResult has information about commit for a log stream, and it
// tells the log stream how many log entries can be committed. Even if the log
// stream can't commit anything, CommittedLLSNOffset and CommittedGLSNOffset
// should be valid.
//
// Here are examples for clarity. Assume that there are two log streams in a
// topic.
//
//  // LogStream 1 has not committed any log entries, and LogStream 2 has
//  // committed ten.
//  LogStreamCommitResult{
//      TopicID: 1,
//      LogStreamID: 1,
//      Version: 1,
//      HighWatermark: 10,
//      CommittedLLSNOffset: 1,
//      CommittedGLSNOffset: 1,
//      CommittedGLSNLength: 0,
//  }
//  LogStreamCommitResult{
//      TopicID: 1,
//      LogStreamID: 2,
//      Version: 1,
//      HighWatermark: 10,
//      CommittedLLSNOffset: 1,
//      CommittedGLSNOffset: 1,
//      CommittedGLSNLength: 10,
//  }
//
//  // LogStream 1 has not committed any log entries again, and LogStream 2 has
//  // committed ten.
//  // Note that the CommittedGLSNOffset of LogStream 1 is one even though the
//  // GLSN 1 has already been issued to other log entries in LogStream 2.
//  LogStreamCommitResult{
//      TopicID: 1,
//      LogStreamID: 1,
//      Version 2,
//      HighWatermark: 20,
//      CommittedLLSNOffset: 1,
//      CommittedGLSNOffset: 1,
//      CommittedGLSNLength: 0,
//  }
//  LogStreamCommitResult{
//      TopicID: 1,
//      LogStreamID: 2,
//      Version 2,
//      HighWatermark: 20,
//      CommittedLLSNOffset: 11,
//      CommittedGLSNOffset: 11,
//      CommittedGLSNLength: 10,
//  }
//
//  // LogStream 1 has committed ten log entries, and LogStream 2 has committed
//  // ten.
//  LogStreamCommitResult{
//      TopicID: 1,
//      LogStreamID: 1,
//      Version 3,
//      HighWatermark: 40,
//      CommittedLLSNOffset: 1,
//      CommittedGLSNOffset: 21,
//      CommittedGLSNLength: 10,
//  }
//  LogStreamCommitResult{
//      TopicID: 1,
//      LogStreamID: 2,
//      Version 3,
//      HighWatermark: 40,
//      CommittedLLSNOffset: 21,
//      CommittedGLSNOffset: 31,
//      CommittedGLSNLength: 10,
//  }
//
//  // LogStream 1 has committed ten log entries, and LogStream 2 has not.
//  // Note that the CommittedGLSNOffset of LogStream 2 is next to the last
//  // committed GLSN of itself, regardless of LogStream 1.
//  LogStreamCommitResult{
//      TopicID: 1,
//      LogStreamID: 1,
//      Version 4,
//      HighWatermark: 50,
//      CommittedLLSNOffset: 11,
//      CommittedGLSNOffset: 41,
//      CommittedGLSNLength: 10,
//  }
//  LogStreamCommitResult{
//      TopicID: 1,
//      LogStreamID: 2,
//      Version 4,
//      HighWatermark: 50,
//      CommittedLLSNOffset: 31,
//      CommittedGLSNOffset: 41,
//      CommittedGLSNLength: 0,
//  }
message LogStreamCommitResult {
  option (gogoproto.equal) = true;

  // LogStreamID is the identifier for the log stream.
  int32 log_stream_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];

  // TopicID is the identifier for the topic to which the log stream belongs.
  int32 topic_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];

  // CommittedLLSNOffset is the starting LLSN of the commit range.
  uint64 committed_llsn_offset = 3 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LLSN",
    (gogoproto.customname) = "CommittedLLSNOffset"
  ];

  // CommittedGLSNOffset is the starting GLSN of the commit range.
  // If there is no log entry to be committed, the CommittedGLSNOffset should be
  // next to the last committed GLSN.
  uint64 committed_glsn_offset = 4 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "CommittedGLSNOffset"
  ];

  // CommittedGLSNLength is the length of the commit range.
  uint64 committed_glsn_length = 5
    [(gogoproto.customname) = "CommittedGLSNLength"];

  // Version is a unique number for the commit issued by the metadata
  // repository.
  uint64 version = 6
    [(gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.Version"];

  // HighWatermark is the maximum GLSN across all log streams of the topic in a
  // specific commit version.
  uint64 high_watermark = 7 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "HighWatermark"
  ];
}

message CommitBatchRequest {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  repeated LogStreamCommitResult commit_results = 2
    [(gogoproto.nullable) = false];
}

message CommitBatchResponse {
  // TODO:
}

service LogStreamReporter {
  rpc GetReport(stream GetReportRequest) returns (stream GetReportResponse) {}
  rpc CommitBatch(stream CommitBatchRequest) returns (CommitBatchResponse) {}
}
