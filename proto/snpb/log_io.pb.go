// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/snpb/log_io.proto

package snpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	github_daumkakao_com_varlog_varlog_pkg_types "github.daumkakao.com/varlog/varlog/pkg/types"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AppendRequest is a message to send a payload to a storage node. It contains
// a vector of storage nodes to replicate the payload.
type AppendRequest struct {
	Payload     []byte                                                   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	TopicID     github_daumkakao_com_varlog_varlog_pkg_types.TopicID     `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID `protobuf:"varint,3,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	Backups     []varlogpb.StorageNode                                   `protobuf:"bytes,4,rep,name=backups,proto3" json:"backups"`
}

func (m *AppendRequest) Reset()         { *m = AppendRequest{} }
func (m *AppendRequest) String() string { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()    {}
func (*AppendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{0}
}
func (m *AppendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendRequest.Merge(m, src)
}
func (m *AppendRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AppendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendRequest proto.InternalMessageInfo

func (m *AppendRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *AppendRequest) GetTopicID() github_daumkakao_com_varlog_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *AppendRequest) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *AppendRequest) GetBackups() []varlogpb.StorageNode {
	if m != nil {
		return m.Backups
	}
	return nil
}

type AppendResult struct {
	Meta  varlogpb.LogEntryMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Error string                `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *AppendResult) Reset()         { *m = AppendResult{} }
func (m *AppendResult) String() string { return proto.CompactTextString(m) }
func (*AppendResult) ProtoMessage()    {}
func (*AppendResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{1}
}
func (m *AppendResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppendResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppendResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppendResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendResult.Merge(m, src)
}
func (m *AppendResult) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AppendResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendResult.DiscardUnknown(m)
}

var xxx_messageInfo_AppendResult proto.InternalMessageInfo

func (m *AppendResult) GetMeta() varlogpb.LogEntryMeta {
	if m != nil {
		return m.Meta
	}
	return varlogpb.LogEntryMeta{}
}

func (m *AppendResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// AppendResponse is a response message of Append RPC.
type AppendResponse struct {
	Results []AppendResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results"`
}

func (m *AppendResponse) Reset()         { *m = AppendResponse{} }
func (m *AppendResponse) String() string { return proto.CompactTextString(m) }
func (*AppendResponse) ProtoMessage()    {}
func (*AppendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{2}
}
func (m *AppendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendResponse.Merge(m, src)
}
func (m *AppendResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AppendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppendResponse proto.InternalMessageInfo

func (m *AppendResponse) GetResults() []AppendResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// ReadRequest asks a storage node to retrieve log entry at the GLSN.
type ReadRequest struct {
	GLSN        github_daumkakao_com_varlog_varlog_pkg_types.GLSN        `protobuf:"varint,1,opt,name=glsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"glsn,omitempty"`
	TopicID     github_daumkakao_com_varlog_varlog_pkg_types.TopicID     `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID `protobuf:"varint,3,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *ReadRequest) Reset()         { *m = ReadRequest{} }
func (m *ReadRequest) String() string { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()    {}
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{3}
}
func (m *ReadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRequest.Merge(m, src)
}
func (m *ReadRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRequest proto.InternalMessageInfo

func (m *ReadRequest) GetGLSN() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSN
	}
	return 0
}

func (m *ReadRequest) GetTopicID() github_daumkakao_com_varlog_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *ReadRequest) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

// ReadResponse contains the contents of the log entry which is retrieved by
// the ReadRequest.
type ReadResponse struct {
	GLSN    github_daumkakao_com_varlog_varlog_pkg_types.GLSN `protobuf:"varint,1,opt,name=glsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"glsn,omitempty"`
	LLSN    github_daumkakao_com_varlog_varlog_pkg_types.LLSN `protobuf:"varint,2,opt,name=llsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LLSN" json:"llsn,omitempty"`
	Payload []byte                                            `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ReadResponse) Reset()         { *m = ReadResponse{} }
func (m *ReadResponse) String() string { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()    {}
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{4}
}
func (m *ReadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadResponse.Merge(m, src)
}
func (m *ReadResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadResponse proto.InternalMessageInfo

func (m *ReadResponse) GetGLSN() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSN
	}
	return 0
}

func (m *ReadResponse) GetLLSN() github_daumkakao_com_varlog_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSN
	}
	return 0
}

func (m *ReadResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// SubscribeRequest has GLSN which indicates an inclusive starting position
// from which a client wants to receive.
type SubscribeRequest struct {
	GLSNBegin   github_daumkakao_com_varlog_varlog_pkg_types.GLSN        `protobuf:"varint,1,opt,name=glsn_begin,json=glsnBegin,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"glsn_begin,omitempty"`
	GLSNEnd     github_daumkakao_com_varlog_varlog_pkg_types.GLSN        `protobuf:"varint,2,opt,name=glsn_end,json=glsnEnd,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"glsn_end,omitempty"`
	TopicID     github_daumkakao_com_varlog_varlog_pkg_types.TopicID     `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID `protobuf:"varint,4,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{5}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetGLSNBegin() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSNBegin
	}
	return 0
}

func (m *SubscribeRequest) GetGLSNEnd() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSNEnd
	}
	return 0
}

func (m *SubscribeRequest) GetTopicID() github_daumkakao_com_varlog_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *SubscribeRequest) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

// SubscribeResponse comprises the contents of the log entry and its GLSN.
type SubscribeResponse struct {
	GLSN    github_daumkakao_com_varlog_varlog_pkg_types.GLSN `protobuf:"varint,1,opt,name=glsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"glsn,omitempty"`
	LLSN    github_daumkakao_com_varlog_varlog_pkg_types.LLSN `protobuf:"varint,2,opt,name=llsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LLSN" json:"llsn,omitempty"`
	Payload []byte                                            `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{6}
}
func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetGLSN() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSN
	}
	return 0
}

func (m *SubscribeResponse) GetLLSN() github_daumkakao_com_varlog_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSN
	}
	return 0
}

func (m *SubscribeResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// TrimRequest contains inclusive GLSN until which a client wants to delete.
// If async field is true, the trim operation returns immediately and the
// storage node removes its log entry in the background.
type TrimRequest struct {
	TopicID github_daumkakao_com_varlog_varlog_pkg_types.TopicID `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	GLSN    github_daumkakao_com_varlog_varlog_pkg_types.GLSN    `protobuf:"varint,2,opt,name=glsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"glsn,omitempty"`
}

func (m *TrimRequest) Reset()         { *m = TrimRequest{} }
func (m *TrimRequest) String() string { return proto.CompactTextString(m) }
func (*TrimRequest) ProtoMessage()    {}
func (*TrimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{7}
}
func (m *TrimRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrimRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrimRequest.Merge(m, src)
}
func (m *TrimRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TrimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrimRequest proto.InternalMessageInfo

func (m *TrimRequest) GetTopicID() github_daumkakao_com_varlog_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *TrimRequest) GetGLSN() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSN
	}
	return 0
}

func init() {
	proto.RegisterType((*AppendRequest)(nil), "varlog.snpb.AppendRequest")
	proto.RegisterType((*AppendResult)(nil), "varlog.snpb.AppendResult")
	proto.RegisterType((*AppendResponse)(nil), "varlog.snpb.AppendResponse")
	proto.RegisterType((*ReadRequest)(nil), "varlog.snpb.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "varlog.snpb.ReadResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "varlog.snpb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "varlog.snpb.SubscribeResponse")
	proto.RegisterType((*TrimRequest)(nil), "varlog.snpb.TrimRequest")
}

func init() { proto.RegisterFile("proto/snpb/log_io.proto", fileDescriptor_7692726f23e518ee) }

var fileDescriptor_7692726f23e518ee = []byte{
	// 713 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0x8f, 0x13, 0xb7, 0x69, 0xce, 0x2d, 0x82, 0x13, 0xa2, 0xa9, 0x4b, 0xed, 0xca, 0x53, 0x97,
	0x3a, 0x50, 0x90, 0xf8, 0x23, 0x2a, 0x41, 0x4a, 0x54, 0x55, 0x0d, 0x45, 0x75, 0x3a, 0x81, 0xa0,
	0x3a, 0xc7, 0xc7, 0x61, 0xc5, 0xf1, 0x19, 0xfb, 0x8c, 0x94, 0x6f, 0xc1, 0xc6, 0x8a, 0xc4, 0x27,
	0x60, 0x63, 0x64, 0xec, 0x84, 0x2a, 0xb1, 0x30, 0x79, 0x48, 0xbe, 0x45, 0x27, 0x74, 0x67, 0x3b,
	0x75, 0x4a, 0x91, 0x68, 0x45, 0x19, 0x3a, 0xd9, 0x77, 0xef, 0xbd, 0xdf, 0x7b, 0xf7, 0x7b, 0xbf,
	0x7b, 0x3a, 0x30, 0x1f, 0x84, 0x94, 0xd1, 0x46, 0xe4, 0x07, 0x76, 0xc3, 0xa3, 0x64, 0xdf, 0xa5,
	0xa6, 0xd8, 0x81, 0xca, 0x7b, 0x14, 0x7a, 0x94, 0x98, 0xdc, 0xa2, 0xae, 0x12, 0x97, 0xbd, 0x8d,
	0x6d, 0xb3, 0x4b, 0xfb, 0x0d, 0x42, 0x09, 0x6d, 0x08, 0x1f, 0x3b, 0x7e, 0x23, 0x56, 0x29, 0x04,
	0xff, 0x4b, 0x63, 0xd5, 0x45, 0x42, 0x29, 0xf1, 0xf0, 0xb1, 0x17, 0xee, 0x07, 0x6c, 0x90, 0x19,
	0xe7, 0x53, 0xe0, 0xc0, 0x6e, 0xf4, 0x31, 0x43, 0x0e, 0x62, 0x28, 0x35, 0x18, 0x5f, 0xcb, 0x60,
	0xee, 0x49, 0x10, 0x60, 0xdf, 0xb1, 0xf0, 0xbb, 0x18, 0x47, 0x0c, 0xd6, 0x41, 0x35, 0x40, 0x03,
	0x8f, 0x22, 0xa7, 0x2e, 0x2d, 0x4b, 0x2b, 0xb3, 0x56, 0xbe, 0x84, 0xaf, 0xc1, 0x0c, 0xa3, 0x81,
	0xdb, 0xdd, 0x77, 0x9d, 0x7a, 0x79, 0x59, 0x5a, 0x99, 0x6a, 0x6e, 0x0c, 0x13, 0xbd, 0xba, 0xc7,
	0xf7, 0xb6, 0x9e, 0x1e, 0x25, 0xfa, 0xdd, 0xac, 0x62, 0x07, 0xc5, 0xfd, 0x1e, 0xea, 0x21, 0x2a,
	0x6a, 0x4f, 0x53, 0xe7, 0x9f, 0xa0, 0x47, 0x1a, 0x6c, 0x10, 0xe0, 0xc8, 0xcc, 0xe2, 0xac, 0xaa,
	0x00, 0xdd, 0x72, 0x20, 0x05, 0x73, 0x9c, 0x8d, 0x88, 0x85, 0x18, 0xf5, 0x79, 0x92, 0x8a, 0x48,
	0xb2, 0x3d, 0x4c, 0x74, 0xa5, 0x4d, 0x49, 0x47, 0xec, 0x8b, 0x44, 0xf7, 0xcf, 0x94, 0xa8, 0x10,
	0x6b, 0x29, 0xde, 0x78, 0xe1, 0xc0, 0x47, 0xa0, 0x6a, 0xa3, 0x6e, 0x2f, 0x0e, 0xa2, 0xba, 0xbc,
	0x5c, 0x59, 0x51, 0xd6, 0x6e, 0x9a, 0x59, 0x03, 0x72, 0xba, 0xcc, 0x0e, 0xa3, 0x21, 0x22, 0x78,
	0x87, 0x3a, 0xb8, 0x29, 0x1f, 0x24, 0x7a, 0xc9, 0xca, 0x43, 0x8c, 0x57, 0x60, 0x36, 0x67, 0x2e,
	0x8a, 0x3d, 0x06, 0xef, 0x01, 0x99, 0x93, 0x2b, 0x58, 0x53, 0xd6, 0x96, 0x7e, 0x83, 0x6a, 0x53,
	0xd2, 0xf2, 0x59, 0x38, 0x78, 0x86, 0x19, 0xca, 0xb0, 0x44, 0x00, 0xbc, 0x0e, 0xa6, 0x70, 0x18,
	0xd2, 0x50, 0x90, 0x5a, 0xb3, 0xd2, 0x85, 0xb1, 0x0d, 0xae, 0x8c, 0xe1, 0x03, 0xea, 0x47, 0x18,
	0x3e, 0x00, 0xd5, 0x50, 0xa4, 0x8a, 0xea, 0x92, 0x28, 0x77, 0xc1, 0x2c, 0xe8, 0xc5, 0x2c, 0x16,
	0x93, 0xd7, 0x9a, 0xf9, 0x1b, 0x5f, 0xca, 0x40, 0xb1, 0x30, 0x1a, 0x37, 0x79, 0x17, 0xc8, 0xc4,
	0x8b, 0x7c, 0x51, 0xab, 0xdc, 0x5c, 0x1f, 0x26, 0xba, 0xbc, 0xd9, 0xee, 0xec, 0x1c, 0x25, 0xfa,
	0xed, 0x33, 0x51, 0xcb, 0x83, 0x2c, 0x01, 0x75, 0xe9, 0xd4, 0x61, 0x7c, 0x97, 0xc0, 0x6c, 0xca,
	0x59, 0xc6, 0xff, 0x05, 0x90, 0xb6, 0x0b, 0x64, 0x8f, 0x43, 0x96, 0x8f, 0x21, 0xdb, 0xe7, 0x81,
	0x6c, 0x0b, 0x48, 0x0e, 0x55, 0xbc, 0xbf, 0x95, 0x89, 0xfb, 0x6b, 0x7c, 0xae, 0x80, 0xab, 0x9d,
	0xd8, 0x8e, 0xba, 0xa1, 0x6b, 0xe3, 0x5c, 0x09, 0x08, 0x00, 0x5e, 0xc9, 0xbe, 0x8d, 0x89, 0x9b,
	0x1f, 0xad, 0x39, 0x4c, 0xf4, 0x1a, 0xaf, 0xb2, 0xc9, 0x37, 0xcf, 0x77, 0xbe, 0x1a, 0x47, 0x15,
	0xf1, 0xf0, 0x25, 0x98, 0x11, 0x29, 0xb0, 0xef, 0x64, 0x07, 0x7d, 0xcc, 0x95, 0xc1, 0xdd, 0x5a,
	0xbe, 0x73, 0x3e, 0xf8, 0x2a, 0x47, 0x6c, 0xf9, 0x93, 0x43, 0xa9, 0xf2, 0x3f, 0x64, 0x27, 0x5f,
	0xb0, 0xec, 0x7e, 0x48, 0xe0, 0x5a, 0xa1, 0x4b, 0x97, 0x44, 0x7b, 0xdf, 0x24, 0xa0, 0xec, 0x85,
	0x6e, 0x3f, 0x97, 0x5d, 0xb1, 0x6d, 0xd2, 0x05, 0xb4, 0x2d, 0xe7, 0xab, 0xfc, 0xcf, 0xf8, 0x5a,
	0xfb, 0x58, 0x06, 0x53, 0x6d, 0x4a, 0xb6, 0x9e, 0xc3, 0x0d, 0x30, 0x9d, 0x0e, 0x5b, 0xa8, 0x9e,
	0x3a, 0x81, 0xc5, 0x11, 0xd5, 0xc5, 0xd3, 0xa7, 0xb3, 0xe8, 0xa7, 0x51, 0x82, 0xeb, 0x40, 0xe6,
	0xd3, 0x05, 0xd6, 0x27, 0xdc, 0x0a, 0x43, 0x5a, 0x5d, 0x38, 0xc5, 0x32, 0x0e, 0xdf, 0x01, 0xb5,
	0xb1, 0x4a, 0xe0, 0xd2, 0x84, 0xe7, 0xc9, 0x3b, 0xae, 0x6a, 0x7f, 0x32, 0xe7, 0x68, 0xb7, 0x24,
	0xf8, 0x10, 0xc8, 0xbc, 0x3f, 0x27, 0xca, 0x29, 0xb4, 0x4c, 0xbd, 0x61, 0xa6, 0x2f, 0x0c, 0x33,
	0x7f, 0x61, 0x98, 0x2d, 0xfe, 0xc2, 0x30, 0x4a, 0xcd, 0xcd, 0x83, 0xa1, 0x26, 0x1d, 0x0e, 0x35,
	0xe9, 0xc3, 0x48, 0x2b, 0x7d, 0x1a, 0x69, 0xd2, 0xe1, 0x48, 0x2b, 0xfd, 0x1c, 0x69, 0xa5, 0x17,
	0xab, 0x7f, 0x43, 0xf6, 0xf8, 0x31, 0x64, 0x4f, 0x8b, 0xff, 0x3b, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x33, 0x76, 0x20, 0xc7, 0x21, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogIOClient is the client API for LogIO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogIOClient interface {
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LogIO_SubscribeClient, error)
	Trim(ctx context.Context, in *TrimRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type logIOClient struct {
	cc *grpc.ClientConn
}

func NewLogIOClient(cc *grpc.ClientConn) LogIOClient {
	return &logIOClient{cc}
}

func (c *logIOClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.LogIO/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIOClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.LogIO/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIOClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LogIO_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogIO_serviceDesc.Streams[0], "/varlog.snpb.LogIO/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &logIOSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogIO_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type logIOSubscribeClient struct {
	grpc.ClientStream
}

func (x *logIOSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logIOClient) Trim(ctx context.Context, in *TrimRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.snpb.LogIO/Trim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogIOServer is the server API for LogIO service.
type LogIOServer interface {
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Subscribe(*SubscribeRequest, LogIO_SubscribeServer) error
	Trim(context.Context, *TrimRequest) (*types.Empty, error)
}

// UnimplementedLogIOServer can be embedded to have forward compatible implementations.
type UnimplementedLogIOServer struct {
}

func (*UnimplementedLogIOServer) Append(ctx context.Context, req *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (*UnimplementedLogIOServer) Read(ctx context.Context, req *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedLogIOServer) Subscribe(req *SubscribeRequest, srv LogIO_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedLogIOServer) Trim(ctx context.Context, req *TrimRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trim not implemented")
}

func RegisterLogIOServer(s *grpc.Server, srv LogIOServer) {
	s.RegisterService(&_LogIO_serviceDesc, srv)
}

func _LogIO_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIOServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.LogIO/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIOServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIO_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIOServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.LogIO/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIOServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIO_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogIOServer).Subscribe(m, &logIOSubscribeServer{stream})
}

type LogIO_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type logIOSubscribeServer struct {
	grpc.ServerStream
}

func (x *logIOSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LogIO_Trim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIOServer).Trim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.LogIO/Trim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIOServer).Trim(ctx, req.(*TrimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogIO_serviceDesc = grpc.ServiceDesc{
	ServiceName: "varlog.snpb.LogIO",
	HandlerType: (*LogIOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _LogIO_Append_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _LogIO_Read_Handler,
		},
		{
			MethodName: "Trim",
			Handler:    _LogIO_Trim_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _LogIO_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/snpb/log_io.proto",
}

func (m *AppendRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Backups) > 0 {
		for iNdEx := len(m.Backups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Backups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogIo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LogStreamID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x18
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintLogIo(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppendResult) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppendResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintLogIo(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogIo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppendResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogIo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x18
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x10
	}
	if m.GLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintLogIo(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.GLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x20
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x18
	}
	if m.GLSNEnd != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSNEnd))
		i--
		dAtA[i] = 0x10
	}
	if m.GLSNBegin != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSNBegin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintLogIo(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.GLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TrimRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrimRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrimRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogIo(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogIo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppendRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovLogIo(uint64(l))
	}
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovLogIo(uint64(m.LogStreamID))
	}
	if len(m.Backups) > 0 {
		for _, e := range m.Backups {
			l = e.ProtoSize()
			n += 1 + l + sovLogIo(uint64(l))
		}
	}
	return n
}

func (m *AppendResult) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Meta.ProtoSize()
	n += 1 + l + sovLogIo(uint64(l))
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovLogIo(uint64(l))
	}
	return n
}

func (m *AppendResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.ProtoSize()
			n += 1 + l + sovLogIo(uint64(l))
		}
	}
	return n
}

func (m *ReadRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GLSN != 0 {
		n += 1 + sovLogIo(uint64(m.GLSN))
	}
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovLogIo(uint64(m.LogStreamID))
	}
	return n
}

func (m *ReadResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GLSN != 0 {
		n += 1 + sovLogIo(uint64(m.GLSN))
	}
	if m.LLSN != 0 {
		n += 1 + sovLogIo(uint64(m.LLSN))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovLogIo(uint64(l))
	}
	return n
}

func (m *SubscribeRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GLSNBegin != 0 {
		n += 1 + sovLogIo(uint64(m.GLSNBegin))
	}
	if m.GLSNEnd != 0 {
		n += 1 + sovLogIo(uint64(m.GLSNEnd))
	}
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovLogIo(uint64(m.LogStreamID))
	}
	return n
}

func (m *SubscribeResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GLSN != 0 {
		n += 1 + sovLogIo(uint64(m.GLSN))
	}
	if m.LLSN != 0 {
		n += 1 + sovLogIo(uint64(m.LLSN))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovLogIo(uint64(l))
	}
	return n
}

func (m *TrimRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.GLSN != 0 {
		n += 1 + sovLogIo(uint64(m.GLSN))
	}
	return n
}

func sovLogIo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogIo(x uint64) (n int) {
	return sovLogIo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_daumkakao_com_varlog_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backups = append(m.Backups, varlogpb.StorageNode{})
			if err := m.Backups[len(m.Backups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, AppendResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSN", wireType)
			}
			m.GLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSN |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_daumkakao_com_varlog_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSN", wireType)
			}
			m.GLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSN |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSN", wireType)
			}
			m.LLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LLSN |= github_daumkakao_com_varlog_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSNBegin", wireType)
			}
			m.GLSNBegin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSNBegin |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSNEnd", wireType)
			}
			m.GLSNEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSNEnd |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_daumkakao_com_varlog_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSN", wireType)
			}
			m.GLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSN |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSN", wireType)
			}
			m.LLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LLSN |= github_daumkakao_com_varlog_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrimRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrimRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrimRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_daumkakao_com_varlog_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSN", wireType)
			}
			m.GLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSN |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogIo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogIo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogIo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogIo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogIo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogIo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogIo = fmt.Errorf("proto: unexpected end of group")
)
