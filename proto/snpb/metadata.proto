syntax = "proto3";

package varlog.snpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "varlogpb/metadata.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/snpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// StorageNodeMetadataDescriptor is the metadata of the storage node.
// It contains mutable properties, for instance, usage of storage, log streams,
// etc.
message StorageNodeMetadataDescriptor {
  option (gogoproto.equal) = true;

  // ClusterID is the identifier of the cluster.
  uint32 cluster_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID",
    (gogoproto.jsontag) = "clusterId"
  ];

  varlogpb.StorageNode storage_node = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.jsontag) = ""
  ];

  repeated varlogpb.StorageDescriptor storages = 3
      [(gogoproto.nullable) = false];

  // LogStreams are the list of metadata for log stream replicas.
  repeated LogStreamReplicaMetadataDescriptor log_stream_replicas = 4
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "logStreams"];

  varlogpb.StorageNodeStatus status = 5;

  google.protobuf.Timestamp start_time = 6 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "startTime"
  ];
}

// LogStreamReplicaMetadataDescriptor represents the metadata of log stream
// replica.
message LogStreamReplicaMetadataDescriptor {
  option (gogoproto.equal) = true;

  varlogpb.LogStreamReplica log_stream_replica = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.jsontag) = ""
  ];

  // Status is the status of the log stream replica.
  //
  // TODO: Use a separate type to represent the status of the log stream replica
  // rather than `varlogpb.LogStreamStatus` that is shared with the metadata
  // repository.
  varlogpb.LogStreamStatus status = 2;

  // Version is the latest version of the commit received from the metadata
  // repository.
  uint64 version = 3
      [(gogoproto.casttype) =
           "github.daumkakao.com/varlog/varlog/pkg/types.Version"];

  // GlobalHighWatermark is the latest high watermark received from the metadata
  // repository.
  uint64 global_high_watermark = 4 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
    (gogoproto.jsontag) = "globalHighWatermark"
  ];

  // LocalLowWatermark is the first log sequence number in the log stream
  // replica.
  // The LocalLowWatermark becomes higher when the log is truncated by prefix
  // trimming.
  varlogpb.LogSequenceNumber local_low_watermark = 5
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "localLowWatermark"];

  // LocalHighWatermark is the last log sequence number in the log stream
  // replica.
  varlogpb.LogSequenceNumber local_high_watermark = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "localHighWatermark"
  ];

  // Path is the directory where the data for the log stream replica is stored.
  string path = 7;
  int64 storage_size_bytes = 8;

  // CreatedTime
  //
  // FIXME: StartTime or UpTime
  google.protobuf.Timestamp created_time = 9 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "createdTime"
  ];

  // UpdatedTime
  //
  // Deprecated:
  google.protobuf.Timestamp updated_time = 10 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "updatedTime"
  ];

  // TODO: Consider these fields:
  // - Various meta for path
  // - RegisteredTime
  // - SealedTime
  // - UnsealedTime
  // - Some basic metrics
}
