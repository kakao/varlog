syntax = "proto3";

package varlog.snpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

import "varlogpb/metadata.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/snpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// AppendRequest is a message to send a payload to a storage node. It contains
// a vector of storage nodes to replicate the payload.
message AppendRequest {
    bytes payload = 1;
    int32 topic_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
        (gogoproto.customname) = "TopicID"
    ];
    int32 log_stream_id = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
    repeated varlogpb.StorageNode backups = 4 [(gogoproto.nullable) = false];
}

// AppendResponse is a response message of Append RPC.
message AppendResponse {
    varlogpb.LogEntryMeta meta = 1 [(gogoproto.nullable) = false];
}

// ReadRequest asks a storage node to retrieve log entry at the GLSN.
message ReadRequest {
    uint64 glsn = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
        (gogoproto.customname) = "GLSN"
    ];
    int32 topic_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
        (gogoproto.customname) = "TopicID"
    ];
    int32 log_stream_id = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
}

// ReadResponse contains the contents of the log entry which is retrieved by
// the ReadRequest.
message ReadResponse {
    uint64 glsn = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
        (gogoproto.customname) = "GLSN"
    ];
    uint64 llsn = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
        (gogoproto.customname) = "LLSN"
    ];
    bytes payload = 3;
}

// SubscribeRequest has GLSN which indicates an inclusive starting position
// from which a client wants to receive.
message SubscribeRequest {
    uint64 glsn_begin = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
        (gogoproto.customname) = "GLSNBegin"
    ];
    uint64 glsn_end = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
        (gogoproto.customname) = "GLSNEnd"
    ];
    int32 topic_id = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
        (gogoproto.customname) = "TopicID"
    ];
    int32 log_stream_id = 4 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
}

// SubscribeResponse comprises the contents of the log entry and its GLSN.
message SubscribeResponse {
    uint64 glsn = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
        (gogoproto.customname) = "GLSN"
    ];
    uint64 llsn = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
        (gogoproto.customname) = "LLSN"
    ];
    bytes payload = 3;
}

// TrimRequest contains inclusive GLSN until which a client wants to delete.
// If async field is true, the trim operation returns immediately and the
// storage node removes its log entry in the background.
message TrimRequest {
    int32 topic_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
        (gogoproto.customname) = "TopicID"
    ];
    uint64 glsn = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
        (gogoproto.customname) = "GLSN"
    ];
}

service LogIO {
    rpc Append(AppendRequest) returns (AppendResponse) {}
    rpc Read(ReadRequest) returns (ReadResponse) {}
    rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {}
    rpc Trim(TrimRequest) returns (google.protobuf.Empty) {}
}
