syntax = "proto3";

package varlog;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/storage_node";

message AddLogStreamRequest {
    int32 log_stream_id = 1
        [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
         (gogoproto.customname) = "LogStreamID"];
}

message AddLogStreamResponse {
    // TODO: storage metadata
}

// AppendRequest is a message to send a payload to a storage node. It contains
// a vector of storage nodes to replicate the payload.
message AppendRequest {
    message BackupNode {
        int32 storage_node_id = 1
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID",
             (gogoproto.customname) = "StorageNodeID"];
        string address = 2;
    }
    bytes payload = 1;
    int32 log_stream_id = 2
        [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
         (gogoproto.customname) = "LogStreamID"];
    repeated BackupNode backups = 3 [(gogoproto.nullable) = false];
}

// AppendResponse contains GLSN (Global Log Sequence Number) that indicates log
// position in global log space.
message AppendResponse {
    uint64 glsn = 1
        [(gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
         (gogoproto.customname) = "GLSN"];
    int32 log_stream_id = 2
        [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
         (gogoproto.customname) = "LogStreamID"];
}

// ReadRequest asks a storage node to retrieve log entry at the GLSN.
message ReadRequest {
    uint64 glsn = 1
        [(gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
         (gogoproto.customname) = "GLSN"];
    int32 log_stream_id = 2
        [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
         (gogoproto.customname) = "LogStreamID"];
}

// ReadResponse contains the contents of the log entry which is retrieved by
// the ReadRequest.
message ReadResponse {
    bytes payload = 1;
    uint64 glsn = 2
        [(gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
         (gogoproto.customname) = "GLSN"];
}

// SubscribeRequest has GLSN which indicates an inclusive starting position
// from which a client wants to receive.
message SubscribeRequest {
    uint64 glsn = 1
        [(gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
         (gogoproto.customname) = "GLSN"];
}

// SubscribeResponse comprises the contents of the log entry and its GLSN.
message SubscribeResponse {
    uint64 glsn = 1
        [(gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
         (gogoproto.customname) = "GLSN"];
    uint64 llsn = 2
        [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LLSN",
         (gogoproto.customname) = "LLSN"];
    bytes payload = 3;
}

// TrimRequest contains inclusive GLSN until which a client wants to delete.
// If async field is true, the trim operation returns immediately and the
// storage node removes its log entry in the background.
message TrimRequest {
    uint64 glsn = 1
        [(gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
         (gogoproto.customname) = "GLSN"];
    bool async = 2;
}

// TrimResponse indicates how many log entries are deleted by using the
// num_trimmed field. In the case of an asynchronous request, the num_trimmed
// is zero.
message TrimResponse {
    uint64 num_trimmed = 1;
}

service LogIO {
    rpc AddLogStream(AddLogStreamRequest) returns (AddLogStreamResponse) {}

    rpc Append(AppendRequest) returns (AppendResponse) {}
    rpc Read(ReadRequest) returns (ReadResponse) {}
    rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {}
    rpc Trim(TrimRequest) returns (TrimResponse) {}
}
