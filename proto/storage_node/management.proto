syntax = "proto3";

package varlog.storagenode;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "varlog/metadata.proto";
import "storage_node/replicator.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/storage_node";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

enum MetadataType {
    option (gogoproto.goproto_enum_prefix) = false;

    HEARTBEAT = 0 [(gogoproto.enumvalue_customname) = "MetadataTypeHeartbeat"];
    LOG_STREAMS = 1
        [(gogoproto.enumvalue_customname) = "MetadataTypeLogStreams"];
    STATS = 2 [(gogoproto.enumvalue_customname) = "MetadataTypeStats"];
}

message GetMetadataRequest {
    uint32 cluster_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.ClusterID",
        (gogoproto.customname) = "ClusterID"
    ];
    MetadataType metadata_type = 2;
}

message GetMetadataResponse {
    varlog.StorageNodeMetadataDescriptor storage_node_metadata = 1;
}

message AddLogStreamRequest {
    uint32 cluster_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.ClusterID",
        (gogoproto.customname) = "ClusterID"
    ];
    uint32 storage_node_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID",
        (gogoproto.customname) = "StorageNodeID"
    ];
    uint32 log_stream_id = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
    varlog.StorageDescriptor storage = 4;
}
message AddLogStreamResponse {
    varlog.LogStreamDescriptor log_stream = 1;
}

message RemoveLogStreamRequest {
    uint32 cluster_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.ClusterID",
        (gogoproto.customname) = "ClusterID"
    ];
    uint32 storage_node_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID",
        (gogoproto.customname) = "StorageNodeID"
    ];
    uint32 log_stream_id = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
}

message SealRequest {
    uint32 cluster_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.ClusterID",
        (gogoproto.customname) = "ClusterID"
    ];
    uint32 storage_node_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID",
        (gogoproto.customname) = "StorageNodeID"
    ];
    uint32 log_stream_id = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
    uint64 last_committed_glsn = 4 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
        (gogoproto.customname) = "LastCommittedGLSN"
    ];
}

message SealResponse {
    varlog.LogStreamStatus status = 1;
    uint64 last_committed_glsn = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
        (gogoproto.customname) = "LastCommittedGLSN"
    ];
}

message UnsealRequest {
    uint32 cluster_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.ClusterID",
        (gogoproto.customname) = "ClusterID"
    ];
    uint32 storage_node_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID",
        (gogoproto.customname) = "StorageNodeID"
    ];
    uint32 log_stream_id = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
}

message SyncRequest {
    message BackupNode {
        uint32 storage_node_id = 1 [
            (gogoproto.casttype) =
                "github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID",
            (gogoproto.customname) = "StorageNodeID"
        ];
        string address = 2;
    }
    uint32 cluster_id = 1 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.ClusterID",
        (gogoproto.customname) = "ClusterID"
    ];
    uint32 storage_node_id = 2 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID",
        (gogoproto.customname) = "StorageNodeID"
    ];
    uint32 log_stream_id = 3 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
        (gogoproto.customname) = "LogStreamID"
    ];
    BackupNode backup = 4 [(gogoproto.nullable) = true];
    uint64 last_glsn = 5 [
        (gogoproto.casttype) =
            "github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
        (gogoproto.customname) = "LastGLSN"
    ];
}

message SyncResponse {
    SyncState state = 1;
    SyncPosition first = 2 [(gogoproto.nullable) = false];
    SyncPosition last = 3 [(gogoproto.nullable) = false];
    SyncPosition current = 4 [(gogoproto.nullable) = false];
}

// Management defines the public APIs for managing StorageNode.
service Management {
    // GetMetadata returns metadata of StorageNode.
    rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse) {}
    // AddLogStream adds a new LogStream to StorageNode.
    rpc AddLogStream(AddLogStreamRequest) returns (AddLogStreamResponse) {}
    // RemoveLogStream removes a LogStream from StorageNode.
    rpc RemoveLogStream(RemoveLogStreamRequest)
        returns (google.protobuf.Empty) {}
    // Seal changes the status of LogStreamExecutor to LogStreamStatusSealing or
    // LogStreamStatusSealed.
    rpc Seal(SealRequest) returns (SealResponse) {}
    // Unseal changes the status of LogStreamExecutor to LogStreamStatusRunning.
    rpc Unseal(UnsealRequest) returns (google.protobuf.Empty) {}
    // Sync starts mirroring between two StorageNodes.
    rpc Sync(SyncRequest) returns (SyncResponse) {}
}
