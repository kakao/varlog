syntax = "proto3";

package varlog;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/storage_node";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// LocalLogStreamDescriptor is manifest that log stream reports to metadata
// repository about log entries those are waiting to commit.
message LocalLogStreamDescriptor {
    message LogStreamUncommitReport {
        uint64 log_stream_id = 1
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
             (gogoproto.customname) = "LogStreamID"];
        uint64 uncommitted_llsn_begin = 2
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LLSN",
             (gogoproto.customname) = "UncommittedLLSNBegin"];
        uint64 uncommitted_llsn_end = 3
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LLSN",
             (gogoproto.customname) = "UncommittedLLSNEnd"];
    }
    uint32 storage_node_id = 1
        [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID",
         (gogoproto.customname) = "StorageNodeID"];
    uint64 next_glsn = 2
        [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
         (gogoproto.customname) = "NextGLSN"];
    repeated LogStreamUncommitReport uncommit = 3;
}

// GlobalLogStreamDescriptor is a committing result against with
// LocalLogStreamDescriptor. Field highest_glsn is the highest position in the
// global log space.
// Field commit_result contains positions of all log entries of log streams in
// a storage node which is a receiver of this GlobalLogStreamDescriptor.
message GlobalLogStreamDescriptor {
    message LogStreamCommitResult {
        uint32 log_stream_id = 1
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
             (gogoproto.customname) = "LogStreamID"];
        uint64 committed_glsn_begin = 2
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
             (gogoproto.customname) = "CommittedGLSNBegin"];
        uint64 committed_glsn_end = 3
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
             (gogoproto.customname) = "CommittedGLSNEnd"];
    }
    uint64 next_glsn = 1
        [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
         (gogoproto.customname) = "NextGLSN"];
    uint64 prev_next_glsn = 2
        [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
         (gogoproto.customname) = "PrevNextGLSN"];
    repeated LogStreamCommitResult commit_result = 3;
}

service LogStreamReporterService {
    rpc GetReport(google.protobuf.Empty) returns (LocalLogStreamDescriptor) {}
    rpc Commit(GlobalLogStreamDescriptor) returns (google.protobuf.Empty) {}
}
