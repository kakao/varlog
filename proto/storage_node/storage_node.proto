syntax = "proto3";

package varlog;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/storage_node";

// AppendRequest is a message to send a payload to a storage node. It contains 
// a vector of storage nodes to replicate the payload. 
message AppendRequest {
    message BackupNode {
        uint64 storage_node_id = 1;
        uint64 log_stream_id = 2 ;
        string address = 3;
    }
    bytes payload = 1;
    repeated BackupNode backups = 2;
}

// AppendResponse contains GLSN (Global Log Sequence Number) that indicates log 
// position in global log space.
message AppendResponse {
    uint64 glsn = 1;
}

// ReadRequest asks a storage node to retrieve log entry at the GLSN.
message ReadRequest {
    uint64 glsn = 1;
}

// ReadResponse contains the contents of the log entry which is retrieved by 
// the ReadRequest.
message ReadResponse {
    bytes payload = 1;
}

// SubscribeRequest has GLSN which indicates an inclusive starting position 
// from which a client wants to receive.
message SubscribeRequest {
    uint64 glsn = 1;
}

// SubscribeResponse comprises the contents of the log entry and its GLSN.  
message SubscribeResponse {
    uint64 glsn = 1;
    bytes payload = 2;
}

// TrimRequest contains inclusive GLSN until which a client wants to delete. 
// If async field is true, the trim operation returns immediately and the 
// storage node removes its log entry in the background.
message TrimRequest {
    uint64 glsn = 1;
    bool async = 2;
}

// TrimResponse indicates how many log entries are deleted by using the 
// num_trimmed field. In the case of an asynchronous request, the num_trimmed 
// is zero.
message TrimResponse {
    uint64 num_trimmed = 1;
}

service StorageNodeService {
    rpc Append(AppendRequest) returns (AppendResponse) {}
    rpc Read(ReadRequest) returns (ReadResponse) {}
    rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {}
    rpc Trim(TrimRequest) returns (TrimResponse) {}
}
