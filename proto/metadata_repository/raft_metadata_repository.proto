syntax = "proto3";

package varlog;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "varlog/metadata.proto";
import "storage_node/log_stream_reporter.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/metadata_repository";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message RegisterStorageNode {
        StorageNodeDescriptor storage_node = 1[(gogoproto.nullable) = true];
}

message UnregisterStorageNode {
        uint32 storage_node_id = 1
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID",
             (gogoproto.customname) = "StorageNodeID"];
}

message RegisterLogStream {
        LogStreamDescriptor log_stream = 1[(gogoproto.nullable) = true];
}

message UnregisterLogStream {
        uint32 log_stream_id = 1
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
             (gogoproto.customname) = "LogStreamID"];
}

message UpdateLogStream {
        LogStreamDescriptor log_stream = 1[(gogoproto.nullable) = true];
}

message Report {
        LocalLogStreamDescriptor log_stream = 1[(gogoproto.nullable) = true];
}

message Commit {
}

message TrimCommit {
    uint64 glsn = 1
        [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
        (gogoproto.customname) = "GLSN"];
}

message Seal {
        uint32 log_stream_id = 1
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
            (gogoproto.customname) = "LogStreamID"];
}

message Unseal {
        uint32 log_stream_id = 1
            [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID",
            (gogoproto.customname) = "LogStreamID"];
}

message RaftEntry {
        message Request {
                option (gogoproto.onlyone) = true;

                RegisterStorageNode register_storage_node = 1;
                RegisterLogStream register_log_stream = 2;
                UpdateLogStream update_log_stream = 3;
                Report report = 4;
                Commit commit = 5;
                TrimCommit trim_commit = 6;
                Seal seal = 7;
                Unseal unseal = 8;
        }
        uint64 node_index = 1;
        uint64 request_index = 2;
        uint64 applied_index = 3;
        Request request = 4[(gogoproto.nullable) = false];
}

message MetadataRepositoryDescriptor {
        message LocalLogStreamReplica {
            option (gogoproto.equal) = true;

            uint64 being_llsn = 1
                [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LLSN",
                 (gogoproto.customname) = "BeginLLSN"];
            uint64 end_llsn = 2
                [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LLSN",
                 (gogoproto.customname) = "EndLLSN"];
            uint64 known_next_glsn = 3
                [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
                 (gogoproto.customname) = "KnownNextGLSN"];
        }

        message LocalLogStreamReplicas {
                option (gogoproto.equal) = true;

                map<int32, LocalLogStreamReplica> replicas = 1[(gogoproto.castkey)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID"];
                LogStreamStatus status = 2;
        }

        message LogStreamDescriptor {
                uint64 trim_glsn = 1
                    [(gogoproto.casttype)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN",
                    (gogoproto.customname) = "TrimGLSN"];
                repeated GlobalLogStreamDescriptor global_log_streams = 2[(gogoproto.nullable) = true];
                map<uint64, LocalLogStreamReplicas> local_log_streams = 3[(gogoproto.castkey)="github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID"];
        }
        MetadataDescriptor metadata = 1[(gogoproto.nullable) = true];
        LogStreamDescriptor log_stream = 2[(gogoproto.nullable) = true];
}
