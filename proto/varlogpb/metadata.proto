syntax = "proto3";

package varlog.varlogpb;

import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/varlogpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// StorageNode is a structure to represent identifier and address of storage
// node.
message StorageNode {
  option (gogoproto.equal) = true;

  int32 storage_node_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID",
    (gogoproto.jsontag) = "storageNodeId"
  ];
  string address = 2;
}

message Replica {
  option (gogoproto.equal) = true;

  StorageNode storage_node = 1
      [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  int32 topic_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

enum StorageNodeStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  SN_STATUS_RUNNING = 0
      [(gogoproto.enumvalue_customname) = "StorageNodeStatusRunning"];
  SN_STATUS_DELETED = 1
      [(gogoproto.enumvalue_customname) = "StorageNodeStatusDeleted"];
}

enum LogStreamStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  LS_STATUS_RUNNING = 0
      [(gogoproto.enumvalue_customname) = "LogStreamStatusRunning"];
  LS_STATUS_SEALING = 1
      [(gogoproto.enumvalue_customname) = "LogStreamStatusSealing"];
  LS_STATUS_SEALED = 2
      [(gogoproto.enumvalue_customname) = "LogStreamStatusSealed"];
  LS_STATUS_DELETED = 3
      [(gogoproto.enumvalue_customname) = "LogStreamStatusDeleted"];
  LS_STATUS_UNSEALING = 4
      [(gogoproto.enumvalue_customname) = "LogStreamStatusUnsealing"];
}

enum TopicStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  TOPIC_STATUS_RUNNING = 0
      [(gogoproto.enumvalue_customname) = "TopicStatusRunning"];
  TOPIC_STATUS_DELETED = 1
      [(gogoproto.enumvalue_customname) = "TopicStatusDeleted"];
}

message StorageDescriptor {
  option (gogoproto.equal) = true;

  string path = 1;
  uint64 used = 2;
  uint64 total = 3;
}

message StorageNodeDescriptor {
  option (gogoproto.equal) = true;

  StorageNode storage_node = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.jsontag) = ""
  ];

  StorageNodeStatus status = 2;
  repeated StorageDescriptor storages = 3 [(gogoproto.nullable) = true];
}

message ReplicaDescriptor {
  option (gogoproto.equal) = true;

  int32 storage_node_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID",
    (gogoproto.jsontag) = "storageNodeId"
  ];
  string path = 2;
}

// FIXME (jun): LogStreamDescriptor
// - Similar types
// - Ambiguous naming
//
// Information for log stream, not replica
message LogStreamDescriptor {
  option (gogoproto.equal) = true;

  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID",
    (gogoproto.jsontag) = "topicId"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID",
    (gogoproto.jsontag) = "logStreamId"
  ];
  LogStreamStatus status = 3;
  repeated ReplicaDescriptor replicas = 4 [(gogoproto.nullable) = true];
  LogEntryMeta head = 5
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "head,omitempty"];
  LogEntryMeta tail = 6
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "tail,omitempty"];
}

message TopicDescriptor {
  option (gogoproto.equal) = true;

  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID",
    (gogoproto.jsontag) = "topicId"
  ];

  TopicStatus status = 2;

  repeated int32 log_streams = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.nullable) = true,
    (gogoproto.jsontag) = "logStreams,omitempty"
  ];
}

message MetadataDescriptor {
  option (gogoproto.equal) = true;

  uint64 applied_index = 1;
  repeated StorageNodeDescriptor storage_nodes = 2
      [(gogoproto.nullable) = true];
  repeated LogStreamDescriptor log_streams = 3 [(gogoproto.nullable) = true];
  repeated TopicDescriptor topics = 4 [(gogoproto.nullable) = true];
}

// StorageNodeMetadataDescriptor represents metadata of stroage node.
message StorageNodeMetadataDescriptor {
  // ClusterID is the identifier of the cluster that the storage node belongs
  // to.
  uint32 cluster_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID",
    (gogoproto.jsontag) = "clusterId"
  ];
  // StorageNode is detailed information about the storage node.
  StorageNodeDescriptor storage_node = 2 [(gogoproto.jsontag) = "storageNode"];
  repeated LogStreamMetadataDescriptor log_streams = 3
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "logStreams"];
  google.protobuf.Timestamp created_time = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "createdTime"
  ];
  google.protobuf.Timestamp updated_time = 5 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "updatedTime"
  ];
}

// FIXME (jun): LogStreamMetadataDescriptor
// - Similar types
// - Ambiguous naming
//
// maybe LogStreamReplica's information
message LogStreamMetadataDescriptor {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID",
    (gogoproto.jsontag) = "storageNodeId"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID",
    (gogoproto.jsontag) = "logStreamId"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID",
    (gogoproto.jsontag) = "topicId"
  ];
  LogStreamStatus status = 4;
  uint64 version = 5
      [(gogoproto.casttype) =
           "github.daumkakao.com/varlog/varlog/pkg/types.Version"];
  uint64 high_watermark = 6 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
    (gogoproto.jsontag) = "highWatermark"
  ];
  string path = 7;
  google.protobuf.Timestamp created_time = 8 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "createdTime"
  ];
  google.protobuf.Timestamp updated_time = 9 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "updatedTime"
  ];
}

// FIXME (jun): LogStreamReplicaDescriptor
// - Similar types
// - Ambiguous naming
//
// maybe LogStreamReplica's information
// TODO: LogStreamMetadataDescriptor + LogStreamReplicaDescriptor
message LogStreamReplicaDescriptor {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  int32 topic_id = 3 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  string address = 4;
}

message LogEntryMeta {
  option (gogoproto.equal) = true;

  int32 topic_id = 1 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
  int32 log_stream_id = 2 [
    (gogoproto.casttype) =
        "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
  uint64 glsn = 3 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "GLSN"
  ];
  uint64 llsn = 4 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
    (gogoproto.customname) = "LLSN"
  ];
}

message LogEntry {
  option (gogoproto.equal) = true;

  LogEntryMeta meta = 1
      [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  bytes data = 2;
}

message CommitContext {
  uint64 version = 1
      [(gogoproto.casttype) =
           "github.daumkakao.com/varlog/varlog/pkg/types.Version"];
  uint64 high_watermark = 2 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "HighWatermark"
  ];
  uint64 committed_glsn_begin = 3 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "CommittedGLSNBegin"
  ];
  uint64 committed_glsn_end = 4 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
    (gogoproto.customname) = "CommittedGLSNEnd"
  ];
  uint64 committed_llsn_begin = 5 [
    (gogoproto.casttype) = "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
    (gogoproto.customname) = "CommittedLLSNBegin"
  ];
}
