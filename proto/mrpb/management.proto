syntax = "proto3";

package varlog.mrpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/kakao/varlog/proto/mrpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// PeerInfo represents information about a RAFT peer.
message PeerInfo {
  // ClusterID is the identifier of the Varlog cluster.
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  // NodeID is the identifier of the metadata repository node.
  uint64 node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
  // URL is the RAFT endpoint of the metadata repository node.
  // It should be in the format of "http://<IP>:<Port>".
  string url = 3 [(gogoproto.customname) = "URL"];
}

// AddPeerRequest is a request message for the AddPeer RPC.
message AddPeerRequest {
  int32 cluster_id = 1 [
    deprecated = true,
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
  uint64 node_id = 2 [
    deprecated = true,
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
  string url = 3 [deprecated = true];

  PeerInfo peer = 4 [(gogoproto.nullable) = false];
}

// RemovePeerRequest is a request message for RemovePeer RPC.
message RemovePeerRequest {
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];

  uint64 node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
}

// GetClusterInfoRequest is a request message for GetClusterInfo RPC.
message GetClusterInfoRequest {
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
}

// ClusterInfo is a metadata representing the Raft cluster.
message ClusterInfo {
  message Member {
    string peer = 1;
    string endpoint = 2;
    bool learner = 3;
  }

  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID",
    (gogoproto.jsontag) = "clusterId"
  ];

  uint64 node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID",
    (gogoproto.jsontag) = "nodeId"
  ];

  uint64 leader = 3
    [(gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID"];

  int32 replication_factor = 4 [(gogoproto.jsontag) = "replicationFactor"];

  map<uint64, Member> members = 5
    [(gogoproto.castkey) = "github.com/kakao/varlog/pkg/types.NodeID"];

  // applied_index is the AppliedIndex of RAFT that is updated by changing
  // configuration of members. For example, AddPeer and RemovePeer result in
  // increasing applied_index.
  uint64 applied_index = 6 [(gogoproto.jsontag) = "appliedIndex"];
}

// GetClusterInfoResponse is a response message for GetClusterInfo RPC.
message GetClusterInfoResponse {
  ClusterInfo cluster_info = 1;
}

// Management service manages the Raft cluster of the Metadata Repository.
service Management {
  // AddPeer adds a new node to the Raft cluster.
  //
  // It takes an AddPeerRequest as an argument and checks the validity of the
  // given Node ID. If the Node ID is invalid, it returns a gRPC status code
  // "InvalidArgument". If the node is already a member or learner, it returns a
  // gRPC status code "AlreadyExists". Upon successful execution, this operation
  // returns an instance of google.protobuf.Empty.
  //
  // Note that users can cancel this operation, but cancellation does not
  // guarantee that the addition of a new peer will not be handled.
  //
  // TODO: Implement a check for the cluster ID.
  rpc AddPeer(AddPeerRequest) returns (google.protobuf.Empty) {}

  // RemovePeer removes a specific node from a Raft cluster.
  //
  // It takes a RemovePeerRequest as an argument and checks the validity of the
  // Node ID. If the Node ID is invalid, it returns a gRPC status code
  // "InvalidArgument". If the node is neither a member nor a learner in the
  // cluster, it returns a gRPC status code "NotFound". Upon successful
  // execution, this operation returns an instance of google.protobuf.Empty.
  //
  // Note that although users can cancel this operation, cancellation does not
  // guarantee that the node will not be removed.
  //
  // TODO: Implement a check for the cluster ID.
  rpc RemovePeer(RemovePeerRequest) returns (google.protobuf.Empty) {}

  // GetClusterInfo is a remote procedure used to retrieve information about the
  // Raft cluster, specifically the ClusterInfo. If the current node is not a
  // member of the cluster, it will fail and return the gRPC status code
  // "codes.Unavailable".
  //
  // TODO: Check if the cluster ID is the same as the current node's. If they
  // are not the same, return a proper gRPC status code.
  //
  // TODO: Define ClusterInfo, which should contain the Raft cluster metadata.
  // Some fields will be removed due to unmatched semantics.
  rpc GetClusterInfo(GetClusterInfoRequest) returns (GetClusterInfoResponse) {}
}
