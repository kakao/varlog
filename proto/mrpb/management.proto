syntax = "proto3";

package varlog.mrpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/kakao/varlog/proto/mrpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// AddPeerRequest is a request message for AddPeer RPC.
//
// TODO: TODO: Define a new message representing a new peer, such as "Peer" or
// "PeerInfo" and use it rather than primitive-type fields.
// See:
// - https://protobuf.dev/programming-guides/api/#dont-include-primitive-types
message AddPeerRequest {
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];

  uint64 node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];

  string url = 3;
}

// RemovePeerRequest is a request message for RemovePeer RPC.
message RemovePeerRequest {
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];

  uint64 node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
}

// GetClusterInfoRequest is a request message for GetClusterInfo RPC.
message GetClusterInfoRequest {
  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID"
  ];
}

// ClusterInfo is a metadata representing the Raft cluster.
message ClusterInfo {
  message Member {
    string peer = 1;
    string endpoint = 2;
    bool learner = 3;
  }

  int32 cluster_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.ClusterID",
    (gogoproto.customname) = "ClusterID",
    (gogoproto.jsontag) = "clusterId"
  ];

  uint64 node_id = 2 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID",
    (gogoproto.jsontag) = "nodeId"
  ];

  uint64 leader = 3
    [(gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID"];

  int32 replication_factor = 4 [(gogoproto.jsontag) = "replicationFactor"];

  map<uint64, Member> members = 5
    [(gogoproto.castkey) = "github.com/kakao/varlog/pkg/types.NodeID"];

  // applied_index is the AppliedIndex of RAFT that is updated by changing
  // configuration of members. For example, AddPeer and RemovePeer result in
  // increasing applied_index.
  uint64 applied_index = 6 [(gogoproto.jsontag) = "appliedIndex"];
}

// GetClusterInfoResponse is a response message for GetClusterInfo RPC.
message GetClusterInfoResponse {
  ClusterInfo cluster_info = 1;
}

// Management service manages the Raft cluster of the Metadata Repository.
service Management {
  // AddPeer is a remote procedure to add a new node to the Raft cluster. If the
  // node is already a member or learner, it fails and returns the gRPC status
  // code "AlreadyExists". Users can cancel this RPC, but it doesn't guarantee
  // that adding a new peer is not handled.
  //
  // TODO: Check if the cluster ID is the same as the current node's. If they
  // are not the same, return a proper gRPC status code.
  rpc AddPeer(AddPeerRequest) returns (google.protobuf.Empty) {}
  // RemovePeer is a remote procedure to remove a node from the Raft cluster. If
  // the node is neither a member nor a learner of the cluster, it fails and
  // returns the gRPC status code "NotFound". Users can cancel this RPC, but it
  // doesn't guarantee that the node will not be removed.
  //
  // TODO: Check if the cluster ID is the same as the current node's. If they
  // are not the same, return a proper gRPC status code.
  rpc RemovePeer(RemovePeerRequest) returns (google.protobuf.Empty) {}
  // GetClusterInfo is a remote procedure used to retrieve information about the
  // Raft cluster, specifically the ClusterInfo. If the current node is not a
  // member of the cluster, it will fail and return the gRPC status code
  // "codes.Unavailable".
  //
  // TODO: Check if the cluster ID is the same as the current node's. If they
  // are not the same, return a proper gRPC status code.
  //
  // TODO: Define ClusterInfo, which should contain the Raft cluster metadata.
  // Some fields will be removed due to unmatched semantics.
  rpc GetClusterInfo(GetClusterInfoRequest) returns (GetClusterInfoResponse) {}
}
