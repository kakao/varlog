// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/mrpb/raft_entry.proto

package mrpb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"

	github_daumkakao_com_varlog_varlog_pkg_types "github.daumkakao.com/varlog/varlog/pkg/types"
	snpb "github.daumkakao.com/varlog/varlog/proto/snpb"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegisterStorageNode struct {
	StorageNode          *varlogpb.StorageNodeDescriptor `protobuf:"bytes,1,opt,name=storage_node,json=storageNode,proto3" json:"storage_node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *RegisterStorageNode) Reset()         { *m = RegisterStorageNode{} }
func (m *RegisterStorageNode) String() string { return proto.CompactTextString(m) }
func (*RegisterStorageNode) ProtoMessage()    {}
func (*RegisterStorageNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{0}
}
func (m *RegisterStorageNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterStorageNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterStorageNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterStorageNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterStorageNode.Merge(m, src)
}
func (m *RegisterStorageNode) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RegisterStorageNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterStorageNode.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterStorageNode proto.InternalMessageInfo

func (m *RegisterStorageNode) GetStorageNode() *varlogpb.StorageNodeDescriptor {
	if m != nil {
		return m.StorageNode
	}
	return nil
}

type UnregisterStorageNode struct {
	StorageNodeID        github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,1,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *UnregisterStorageNode) Reset()         { *m = UnregisterStorageNode{} }
func (m *UnregisterStorageNode) String() string { return proto.CompactTextString(m) }
func (*UnregisterStorageNode) ProtoMessage()    {}
func (*UnregisterStorageNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{1}
}
func (m *UnregisterStorageNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnregisterStorageNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnregisterStorageNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnregisterStorageNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterStorageNode.Merge(m, src)
}
func (m *UnregisterStorageNode) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UnregisterStorageNode) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterStorageNode.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterStorageNode proto.InternalMessageInfo

func (m *UnregisterStorageNode) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

type RegisterLogStream struct {
	LogStream            *varlogpb.LogStreamDescriptor `protobuf:"bytes,1,opt,name=log_stream,json=logStream,proto3" json:"log_stream,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *RegisterLogStream) Reset()         { *m = RegisterLogStream{} }
func (m *RegisterLogStream) String() string { return proto.CompactTextString(m) }
func (*RegisterLogStream) ProtoMessage()    {}
func (*RegisterLogStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{2}
}
func (m *RegisterLogStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterLogStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterLogStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterLogStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterLogStream.Merge(m, src)
}
func (m *RegisterLogStream) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RegisterLogStream) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterLogStream.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterLogStream proto.InternalMessageInfo

func (m *RegisterLogStream) GetLogStream() *varlogpb.LogStreamDescriptor {
	if m != nil {
		return m.LogStream
	}
	return nil
}

type UnregisterLogStream struct {
	LogStreamID          github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID `protobuf:"varint,1,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *UnregisterLogStream) Reset()         { *m = UnregisterLogStream{} }
func (m *UnregisterLogStream) String() string { return proto.CompactTextString(m) }
func (*UnregisterLogStream) ProtoMessage()    {}
func (*UnregisterLogStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{3}
}
func (m *UnregisterLogStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnregisterLogStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnregisterLogStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnregisterLogStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterLogStream.Merge(m, src)
}
func (m *UnregisterLogStream) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UnregisterLogStream) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterLogStream.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterLogStream proto.InternalMessageInfo

func (m *UnregisterLogStream) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

type UpdateLogStream struct {
	LogStream            *varlogpb.LogStreamDescriptor `protobuf:"bytes,1,opt,name=log_stream,json=logStream,proto3" json:"log_stream,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *UpdateLogStream) Reset()         { *m = UpdateLogStream{} }
func (m *UpdateLogStream) String() string { return proto.CompactTextString(m) }
func (*UpdateLogStream) ProtoMessage()    {}
func (*UpdateLogStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{4}
}
func (m *UpdateLogStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLogStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLogStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLogStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLogStream.Merge(m, src)
}
func (m *UpdateLogStream) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UpdateLogStream) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLogStream.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLogStream proto.InternalMessageInfo

func (m *UpdateLogStream) GetLogStream() *varlogpb.LogStreamDescriptor {
	if m != nil {
		return m.LogStream
	}
	return nil
}

type Report struct {
	StorageNodeID        github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,1,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	UncommitReport       []*snpb.LogStreamUncommitReport                            `protobuf:"bytes,2,rep,name=uncommit_report,json=uncommitReport,proto3" json:"uncommit_report,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *Report) Reset()         { *m = Report{} }
func (m *Report) String() string { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()    {}
func (*Report) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{5}
}
func (m *Report) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Report) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Report.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Report) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Report.Merge(m, src)
}
func (m *Report) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Report) XXX_DiscardUnknown() {
	xxx_messageInfo_Report.DiscardUnknown(m)
}

var xxx_messageInfo_Report proto.InternalMessageInfo

func (m *Report) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

func (m *Report) GetUncommitReport() []*snpb.LogStreamUncommitReport {
	if m != nil {
		return m.UncommitReport
	}
	return nil
}

type Commit struct {
	NodeID               github_daumkakao_com_varlog_varlog_pkg_types.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.NodeID" json:"node_id,omitempty"`
	CreatedTime          time.Time                                           `protobuf:"bytes,2,opt,name=created_time,json=createdTime,proto3,stdtime" json:"created_time"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *Commit) Reset()         { *m = Commit{} }
func (m *Commit) String() string { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()    {}
func (*Commit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{6}
}
func (m *Commit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commit.Merge(m, src)
}
func (m *Commit) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Commit) XXX_DiscardUnknown() {
	xxx_messageInfo_Commit.DiscardUnknown(m)
}

var xxx_messageInfo_Commit proto.InternalMessageInfo

func (m *Commit) GetNodeID() github_daumkakao_com_varlog_varlog_pkg_types.NodeID {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *Commit) GetCreatedTime() time.Time {
	if m != nil {
		return m.CreatedTime
	}
	return time.Time{}
}

type Seal struct {
	LogStreamID          github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID `protobuf:"varint,1,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *Seal) Reset()         { *m = Seal{} }
func (m *Seal) String() string { return proto.CompactTextString(m) }
func (*Seal) ProtoMessage()    {}
func (*Seal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{7}
}
func (m *Seal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Seal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Seal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Seal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Seal.Merge(m, src)
}
func (m *Seal) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Seal) XXX_DiscardUnknown() {
	xxx_messageInfo_Seal.DiscardUnknown(m)
}

var xxx_messageInfo_Seal proto.InternalMessageInfo

func (m *Seal) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

type Unseal struct {
	LogStreamID          github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID `protobuf:"varint,1,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *Unseal) Reset()         { *m = Unseal{} }
func (m *Unseal) String() string { return proto.CompactTextString(m) }
func (*Unseal) ProtoMessage()    {}
func (*Unseal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{8}
}
func (m *Unseal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Unseal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Unseal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Unseal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unseal.Merge(m, src)
}
func (m *Unseal) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Unseal) XXX_DiscardUnknown() {
	xxx_messageInfo_Unseal.DiscardUnknown(m)
}

var xxx_messageInfo_Unseal proto.InternalMessageInfo

func (m *Unseal) GetLogStreamID() github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

type AddPeer struct {
	NodeID               github_daumkakao_com_varlog_varlog_pkg_types.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.NodeID" json:"node_id,omitempty"`
	Url                  string                                              `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	IsLearner            bool                                                `protobuf:"varint,3,opt,name=is_learner,json=isLearner,proto3" json:"is_learner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *AddPeer) Reset()         { *m = AddPeer{} }
func (m *AddPeer) String() string { return proto.CompactTextString(m) }
func (*AddPeer) ProtoMessage()    {}
func (*AddPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{9}
}
func (m *AddPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPeer.Merge(m, src)
}
func (m *AddPeer) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AddPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPeer.DiscardUnknown(m)
}

var xxx_messageInfo_AddPeer proto.InternalMessageInfo

func (m *AddPeer) GetNodeID() github_daumkakao_com_varlog_varlog_pkg_types.NodeID {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *AddPeer) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AddPeer) GetIsLearner() bool {
	if m != nil {
		return m.IsLearner
	}
	return false
}

type RemovePeer struct {
	NodeID               github_daumkakao_com_varlog_varlog_pkg_types.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.NodeID" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *RemovePeer) Reset()         { *m = RemovePeer{} }
func (m *RemovePeer) String() string { return proto.CompactTextString(m) }
func (*RemovePeer) ProtoMessage()    {}
func (*RemovePeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{10}
}
func (m *RemovePeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePeer.Merge(m, src)
}
func (m *RemovePeer) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RemovePeer) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePeer.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePeer proto.InternalMessageInfo

func (m *RemovePeer) GetNodeID() github_daumkakao_com_varlog_varlog_pkg_types.NodeID {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type Endpoint struct {
	NodeID               github_daumkakao_com_varlog_varlog_pkg_types.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.NodeID" json:"node_id,omitempty"`
	Url                  string                                              `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *Endpoint) Reset()         { *m = Endpoint{} }
func (m *Endpoint) String() string { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()    {}
func (*Endpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{11}
}
func (m *Endpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Endpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Endpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Endpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endpoint.Merge(m, src)
}
func (m *Endpoint) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Endpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Endpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Endpoint proto.InternalMessageInfo

func (m *Endpoint) GetNodeID() github_daumkakao_com_varlog_varlog_pkg_types.NodeID {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *Endpoint) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type RaftEntry struct {
	NodeIndex            uint64            `protobuf:"varint,1,opt,name=node_index,json=nodeIndex,proto3" json:"node_index,omitempty"`
	RequestIndex         uint64            `protobuf:"varint,2,opt,name=request_index,json=requestIndex,proto3" json:"request_index,omitempty"`
	AppliedIndex         uint64            `protobuf:"varint,3,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	Request              RaftEntry_Request `protobuf:"bytes,4,opt,name=request,proto3" json:"request"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RaftEntry) Reset()         { *m = RaftEntry{} }
func (m *RaftEntry) String() string { return proto.CompactTextString(m) }
func (*RaftEntry) ProtoMessage()    {}
func (*RaftEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{12}
}
func (m *RaftEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftEntry.Merge(m, src)
}
func (m *RaftEntry) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RaftEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RaftEntry proto.InternalMessageInfo

func (m *RaftEntry) GetNodeIndex() uint64 {
	if m != nil {
		return m.NodeIndex
	}
	return 0
}

func (m *RaftEntry) GetRequestIndex() uint64 {
	if m != nil {
		return m.RequestIndex
	}
	return 0
}

func (m *RaftEntry) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *RaftEntry) GetRequest() RaftEntry_Request {
	if m != nil {
		return m.Request
	}
	return RaftEntry_Request{}
}

type RaftEntry_Request struct {
	RegisterStorageNode   *RegisterStorageNode   `protobuf:"bytes,1,opt,name=register_storage_node,json=registerStorageNode,proto3" json:"register_storage_node,omitempty"`
	UnregisterStorageNode *UnregisterStorageNode `protobuf:"bytes,2,opt,name=unregister_storage_node,json=unregisterStorageNode,proto3" json:"unregister_storage_node,omitempty"`
	RegisterLogStream     *RegisterLogStream     `protobuf:"bytes,3,opt,name=register_log_stream,json=registerLogStream,proto3" json:"register_log_stream,omitempty"`
	UnregisterLogStream   *UnregisterLogStream   `protobuf:"bytes,4,opt,name=unregister_log_stream,json=unregisterLogStream,proto3" json:"unregister_log_stream,omitempty"`
	UpdateLogStream       *UpdateLogStream       `protobuf:"bytes,5,opt,name=update_log_stream,json=updateLogStream,proto3" json:"update_log_stream,omitempty"`
	Report                *Report                `protobuf:"bytes,6,opt,name=report,proto3" json:"report,omitempty"`
	Commit                *Commit                `protobuf:"bytes,7,opt,name=commit,proto3" json:"commit,omitempty"`
	Seal                  *Seal                  `protobuf:"bytes,8,opt,name=seal,proto3" json:"seal,omitempty"`
	Unseal                *Unseal                `protobuf:"bytes,9,opt,name=unseal,proto3" json:"unseal,omitempty"`
	AddPeer               *AddPeer               `protobuf:"bytes,10,opt,name=add_peer,json=addPeer,proto3" json:"add_peer,omitempty"`
	RemovePeer            *RemovePeer            `protobuf:"bytes,11,opt,name=remove_peer,json=removePeer,proto3" json:"remove_peer,omitempty"`
	Endpoint              *Endpoint              `protobuf:"bytes,12,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *RaftEntry_Request) Reset()         { *m = RaftEntry_Request{} }
func (m *RaftEntry_Request) String() string { return proto.CompactTextString(m) }
func (*RaftEntry_Request) ProtoMessage()    {}
func (*RaftEntry_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_9661c8402dd472d1, []int{12, 0}
}
func (m *RaftEntry_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftEntry_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftEntry_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftEntry_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftEntry_Request.Merge(m, src)
}
func (m *RaftEntry_Request) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RaftEntry_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftEntry_Request.DiscardUnknown(m)
}

var xxx_messageInfo_RaftEntry_Request proto.InternalMessageInfo

func (m *RaftEntry_Request) GetRegisterStorageNode() *RegisterStorageNode {
	if m != nil {
		return m.RegisterStorageNode
	}
	return nil
}

func (m *RaftEntry_Request) GetUnregisterStorageNode() *UnregisterStorageNode {
	if m != nil {
		return m.UnregisterStorageNode
	}
	return nil
}

func (m *RaftEntry_Request) GetRegisterLogStream() *RegisterLogStream {
	if m != nil {
		return m.RegisterLogStream
	}
	return nil
}

func (m *RaftEntry_Request) GetUnregisterLogStream() *UnregisterLogStream {
	if m != nil {
		return m.UnregisterLogStream
	}
	return nil
}

func (m *RaftEntry_Request) GetUpdateLogStream() *UpdateLogStream {
	if m != nil {
		return m.UpdateLogStream
	}
	return nil
}

func (m *RaftEntry_Request) GetReport() *Report {
	if m != nil {
		return m.Report
	}
	return nil
}

func (m *RaftEntry_Request) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *RaftEntry_Request) GetSeal() *Seal {
	if m != nil {
		return m.Seal
	}
	return nil
}

func (m *RaftEntry_Request) GetUnseal() *Unseal {
	if m != nil {
		return m.Unseal
	}
	return nil
}

func (m *RaftEntry_Request) GetAddPeer() *AddPeer {
	if m != nil {
		return m.AddPeer
	}
	return nil
}

func (m *RaftEntry_Request) GetRemovePeer() *RemovePeer {
	if m != nil {
		return m.RemovePeer
	}
	return nil
}

func (m *RaftEntry_Request) GetEndpoint() *Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterStorageNode)(nil), "varlog.mrpb.RegisterStorageNode")
	proto.RegisterType((*UnregisterStorageNode)(nil), "varlog.mrpb.UnregisterStorageNode")
	proto.RegisterType((*RegisterLogStream)(nil), "varlog.mrpb.RegisterLogStream")
	proto.RegisterType((*UnregisterLogStream)(nil), "varlog.mrpb.UnregisterLogStream")
	proto.RegisterType((*UpdateLogStream)(nil), "varlog.mrpb.UpdateLogStream")
	proto.RegisterType((*Report)(nil), "varlog.mrpb.Report")
	proto.RegisterType((*Commit)(nil), "varlog.mrpb.Commit")
	proto.RegisterType((*Seal)(nil), "varlog.mrpb.Seal")
	proto.RegisterType((*Unseal)(nil), "varlog.mrpb.Unseal")
	proto.RegisterType((*AddPeer)(nil), "varlog.mrpb.AddPeer")
	proto.RegisterType((*RemovePeer)(nil), "varlog.mrpb.RemovePeer")
	proto.RegisterType((*Endpoint)(nil), "varlog.mrpb.Endpoint")
	proto.RegisterType((*RaftEntry)(nil), "varlog.mrpb.RaftEntry")
	proto.RegisterType((*RaftEntry_Request)(nil), "varlog.mrpb.RaftEntry.Request")
}

func init() { proto.RegisterFile("proto/mrpb/raft_entry.proto", fileDescriptor_9661c8402dd472d1) }

var fileDescriptor_9661c8402dd472d1 = []byte{
	// 909 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0xae, 0xb3, 0xdb, 0xfd, 0x39, 0x9b, 0x25, 0xc4, 0x4b, 0x14, 0x2b, 0xc0, 0x3a, 0x32, 0x3f,
	0xaa, 0x84, 0x6a, 0x0b, 0x7a, 0x53, 0x15, 0x09, 0xa9, 0x4b, 0x2b, 0x88, 0x28, 0x2d, 0x9a, 0x24,
	0x37, 0x11, 0xc2, 0x9a, 0xcd, 0x4c, 0x5c, 0x2b, 0xb6, 0xc7, 0x8c, 0xc7, 0x6d, 0xf3, 0x02, 0x5c,
	0xf7, 0x8a, 0xeb, 0xbe, 0x00, 0x77, 0x3c, 0x44, 0x2e, 0xfb, 0x04, 0x8b, 0xb4, 0xbc, 0x05, 0x12,
	0x12, 0xf2, 0xcc, 0xd8, 0x6b, 0x67, 0x7d, 0x41, 0x2f, 0xd2, 0x5e, 0xad, 0x3d, 0xe7, 0x3b, 0x3f,
	0xdf, 0x19, 0x9f, 0xef, 0x2c, 0x7c, 0x98, 0x72, 0x26, 0x98, 0x17, 0xf3, 0x74, 0xee, 0x71, 0x7c,
	0x26, 0x7c, 0x9a, 0x08, 0x7e, 0xe1, 0xca, 0x53, 0x73, 0xf4, 0x0c, 0xf3, 0x88, 0x05, 0x6e, 0x61,
	0xdd, 0xb3, 0x03, 0xc6, 0x82, 0x88, 0x7a, 0xd2, 0x34, 0xcf, 0xcf, 0x3c, 0x11, 0xc6, 0x34, 0x13,
	0x38, 0x4e, 0x15, 0x7a, 0xef, 0x76, 0x10, 0x8a, 0xa7, 0xf9, 0xdc, 0x3d, 0x65, 0xb1, 0x17, 0xb0,
	0x80, 0xad, 0x90, 0xc5, 0x9b, 0xca, 0x53, 0x3c, 0x69, 0xf8, 0xae, 0x0a, 0x9e, 0xce, 0xbd, 0x98,
	0x0a, 0x4c, 0xb0, 0xc0, 0xda, 0x30, 0xcd, 0x92, 0x74, 0xee, 0x45, 0x2c, 0xf0, 0x33, 0xc1, 0x29,
	0x8e, 0x7d, 0x4e, 0x53, 0xc6, 0x05, 0xe5, 0xca, 0xee, 0x9c, 0xc1, 0x04, 0xd1, 0x20, 0xcc, 0x04,
	0xe5, 0x87, 0x82, 0x71, 0x1c, 0xd0, 0xc7, 0x8c, 0x50, 0xf3, 0x09, 0x6c, 0x66, 0xea, 0xd5, 0x4f,
	0x18, 0xa1, 0x96, 0xb1, 0x6f, 0xdc, 0x1a, 0x7d, 0xf5, 0xb9, 0xab, 0x39, 0x94, 0xd9, 0xdc, 0x9a,
	0xcf, 0x03, 0x9a, 0x9d, 0xf2, 0x30, 0x15, 0x8c, 0xcf, 0xba, 0x97, 0x0b, 0xdb, 0x40, 0xa3, 0x6c,
	0x65, 0x74, 0x5e, 0x1a, 0xb0, 0x73, 0x9c, 0xf0, 0x96, 0x54, 0xcf, 0x61, 0xab, 0x9e, 0xca, 0x0f,
	0x89, 0xcc, 0x36, 0x9e, 0x3d, 0x59, 0x2e, 0xec, 0x71, 0x0d, 0x79, 0xf0, 0xe0, 0x9f, 0x85, 0x7d,
	0x4f, 0xf7, 0x85, 0xe0, 0x3c, 0x3e, 0xc7, 0xe7, 0x98, 0xc9, 0x0e, 0xa9, 0x7a, 0xca, 0x9f, 0xf4,
	0x3c, 0xf0, 0xc4, 0x45, 0x4a, 0x33, 0xb7, 0xe1, 0x8d, 0xc6, 0xb5, 0x82, 0x0e, 0x88, 0xf3, 0x0b,
	0x6c, 0x97, 0xd4, 0x1f, 0xb1, 0xe0, 0x50, 0xb6, 0xc7, 0x3c, 0x00, 0x58, 0x35, 0x4b, 0xd3, 0xfe,
	0x74, 0x8d, 0x76, 0x85, 0x5f, 0x23, 0x3d, 0x8c, 0x4a, 0x93, 0xf3, 0x9b, 0x01, 0x93, 0x15, 0xe5,
	0x55, 0x0a, 0x06, 0xe3, 0xda, 0x7d, 0x54, 0x74, 0x7f, 0x58, 0x2e, 0xec, 0x51, 0x85, 0x92, 0x64,
	0xef, 0xbe, 0x11, 0xd9, 0x9a, 0x2f, 0x1a, 0x55, 0x65, 0x1c, 0x10, 0xe7, 0x67, 0xd8, 0x3a, 0x4e,
	0x09, 0x16, 0xf4, 0x5a, 0x68, 0xbe, 0x36, 0xa0, 0x87, 0xe4, 0x47, 0xf5, 0xce, 0xae, 0xd2, 0xfc,
	0x11, 0xb6, 0xf2, 0xe4, 0x94, 0xc5, 0x71, 0x28, 0xf4, 0x07, 0x6e, 0x6d, 0xec, 0x77, 0xea, 0x9c,
	0x8a, 0x31, 0x58, 0xf1, 0x39, 0xd6, 0x60, 0x55, 0x37, 0x7a, 0x2f, 0x6f, 0xbc, 0x3b, 0x7f, 0x18,
	0xd0, 0xfb, 0x56, 0x1e, 0x98, 0x27, 0xd0, 0xaf, 0x53, 0xe9, 0xce, 0xee, 0x2f, 0x17, 0x76, 0xaf,
	0xe2, 0x70, 0xe7, 0x8d, 0x38, 0xe8, 0xe2, 0x7b, 0x89, 0xaa, 0xfa, 0x3b, 0xd8, 0x3c, 0xe5, 0x14,
	0x0b, 0x4a, 0xfc, 0x62, 0xfc, 0xad, 0x0d, 0x79, 0x0d, 0x7b, 0xae, 0xd2, 0x06, 0xb7, 0x9c, 0x78,
	0xf7, 0xa8, 0xd4, 0x86, 0xd9, 0xe0, 0x72, 0x61, 0xdf, 0x78, 0xf9, 0x57, 0x31, 0x5c, 0xda, 0xb3,
	0xb0, 0x39, 0xcf, 0xa1, 0x7b, 0x48, 0x71, 0xf4, 0xf6, 0xbf, 0xac, 0x0b, 0xe8, 0x1d, 0x27, 0xd9,
	0x3b, 0x49, 0xfd, 0xbb, 0x01, 0xfd, 0xfb, 0x84, 0xfc, 0x44, 0x29, 0xbf, 0xd6, 0x4b, 0x7a, 0x1f,
	0x3a, 0x39, 0x8f, 0xe4, 0xdd, 0x0c, 0x51, 0xf1, 0x68, 0x7e, 0x0c, 0x10, 0x66, 0x7e, 0x44, 0x31,
	0x4f, 0x28, 0xb7, 0x3a, 0xfb, 0xc6, 0xad, 0x01, 0x1a, 0x86, 0xd9, 0x23, 0x75, 0xe0, 0x3c, 0x05,
	0x40, 0x34, 0x66, 0xcf, 0xe8, 0x75, 0x97, 0xe6, 0xbc, 0x80, 0xc1, 0xc3, 0x84, 0xa4, 0x2c, 0x4c,
	0xc4, 0xdb, 0x6d, 0x81, 0xf3, 0x67, 0x1f, 0x86, 0x08, 0x9f, 0x89, 0x87, 0xc5, 0x7e, 0x2b, 0x1a,
	0xa2, 0x72, 0x27, 0x84, 0xbe, 0x50, 0xe9, 0xd1, 0x50, 0xfa, 0x16, 0x07, 0xe6, 0x27, 0x30, 0xe6,
	0xf4, 0xd7, 0x9c, 0x66, 0x42, 0x23, 0x36, 0x24, 0x62, 0x53, 0x1f, 0x56, 0x20, 0x9c, 0xa6, 0x51,
	0x48, 0x89, 0x06, 0x75, 0x14, 0x48, 0x1f, 0x2a, 0xd0, 0x37, 0xd0, 0xd7, 0x4e, 0x56, 0x57, 0xce,
	0xca, 0xd4, 0xad, 0x2d, 0x55, 0xb7, 0xaa, 0xc8, 0x45, 0x0a, 0x25, 0xc5, 0xea, 0x06, 0x2a, 0x9d,
	0xf6, 0xfe, 0xbd, 0x09, 0x7d, 0x6d, 0x32, 0x8f, 0x60, 0xa7, 0x94, 0x66, 0xbf, 0x65, 0xd5, 0xed,
	0x37, 0x23, 0xaf, 0xef, 0x2d, 0x34, 0x69, 0x5b, 0x66, 0x27, 0xb0, 0x9b, 0x27, 0xed, 0x71, 0xd5,
	0x74, 0x3b, 0x8d, 0xb8, 0xad, 0x1b, 0x11, 0xed, 0xe4, 0xad, 0x8b, 0xf2, 0x31, 0x54, 0x29, 0xfd,
	0x9a, 0x78, 0x77, 0xda, 0x3a, 0x71, 0x75, 0xe9, 0xa0, 0xed, 0xf5, 0x3d, 0x74, 0x04, 0xb5, 0x44,
	0xf5, 0x88, 0xdd, 0x96, 0x0e, 0xb4, 0x2c, 0x32, 0x34, 0xc9, 0x5b, 0xb6, 0xdb, 0xf7, 0xb0, 0x9d,
	0xcb, 0x65, 0x53, 0x8f, 0x78, 0x53, 0x46, 0xfc, 0xa8, 0x19, 0xb1, 0xb9, 0x92, 0xd0, 0x56, 0x7e,
	0x65, 0x47, 0x7d, 0x01, 0x3d, 0xad, 0xe5, 0x3d, 0xe9, 0x3e, 0xb9, 0x42, 0x51, 0x4a, 0xb7, 0x86,
	0x14, 0x60, 0x25, 0xe1, 0x56, 0xbf, 0x05, 0xac, 0xc4, 0x1c, 0x69, 0x88, 0xf9, 0x19, 0x74, 0x0b,
	0xd1, 0xb2, 0x06, 0x12, 0xba, 0xdd, 0x80, 0x16, 0x42, 0x8a, 0xa4, 0xb9, 0x88, 0x99, 0x4b, 0x75,
	0xb3, 0x86, 0x2d, 0x31, 0x95, 0xf0, 0x21, 0x0d, 0x31, 0x3d, 0x18, 0x60, 0x42, 0xfc, 0x94, 0x52,
	0x6e, 0x81, 0x84, 0x7f, 0xd0, 0x80, 0x6b, 0xad, 0x42, 0x7d, 0xac, 0x45, 0xeb, 0x2e, 0x8c, 0xb8,
	0xd4, 0x09, 0xe5, 0x33, 0x92, 0x3e, 0xbb, 0x57, 0x38, 0x96, 0x3a, 0x82, 0x80, 0xaf, 0x34, 0xe5,
	0x4b, 0x18, 0x50, 0x3d, 0xf7, 0xd6, 0xa6, 0x74, 0xdb, 0x69, 0xb8, 0x95, 0xa2, 0x80, 0x2a, 0xd8,
	0xbd, 0xee, 0xe5, 0x2b, 0xdb, 0x98, 0x7d, 0x7d, 0xb9, 0x9c, 0x1a, 0xaf, 0x97, 0x53, 0xe3, 0xd5,
	0xdf, 0x53, 0xe3, 0xe4, 0xf6, 0xff, 0xd1, 0x84, 0xea, 0x0f, 0xed, 0xbc, 0x27, 0x9f, 0xef, 0xfc,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x10, 0xfe, 0xfd, 0xc0, 0xe5, 0x0a, 0x00, 0x00,
}

func (m *RegisterStorageNode) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterStorageNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterStorageNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StorageNode != nil {
		{
			size, err := m.StorageNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnregisterStorageNode) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnregisterStorageNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnregisterStorageNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisterLogStream) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterLogStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterLogStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogStream != nil {
		{
			size, err := m.LogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnregisterLogStream) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnregisterLogStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnregisterLogStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogStreamID != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateLogStream) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLogStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLogStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogStream != nil {
		{
			size, err := m.LogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Report) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Report) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Report) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UncommitReport) > 0 {
		for iNdEx := len(m.UncommitReport) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UncommitReport[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftEntry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Commit) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commit) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintRaftEntry(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	if m.NodeID != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Seal) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Seal) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Seal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogStreamID != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Unseal) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unseal) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Unseal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogStreamID != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddPeer) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsLearner {
		i--
		if m.IsLearner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintRaftEntry(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if m.NodeID != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemovePeer) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodeID != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Endpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Endpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintRaftEntry(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if m.NodeID != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RaftEntry) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftEntry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.AppliedIndex != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.AppliedIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.RequestIndex != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.RequestIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.NodeIndex != 0 {
		i = encodeVarintRaftEntry(dAtA, i, uint64(m.NodeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RaftEntry_Request) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftEntry_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftEntry_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Endpoint != nil {
		{
			size, err := m.Endpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RemovePeer != nil {
		{
			size, err := m.RemovePeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.AddPeer != nil {
		{
			size, err := m.AddPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Unseal != nil {
		{
			size, err := m.Unseal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Seal != nil {
		{
			size, err := m.Seal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Commit != nil {
		{
			size, err := m.Commit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Report != nil {
		{
			size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UpdateLogStream != nil {
		{
			size, err := m.UpdateLogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.UnregisterLogStream != nil {
		{
			size, err := m.UnregisterLogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RegisterLogStream != nil {
		{
			size, err := m.RegisterLogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UnregisterStorageNode != nil {
		{
			size, err := m.UnregisterStorageNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RegisterStorageNode != nil {
		{
			size, err := m.RegisterStorageNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaftEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterStorageNode) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageNode != nil {
		l = m.StorageNode.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnregisterStorageNode) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageNodeID != 0 {
		n += 1 + sovRaftEntry(uint64(m.StorageNodeID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterLogStream) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogStream != nil {
		l = m.LogStream.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnregisterLogStream) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogStreamID != 0 {
		n += 1 + sovRaftEntry(uint64(m.LogStreamID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateLogStream) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogStream != nil {
		l = m.LogStream.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Report) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageNodeID != 0 {
		n += 1 + sovRaftEntry(uint64(m.StorageNodeID))
	}
	if len(m.UncommitReport) > 0 {
		for _, e := range m.UncommitReport {
			l = e.ProtoSize()
			n += 1 + l + sovRaftEntry(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Commit) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovRaftEntry(uint64(m.NodeID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedTime)
	n += 1 + l + sovRaftEntry(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Seal) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogStreamID != 0 {
		n += 1 + sovRaftEntry(uint64(m.LogStreamID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Unseal) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogStreamID != 0 {
		n += 1 + sovRaftEntry(uint64(m.LogStreamID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPeer) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovRaftEntry(uint64(m.NodeID))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.IsLearner {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemovePeer) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovRaftEntry(uint64(m.NodeID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Endpoint) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovRaftEntry(uint64(m.NodeID))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftEntry) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeIndex != 0 {
		n += 1 + sovRaftEntry(uint64(m.NodeIndex))
	}
	if m.RequestIndex != 0 {
		n += 1 + sovRaftEntry(uint64(m.RequestIndex))
	}
	if m.AppliedIndex != 0 {
		n += 1 + sovRaftEntry(uint64(m.AppliedIndex))
	}
	l = m.Request.ProtoSize()
	n += 1 + l + sovRaftEntry(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftEntry_Request) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterStorageNode != nil {
		l = m.RegisterStorageNode.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.UnregisterStorageNode != nil {
		l = m.UnregisterStorageNode.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.RegisterLogStream != nil {
		l = m.RegisterLogStream.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.UnregisterLogStream != nil {
		l = m.UnregisterLogStream.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.UpdateLogStream != nil {
		l = m.UpdateLogStream.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.Report != nil {
		l = m.Report.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.Commit != nil {
		l = m.Commit.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.Seal != nil {
		l = m.Seal.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.Unseal != nil {
		l = m.Unseal.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.AddPeer != nil {
		l = m.AddPeer.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.RemovePeer != nil {
		l = m.RemovePeer.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.Endpoint != nil {
		l = m.Endpoint.ProtoSize()
		n += 1 + l + sovRaftEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftEntry(x uint64) (n int) {
	return sovRaftEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RaftEntry_Request) GetValue() interface{} {
	if this.RegisterStorageNode != nil {
		return this.RegisterStorageNode
	}
	if this.UnregisterStorageNode != nil {
		return this.UnregisterStorageNode
	}
	if this.RegisterLogStream != nil {
		return this.RegisterLogStream
	}
	if this.UnregisterLogStream != nil {
		return this.UnregisterLogStream
	}
	if this.UpdateLogStream != nil {
		return this.UpdateLogStream
	}
	if this.Report != nil {
		return this.Report
	}
	if this.Commit != nil {
		return this.Commit
	}
	if this.Seal != nil {
		return this.Seal
	}
	if this.Unseal != nil {
		return this.Unseal
	}
	if this.AddPeer != nil {
		return this.AddPeer
	}
	if this.RemovePeer != nil {
		return this.RemovePeer
	}
	if this.Endpoint != nil {
		return this.Endpoint
	}
	return nil
}

func (this *RaftEntry_Request) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *RegisterStorageNode:
		this.RegisterStorageNode = vt
	case *UnregisterStorageNode:
		this.UnregisterStorageNode = vt
	case *RegisterLogStream:
		this.RegisterLogStream = vt
	case *UnregisterLogStream:
		this.UnregisterLogStream = vt
	case *UpdateLogStream:
		this.UpdateLogStream = vt
	case *Report:
		this.Report = vt
	case *Commit:
		this.Commit = vt
	case *Seal:
		this.Seal = vt
	case *Unseal:
		this.Unseal = vt
	case *AddPeer:
		this.AddPeer = vt
	case *RemovePeer:
		this.RemovePeer = vt
	case *Endpoint:
		this.Endpoint = vt
	default:
		return false
	}
	return true
}
func (m *RegisterStorageNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterStorageNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterStorageNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageNode == nil {
				m.StorageNode = &varlogpb.StorageNodeDescriptor{}
			}
			if err := m.StorageNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnregisterStorageNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterStorageNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterStorageNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterLogStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterLogStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterLogStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogStream == nil {
				m.LogStream = &varlogpb.LogStreamDescriptor{}
			}
			if err := m.LogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnregisterLogStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterLogStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterLogStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLogStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLogStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLogStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogStream == nil {
				m.LogStream = &varlogpb.LogStreamDescriptor{}
			}
			if err := m.LogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Report) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Report: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Report: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncommitReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UncommitReport = append(m.UncommitReport, &snpb.LogStreamUncommitReport{})
			if err := m.UncommitReport[len(m.UncommitReport)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Commit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_daumkakao_com_varlog_varlog_pkg_types.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Seal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Seal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Seal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unseal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unseal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unseal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_daumkakao_com_varlog_varlog_pkg_types.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLearner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLearner = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_daumkakao_com_varlog_varlog_pkg_types.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_daumkakao_com_varlog_varlog_pkg_types.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIndex", wireType)
			}
			m.NodeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIndex", wireType)
			}
			m.RequestIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftEntry_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterStorageNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisterStorageNode == nil {
				m.RegisterStorageNode = &RegisterStorageNode{}
			}
			if err := m.RegisterStorageNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnregisterStorageNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnregisterStorageNode == nil {
				m.UnregisterStorageNode = &UnregisterStorageNode{}
			}
			if err := m.UnregisterStorageNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterLogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisterLogStream == nil {
				m.RegisterLogStream = &RegisterLogStream{}
			}
			if err := m.RegisterLogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnregisterLogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnregisterLogStream == nil {
				m.UnregisterLogStream = &UnregisterLogStream{}
			}
			if err := m.UnregisterLogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateLogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateLogStream == nil {
				m.UpdateLogStream = &UpdateLogStream{}
			}
			if err := m.UpdateLogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Report == nil {
				m.Report = &Report{}
			}
			if err := m.Report.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commit == nil {
				m.Commit = &Commit{}
			}
			if err := m.Commit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Seal == nil {
				m.Seal = &Seal{}
			}
			if err := m.Seal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unseal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unseal == nil {
				m.Unseal = &Unseal{}
			}
			if err := m.Unseal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddPeer == nil {
				m.AddPeer = &AddPeer{}
			}
			if err := m.AddPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovePeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovePeer == nil {
				m.RemovePeer = &RemovePeer{}
			}
			if err := m.RemovePeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoint == nil {
				m.Endpoint = &Endpoint{}
			}
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftEntry = fmt.Errorf("proto: unexpected end of group")
)
