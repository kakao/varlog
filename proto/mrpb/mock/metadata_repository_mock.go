// Code generated by MockGen. DO NOT EDIT.
// Source: github.daumkakao.com/varlog/varlog/proto/mrpb (interfaces: MetadataRepositoryServiceClient,MetadataRepositoryServiceServer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	mrpb "github.daumkakao.com/varlog/varlog/proto/mrpb"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMetadataRepositoryServiceClient is a mock of MetadataRepositoryServiceClient interface
type MockMetadataRepositoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataRepositoryServiceClientMockRecorder
}

// MockMetadataRepositoryServiceClientMockRecorder is the mock recorder for MockMetadataRepositoryServiceClient
type MockMetadataRepositoryServiceClientMockRecorder struct {
	mock *MockMetadataRepositoryServiceClient
}

// NewMockMetadataRepositoryServiceClient creates a new mock instance
func NewMockMetadataRepositoryServiceClient(ctrl *gomock.Controller) *MockMetadataRepositoryServiceClient {
	mock := &MockMetadataRepositoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetadataRepositoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataRepositoryServiceClient) EXPECT() *MockMetadataRepositoryServiceClientMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method
func (m *MockMetadataRepositoryServiceClient) GetMetadata(arg0 context.Context, arg1 *mrpb.GetMetadataRequest, arg2 ...grpc.CallOption) (*mrpb.GetMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetadata", varargs...)
	ret0, _ := ret[0].(*mrpb.GetMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockMetadataRepositoryServiceClientMockRecorder) GetMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockMetadataRepositoryServiceClient)(nil).GetMetadata), varargs...)
}

// RegisterLogStream mocks base method
func (m *MockMetadataRepositoryServiceClient) RegisterLogStream(arg0 context.Context, arg1 *mrpb.LogStreamRequest, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterLogStream", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterLogStream indicates an expected call of RegisterLogStream
func (mr *MockMetadataRepositoryServiceClientMockRecorder) RegisterLogStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterLogStream", reflect.TypeOf((*MockMetadataRepositoryServiceClient)(nil).RegisterLogStream), varargs...)
}

// RegisterStorageNode mocks base method
func (m *MockMetadataRepositoryServiceClient) RegisterStorageNode(arg0 context.Context, arg1 *mrpb.StorageNodeRequest, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterStorageNode", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterStorageNode indicates an expected call of RegisterStorageNode
func (mr *MockMetadataRepositoryServiceClientMockRecorder) RegisterStorageNode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStorageNode", reflect.TypeOf((*MockMetadataRepositoryServiceClient)(nil).RegisterStorageNode), varargs...)
}

// Seal mocks base method
func (m *MockMetadataRepositoryServiceClient) Seal(arg0 context.Context, arg1 *mrpb.SealRequest, arg2 ...grpc.CallOption) (*mrpb.SealResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Seal", varargs...)
	ret0, _ := ret[0].(*mrpb.SealResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seal indicates an expected call of Seal
func (mr *MockMetadataRepositoryServiceClientMockRecorder) Seal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockMetadataRepositoryServiceClient)(nil).Seal), varargs...)
}

// UnregisterLogStream mocks base method
func (m *MockMetadataRepositoryServiceClient) UnregisterLogStream(arg0 context.Context, arg1 *mrpb.LogStreamRequest, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnregisterLogStream", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterLogStream indicates an expected call of UnregisterLogStream
func (mr *MockMetadataRepositoryServiceClientMockRecorder) UnregisterLogStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterLogStream", reflect.TypeOf((*MockMetadataRepositoryServiceClient)(nil).UnregisterLogStream), varargs...)
}

// UnregisterStorageNode mocks base method
func (m *MockMetadataRepositoryServiceClient) UnregisterStorageNode(arg0 context.Context, arg1 *mrpb.StorageNodeRequest, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnregisterStorageNode", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterStorageNode indicates an expected call of UnregisterStorageNode
func (mr *MockMetadataRepositoryServiceClientMockRecorder) UnregisterStorageNode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterStorageNode", reflect.TypeOf((*MockMetadataRepositoryServiceClient)(nil).UnregisterStorageNode), varargs...)
}

// Unseal mocks base method
func (m *MockMetadataRepositoryServiceClient) Unseal(arg0 context.Context, arg1 *mrpb.UnsealRequest, arg2 ...grpc.CallOption) (*mrpb.UnsealResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unseal", varargs...)
	ret0, _ := ret[0].(*mrpb.UnsealResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unseal indicates an expected call of Unseal
func (mr *MockMetadataRepositoryServiceClientMockRecorder) Unseal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unseal", reflect.TypeOf((*MockMetadataRepositoryServiceClient)(nil).Unseal), varargs...)
}

// UpdateLogStream mocks base method
func (m *MockMetadataRepositoryServiceClient) UpdateLogStream(arg0 context.Context, arg1 *mrpb.LogStreamRequest, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLogStream", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogStream indicates an expected call of UpdateLogStream
func (mr *MockMetadataRepositoryServiceClientMockRecorder) UpdateLogStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogStream", reflect.TypeOf((*MockMetadataRepositoryServiceClient)(nil).UpdateLogStream), varargs...)
}

// MockMetadataRepositoryServiceServer is a mock of MetadataRepositoryServiceServer interface
type MockMetadataRepositoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataRepositoryServiceServerMockRecorder
}

// MockMetadataRepositoryServiceServerMockRecorder is the mock recorder for MockMetadataRepositoryServiceServer
type MockMetadataRepositoryServiceServerMockRecorder struct {
	mock *MockMetadataRepositoryServiceServer
}

// NewMockMetadataRepositoryServiceServer creates a new mock instance
func NewMockMetadataRepositoryServiceServer(ctrl *gomock.Controller) *MockMetadataRepositoryServiceServer {
	mock := &MockMetadataRepositoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetadataRepositoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataRepositoryServiceServer) EXPECT() *MockMetadataRepositoryServiceServerMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method
func (m *MockMetadataRepositoryServiceServer) GetMetadata(arg0 context.Context, arg1 *mrpb.GetMetadataRequest) (*mrpb.GetMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", arg0, arg1)
	ret0, _ := ret[0].(*mrpb.GetMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockMetadataRepositoryServiceServerMockRecorder) GetMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockMetadataRepositoryServiceServer)(nil).GetMetadata), arg0, arg1)
}

// RegisterLogStream mocks base method
func (m *MockMetadataRepositoryServiceServer) RegisterLogStream(arg0 context.Context, arg1 *mrpb.LogStreamRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterLogStream", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterLogStream indicates an expected call of RegisterLogStream
func (mr *MockMetadataRepositoryServiceServerMockRecorder) RegisterLogStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterLogStream", reflect.TypeOf((*MockMetadataRepositoryServiceServer)(nil).RegisterLogStream), arg0, arg1)
}

// RegisterStorageNode mocks base method
func (m *MockMetadataRepositoryServiceServer) RegisterStorageNode(arg0 context.Context, arg1 *mrpb.StorageNodeRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterStorageNode", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterStorageNode indicates an expected call of RegisterStorageNode
func (mr *MockMetadataRepositoryServiceServerMockRecorder) RegisterStorageNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStorageNode", reflect.TypeOf((*MockMetadataRepositoryServiceServer)(nil).RegisterStorageNode), arg0, arg1)
}

// Seal mocks base method
func (m *MockMetadataRepositoryServiceServer) Seal(arg0 context.Context, arg1 *mrpb.SealRequest) (*mrpb.SealResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", arg0, arg1)
	ret0, _ := ret[0].(*mrpb.SealResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seal indicates an expected call of Seal
func (mr *MockMetadataRepositoryServiceServerMockRecorder) Seal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockMetadataRepositoryServiceServer)(nil).Seal), arg0, arg1)
}

// UnregisterLogStream mocks base method
func (m *MockMetadataRepositoryServiceServer) UnregisterLogStream(arg0 context.Context, arg1 *mrpb.LogStreamRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterLogStream", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterLogStream indicates an expected call of UnregisterLogStream
func (mr *MockMetadataRepositoryServiceServerMockRecorder) UnregisterLogStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterLogStream", reflect.TypeOf((*MockMetadataRepositoryServiceServer)(nil).UnregisterLogStream), arg0, arg1)
}

// UnregisterStorageNode mocks base method
func (m *MockMetadataRepositoryServiceServer) UnregisterStorageNode(arg0 context.Context, arg1 *mrpb.StorageNodeRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterStorageNode", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterStorageNode indicates an expected call of UnregisterStorageNode
func (mr *MockMetadataRepositoryServiceServerMockRecorder) UnregisterStorageNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterStorageNode", reflect.TypeOf((*MockMetadataRepositoryServiceServer)(nil).UnregisterStorageNode), arg0, arg1)
}

// Unseal mocks base method
func (m *MockMetadataRepositoryServiceServer) Unseal(arg0 context.Context, arg1 *mrpb.UnsealRequest) (*mrpb.UnsealResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unseal", arg0, arg1)
	ret0, _ := ret[0].(*mrpb.UnsealResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unseal indicates an expected call of Unseal
func (mr *MockMetadataRepositoryServiceServerMockRecorder) Unseal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unseal", reflect.TypeOf((*MockMetadataRepositoryServiceServer)(nil).Unseal), arg0, arg1)
}

// UpdateLogStream mocks base method
func (m *MockMetadataRepositoryServiceServer) UpdateLogStream(arg0 context.Context, arg1 *mrpb.LogStreamRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogStream", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogStream indicates an expected call of UpdateLogStream
func (mr *MockMetadataRepositoryServiceServerMockRecorder) UpdateLogStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogStream", reflect.TypeOf((*MockMetadataRepositoryServiceServer)(nil).UpdateLogStream), arg0, arg1)
}
