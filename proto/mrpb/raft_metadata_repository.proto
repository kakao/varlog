syntax = "proto3";

package varlog.mrpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "varlogpb/metadata.proto";
import "snpb/log_stream_reporter.proto";

option go_package = "github.daumkakao.com/varlog/varlog/proto/mrpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message MetadataRepositoryDescriptor {
    message LocalLogStreamReplica {
        option (gogoproto.equal) = true;

        uint64 uncommitted_llsn_offset = 1 [
            (gogoproto.casttype) =
                "github.daumkakao.com/varlog/varlog/pkg/types.LLSN",
            (gogoproto.customname) = "UncommittedLLSNOffset"
        ];
        uint64 uncommitted_llsn_length = 2
            [(gogoproto.customname) = "UncommittedLLSNLength"];
        uint64 known_high_watermark = 3
            [(gogoproto.casttype) =
                 "github.daumkakao.com/varlog/varlog/pkg/types.GLSN"];
    }

    message LocalLogStreamReplicas {
        option (gogoproto.equal) = true;

        map<int32, LocalLogStreamReplica> replicas = 1
            [(gogoproto.castkey) =
                 "github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID"];
        varlogpb.LogStreamStatus status = 2;
    }

    message LogStreamDescriptor {
        uint64 trim_glsn = 1 [
            (gogoproto.casttype) =
                "github.daumkakao.com/varlog/varlog/pkg/types.GLSN",
            (gogoproto.customname) = "TrimGLSN"
        ];
        repeated snpb.GlobalLogStreamDescriptor global_log_streams = 2
            [(gogoproto.nullable) = true];
        map<uint64, LocalLogStreamReplicas> local_log_streams = 3
            [(gogoproto.castkey) =
                 "github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID"];
    }

    message PeerDescriptor {
        string url = 1 [(gogoproto.customname) = "URL"];
        bool is_learner = 2;
    }

    varlogpb.MetadataDescriptor metadata = 1 [(gogoproto.nullable) = true];
    LogStreamDescriptor log_stream = 2 [(gogoproto.nullable) = true];
    map<uint64, PeerDescriptor> peers = 3
        [(gogoproto.castkey) =
             "github.daumkakao.com/varlog/varlog/pkg/types.NodeID"];
    map<uint64, string> endpoints = 4
        [(gogoproto.castkey) =
             "github.daumkakao.com/varlog/varlog/pkg/types.NodeID"];
}
