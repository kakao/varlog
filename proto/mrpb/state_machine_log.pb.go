// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/mrpb/state_machine_log.proto

package mrpb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"

	github_daumkakao_com_varlog_varlog_pkg_types "github.daumkakao.com/varlog/varlog/pkg/types"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StateMechineLogRecordType int32

const (
	StateMechineLogRecordType_crc      StateMechineLogRecordType = 0
	StateMechineLogRecordType_snapshot StateMechineLogRecordType = 1
	StateMechineLogRecordType_entry    StateMechineLogRecordType = 2
)

var StateMechineLogRecordType_name = map[int32]string{
	0: "crc",
	1: "snapshot",
	2: "entry",
}

var StateMechineLogRecordType_value = map[string]int32{
	"crc":      0,
	"snapshot": 1,
	"entry":    2,
}

func (x StateMechineLogRecordType) String() string {
	return proto.EnumName(StateMechineLogRecordType_name, int32(x))
}

func (StateMechineLogRecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f38190a80937bd89, []int{0}
}

type StateMachineLogSnapshot struct {
	AppliedIndex         uint64                       `protobuf:"varint,1,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	Metadata             *varlogpb.MetadataDescriptor `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CommitResults        []*LogStreamCommitResults    `protobuf:"bytes,3,rep,name=commit_results,json=commitResults,proto3" json:"commit_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *StateMachineLogSnapshot) Reset()         { *m = StateMachineLogSnapshot{} }
func (m *StateMachineLogSnapshot) String() string { return proto.CompactTextString(m) }
func (*StateMachineLogSnapshot) ProtoMessage()    {}
func (*StateMachineLogSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38190a80937bd89, []int{0}
}
func (m *StateMachineLogSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateMachineLogSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateMachineLogSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateMachineLogSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateMachineLogSnapshot.Merge(m, src)
}
func (m *StateMachineLogSnapshot) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StateMachineLogSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_StateMachineLogSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_StateMachineLogSnapshot proto.InternalMessageInfo

func (m *StateMachineLogSnapshot) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *StateMachineLogSnapshot) GetMetadata() *varlogpb.MetadataDescriptor {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StateMachineLogSnapshot) GetCommitResults() []*LogStreamCommitResults {
	if m != nil {
		return m.CommitResults
	}
	return nil
}

type StateMachineLogCommitResult struct {
	TrimGlsn             github_daumkakao_com_varlog_varlog_pkg_types.GLSN `protobuf:"varint,1,opt,name=trim_glsn,json=trimGlsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"trim_glsn,omitempty"`
	CommitResult         *LogStreamCommitResults                           `protobuf:"bytes,2,opt,name=commit_result,json=commitResult,proto3" json:"commit_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *StateMachineLogCommitResult) Reset()         { *m = StateMachineLogCommitResult{} }
func (m *StateMachineLogCommitResult) String() string { return proto.CompactTextString(m) }
func (*StateMachineLogCommitResult) ProtoMessage()    {}
func (*StateMachineLogCommitResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38190a80937bd89, []int{1}
}
func (m *StateMachineLogCommitResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateMachineLogCommitResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateMachineLogCommitResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateMachineLogCommitResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateMachineLogCommitResult.Merge(m, src)
}
func (m *StateMachineLogCommitResult) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StateMachineLogCommitResult) XXX_DiscardUnknown() {
	xxx_messageInfo_StateMachineLogCommitResult.DiscardUnknown(m)
}

var xxx_messageInfo_StateMachineLogCommitResult proto.InternalMessageInfo

func (m *StateMachineLogCommitResult) GetTrimGlsn() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.TrimGlsn
	}
	return 0
}

func (m *StateMachineLogCommitResult) GetCommitResult() *LogStreamCommitResults {
	if m != nil {
		return m.CommitResult
	}
	return nil
}

type StateMachineLogEntry struct {
	AppliedIndex         uint64                       `protobuf:"varint,1,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	Payload              StateMachineLogEntry_Payload `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *StateMachineLogEntry) Reset()         { *m = StateMachineLogEntry{} }
func (m *StateMachineLogEntry) String() string { return proto.CompactTextString(m) }
func (*StateMachineLogEntry) ProtoMessage()    {}
func (*StateMachineLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38190a80937bd89, []int{2}
}
func (m *StateMachineLogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateMachineLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateMachineLogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateMachineLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateMachineLogEntry.Merge(m, src)
}
func (m *StateMachineLogEntry) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StateMachineLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_StateMachineLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_StateMachineLogEntry proto.InternalMessageInfo

func (m *StateMachineLogEntry) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *StateMachineLogEntry) GetPayload() StateMachineLogEntry_Payload {
	if m != nil {
		return m.Payload
	}
	return StateMachineLogEntry_Payload{}
}

type StateMachineLogEntry_Payload struct {
	RegisterStorageNode   *RegisterStorageNode         `protobuf:"bytes,1,opt,name=register_storage_node,json=registerStorageNode,proto3" json:"register_storage_node,omitempty"`
	UnregisterStorageNode *UnregisterStorageNode       `protobuf:"bytes,2,opt,name=unregister_storage_node,json=unregisterStorageNode,proto3" json:"unregister_storage_node,omitempty"`
	RegisterLogStream     *RegisterLogStream           `protobuf:"bytes,3,opt,name=register_log_stream,json=registerLogStream,proto3" json:"register_log_stream,omitempty"`
	UnregisterLogStream   *UnregisterLogStream         `protobuf:"bytes,4,opt,name=unregister_log_stream,json=unregisterLogStream,proto3" json:"unregister_log_stream,omitempty"`
	UpdateLogStream       *UpdateLogStream             `protobuf:"bytes,5,opt,name=update_log_stream,json=updateLogStream,proto3" json:"update_log_stream,omitempty"`
	CommitResult          *StateMachineLogCommitResult `protobuf:"bytes,6,opt,name=commit_result,json=commitResult,proto3" json:"commit_result,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                     `json:"-"`
	XXX_unrecognized      []byte                       `json:"-"`
	XXX_sizecache         int32                        `json:"-"`
}

func (m *StateMachineLogEntry_Payload) Reset()         { *m = StateMachineLogEntry_Payload{} }
func (m *StateMachineLogEntry_Payload) String() string { return proto.CompactTextString(m) }
func (*StateMachineLogEntry_Payload) ProtoMessage()    {}
func (*StateMachineLogEntry_Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38190a80937bd89, []int{2, 0}
}
func (m *StateMachineLogEntry_Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateMachineLogEntry_Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateMachineLogEntry_Payload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateMachineLogEntry_Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateMachineLogEntry_Payload.Merge(m, src)
}
func (m *StateMachineLogEntry_Payload) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StateMachineLogEntry_Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_StateMachineLogEntry_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_StateMachineLogEntry_Payload proto.InternalMessageInfo

func (m *StateMachineLogEntry_Payload) GetRegisterStorageNode() *RegisterStorageNode {
	if m != nil {
		return m.RegisterStorageNode
	}
	return nil
}

func (m *StateMachineLogEntry_Payload) GetUnregisterStorageNode() *UnregisterStorageNode {
	if m != nil {
		return m.UnregisterStorageNode
	}
	return nil
}

func (m *StateMachineLogEntry_Payload) GetRegisterLogStream() *RegisterLogStream {
	if m != nil {
		return m.RegisterLogStream
	}
	return nil
}

func (m *StateMachineLogEntry_Payload) GetUnregisterLogStream() *UnregisterLogStream {
	if m != nil {
		return m.UnregisterLogStream
	}
	return nil
}

func (m *StateMachineLogEntry_Payload) GetUpdateLogStream() *UpdateLogStream {
	if m != nil {
		return m.UpdateLogStream
	}
	return nil
}

func (m *StateMachineLogEntry_Payload) GetCommitResult() *StateMachineLogCommitResult {
	if m != nil {
		return m.CommitResult
	}
	return nil
}

type StateMachineLogRecord struct {
	Type                 StateMechineLogRecordType `protobuf:"varint,1,opt,name=type,proto3,enum=varlog.mrpb.StateMechineLogRecordType" json:"type,omitempty"`
	Crc                  uint32                    `protobuf:"varint,2,opt,name=crc,proto3" json:"crc,omitempty"`
	Data                 []byte                    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *StateMachineLogRecord) Reset()         { *m = StateMachineLogRecord{} }
func (m *StateMachineLogRecord) String() string { return proto.CompactTextString(m) }
func (*StateMachineLogRecord) ProtoMessage()    {}
func (*StateMachineLogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38190a80937bd89, []int{3}
}
func (m *StateMachineLogRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateMachineLogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateMachineLogRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateMachineLogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateMachineLogRecord.Merge(m, src)
}
func (m *StateMachineLogRecord) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StateMachineLogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StateMachineLogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StateMachineLogRecord proto.InternalMessageInfo

func (m *StateMachineLogRecord) GetType() StateMechineLogRecordType {
	if m != nil {
		return m.Type
	}
	return StateMechineLogRecordType_crc
}

func (m *StateMachineLogRecord) GetCrc() uint32 {
	if m != nil {
		return m.Crc
	}
	return 0
}

func (m *StateMachineLogRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("varlog.mrpb.StateMechineLogRecordType", StateMechineLogRecordType_name, StateMechineLogRecordType_value)
	proto.RegisterType((*StateMachineLogSnapshot)(nil), "varlog.mrpb.StateMachineLogSnapshot")
	proto.RegisterType((*StateMachineLogCommitResult)(nil), "varlog.mrpb.StateMachineLogCommitResult")
	proto.RegisterType((*StateMachineLogEntry)(nil), "varlog.mrpb.StateMachineLogEntry")
	proto.RegisterType((*StateMachineLogEntry_Payload)(nil), "varlog.mrpb.StateMachineLogEntry.Payload")
	proto.RegisterType((*StateMachineLogRecord)(nil), "varlog.mrpb.StateMachineLogRecord")
}

func init() {
	proto.RegisterFile("proto/mrpb/state_machine_log.proto", fileDescriptor_f38190a80937bd89)
}

var fileDescriptor_f38190a80937bd89 = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdf, 0x4e, 0xdb, 0x3e,
	0x14, 0x26, 0x34, 0xfc, 0x33, 0x2d, 0xbf, 0x62, 0x7e, 0x15, 0x1d, 0x9b, 0x4a, 0x55, 0xa4, 0x89,
	0x4d, 0x22, 0xd5, 0x98, 0x76, 0xc3, 0x34, 0x4d, 0x62, 0x9b, 0x80, 0x09, 0xd0, 0xe4, 0xb2, 0x1b,
	0x6e, 0x22, 0x37, 0x31, 0x21, 0x22, 0x89, 0x2d, 0xdb, 0x99, 0xd6, 0xbb, 0xdd, 0xee, 0x2d, 0x78,
	0x8f, 0xbd, 0x40, 0xa5, 0xdd, 0xec, 0x09, 0xb8, 0x60, 0x6f, 0xb1, 0xab, 0xc9, 0x4e, 0xd2, 0x26,
	0x21, 0x43, 0x5c, 0xc5, 0x39, 0xfe, 0xce, 0x77, 0x3e, 0x9f, 0xcf, 0x3e, 0xa0, 0xc7, 0x38, 0x95,
	0xb4, 0x1f, 0x72, 0x36, 0xec, 0x0b, 0x89, 0x25, 0xb1, 0x43, 0xec, 0x5c, 0xfa, 0x11, 0xb1, 0x03,
	0xea, 0x59, 0x7a, 0x13, 0x2e, 0x7f, 0xc1, 0x5c, 0xfd, 0x29, 0xd0, 0xc6, 0x8e, 0xe7, 0xcb, 0xcb,
	0x78, 0x68, 0x39, 0x34, 0xec, 0x7b, 0xd4, 0xa3, 0x7d, 0x8d, 0x19, 0xc6, 0x17, 0xfa, 0x2f, 0x61,
	0x53, 0xab, 0x24, 0x77, 0x63, 0x3d, 0xc9, 0x65, 0xc3, 0x7e, 0x48, 0x24, 0x76, 0xb1, 0xc4, 0xe9,
	0x46, 0x4b, 0x97, 0xe4, 0xf8, 0x42, 0xda, 0x24, 0x92, 0x7c, 0x94, 0x86, 0xb7, 0xa6, 0xe1, 0x2c,
	0xc1, 0xe6, 0x84, 0x51, 0xe1, 0x4b, 0x9a, 0x81, 0x7a, 0x3f, 0x0d, 0xb0, 0x3e, 0x50, 0x62, 0x4f,
	0x12, 0xad, 0xc7, 0xd4, 0x1b, 0x44, 0x98, 0x89, 0x4b, 0x2a, 0xe1, 0x16, 0x68, 0x60, 0xc6, 0x02,
	0x9f, 0xb8, 0xb6, 0x1f, 0xb9, 0xe4, 0x6b, 0xdb, 0xe8, 0x1a, 0xdb, 0x26, 0xaa, 0xa7, 0xc1, 0x23,
	0x15, 0x83, 0x6f, 0xc1, 0x62, 0xc6, 0xde, 0x9e, 0xed, 0x1a, 0xdb, 0xcb, 0xbb, 0x5b, 0x56, 0x7a,
	0xc8, 0x4c, 0xaf, 0x75, 0x92, 0x02, 0xde, 0x13, 0xe1, 0x70, 0x9f, 0x49, 0xca, 0xd1, 0x24, 0x09,
	0x7e, 0x04, 0x2b, 0x0e, 0x0d, 0x43, 0x5f, 0xda, 0x9c, 0x88, 0x38, 0x90, 0xa2, 0x5d, 0xeb, 0xd6,
	0xf2, 0x34, 0xea, 0x18, 0x96, 0xd2, 0x25, 0x39, 0xc1, 0xe1, 0x3b, 0x8d, 0x45, 0x09, 0x14, 0x35,
	0x9c, 0xfc, 0x6f, 0xef, 0x87, 0x01, 0x1e, 0x97, 0x4e, 0x93, 0xc7, 0x43, 0x04, 0x96, 0x24, 0xf7,
	0x43, 0xdb, 0x0b, 0x44, 0x94, 0x9c, 0x66, 0xff, 0xd5, 0x9f, 0x9b, 0xcd, 0x17, 0xa9, 0x11, 0x2e,
	0x8e, 0xc3, 0x2b, 0x7c, 0x85, 0xa9, 0xb6, 0x24, 0x29, 0x9f, 0x7d, 0xd8, 0x95, 0xd7, 0x97, 0x23,
	0x46, 0x84, 0x75, 0x70, 0x3c, 0x38, 0x45, 0x8b, 0x8a, 0xe7, 0x20, 0x10, 0x11, 0x3c, 0x04, 0x8d,
	0x82, 0xfe, 0x72, 0x17, 0xee, 0x93, 0x5f, 0xcf, 0xcb, 0xef, 0x7d, 0x9f, 0x03, 0xff, 0x97, 0xd4,
	0x7f, 0x50, 0x7e, 0x3e, 0xcc, 0x88, 0x23, 0xb0, 0xc0, 0xf0, 0x28, 0xa0, 0xd8, 0x6d, 0xd7, 0xb4,
	0x82, 0x67, 0x05, 0x05, 0x55, 0xc4, 0xd6, 0xa7, 0x24, 0x61, 0xdf, 0x1c, 0xdf, 0x6c, 0xce, 0xa0,
	0x2c, 0x7f, 0xe3, 0x9b, 0x09, 0x16, 0xd2, 0x2d, 0x78, 0x06, 0x5a, 0x9c, 0x78, 0xbe, 0x90, 0x84,
	0xdb, 0x42, 0x52, 0x8e, 0x3d, 0x62, 0x47, 0xd4, 0x25, 0x5a, 0xc3, 0xf2, 0x6e, 0xb7, 0x50, 0x04,
	0xa5, 0xc8, 0x41, 0x02, 0x3c, 0xa5, 0x2e, 0x41, 0x6b, 0xfc, 0x6e, 0x10, 0x9e, 0x83, 0xf5, 0x38,
	0xaa, 0xe6, 0x4d, 0xda, 0xd7, 0x2b, 0xf0, 0x7e, 0x8e, 0x2a, 0x48, 0x50, 0x2b, 0xae, 0x0a, 0xc3,
	0x53, 0x30, 0x29, 0xa9, 0x5e, 0x9e, 0x2d, 0x74, 0xe3, 0xd3, 0xa6, 0x74, 0x2a, 0xf5, 0x4e, 0xec,
	0x41, 0xab, 0xbc, 0x1c, 0x52, 0x1d, 0xc8, 0x69, 0xcd, 0x31, 0x9a, 0x15, 0x1d, 0x98, 0x2a, 0x9d,
	0x72, 0xae, 0xc5, 0x77, 0x83, 0xf0, 0x10, 0xac, 0xc6, 0xcc, 0x55, 0x53, 0x22, 0xc7, 0x38, 0xa7,
	0x19, 0x9f, 0x14, 0x19, 0x35, 0x6a, 0xca, 0xf6, 0x5f, 0x5c, 0x0c, 0xc0, 0x93, 0xf2, 0x05, 0x9c,
	0xd7, 0x2c, 0xdb, 0xf7, 0xd9, 0x9f, 0xbf, 0x86, 0xc5, 0x5b, 0xb8, 0x67, 0x8e, 0xaf, 0x37, 0x8d,
	0xde, 0x08, 0xb4, 0x4a, 0x29, 0x88, 0x38, 0x94, 0xbb, 0x70, 0x0f, 0x98, 0xea, 0x19, 0x68, 0xfb,
	0x57, 0x76, 0x9f, 0x56, 0x14, 0x21, 0xc5, 0x8c, 0xb3, 0x11, 0x23, 0x48, 0xe7, 0xc0, 0x26, 0xa8,
	0x39, 0xdc, 0xd1, 0x0e, 0x37, 0x90, 0x5a, 0x42, 0x08, 0x4c, 0x3d, 0x39, 0x94, 0x39, 0x75, 0xa4,
	0xd7, 0xcf, 0xdf, 0x80, 0x47, 0xff, 0x24, 0x82, 0x0b, 0x9a, 0xa2, 0x39, 0x03, 0xeb, 0x60, 0x51,
	0xa4, 0x83, 0xaa, 0x69, 0xc0, 0x25, 0x30, 0xa7, 0x47, 0x5f, 0x73, 0x76, 0xff, 0xf5, 0xf8, 0xb6,
	0x63, 0xfc, 0xba, 0xed, 0x18, 0xd7, 0xbf, 0x3b, 0xc6, 0xf9, 0xce, 0x43, 0x9e, 0xf6, 0x64, 0x6e,
	0x0f, 0xe7, 0xf5, 0xfa, 0xe5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x4d, 0x03, 0xb0, 0xcc,
	0x05, 0x00, 0x00,
}

func (m *StateMachineLogSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateMachineLogSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateMachineLogSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CommitResults) > 0 {
		for iNdEx := len(m.CommitResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommitResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateMachineLog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateMachineLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppliedIndex != 0 {
		i = encodeVarintStateMachineLog(dAtA, i, uint64(m.AppliedIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateMachineLogCommitResult) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateMachineLogCommitResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateMachineLogCommitResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommitResult != nil {
		{
			size, err := m.CommitResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateMachineLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TrimGlsn != 0 {
		i = encodeVarintStateMachineLog(dAtA, i, uint64(m.TrimGlsn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateMachineLogEntry) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateMachineLogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateMachineLogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStateMachineLog(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AppliedIndex != 0 {
		i = encodeVarintStateMachineLog(dAtA, i, uint64(m.AppliedIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateMachineLogEntry_Payload) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateMachineLogEntry_Payload) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateMachineLogEntry_Payload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommitResult != nil {
		{
			size, err := m.CommitResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateMachineLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UpdateLogStream != nil {
		{
			size, err := m.UpdateLogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateMachineLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.UnregisterLogStream != nil {
		{
			size, err := m.UnregisterLogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateMachineLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RegisterLogStream != nil {
		{
			size, err := m.RegisterLogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateMachineLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UnregisterStorageNode != nil {
		{
			size, err := m.UnregisterStorageNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateMachineLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RegisterStorageNode != nil {
		{
			size, err := m.RegisterStorageNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateMachineLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateMachineLogRecord) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateMachineLogRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateMachineLogRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintStateMachineLog(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Crc != 0 {
		i = encodeVarintStateMachineLog(dAtA, i, uint64(m.Crc))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintStateMachineLog(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStateMachineLog(dAtA []byte, offset int, v uint64) int {
	offset -= sovStateMachineLog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StateMachineLogSnapshot) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppliedIndex != 0 {
		n += 1 + sovStateMachineLog(uint64(m.AppliedIndex))
	}
	if m.Metadata != nil {
		l = m.Metadata.ProtoSize()
		n += 1 + l + sovStateMachineLog(uint64(l))
	}
	if len(m.CommitResults) > 0 {
		for _, e := range m.CommitResults {
			l = e.ProtoSize()
			n += 1 + l + sovStateMachineLog(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateMachineLogCommitResult) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrimGlsn != 0 {
		n += 1 + sovStateMachineLog(uint64(m.TrimGlsn))
	}
	if m.CommitResult != nil {
		l = m.CommitResult.ProtoSize()
		n += 1 + l + sovStateMachineLog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateMachineLogEntry) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppliedIndex != 0 {
		n += 1 + sovStateMachineLog(uint64(m.AppliedIndex))
	}
	l = m.Payload.ProtoSize()
	n += 1 + l + sovStateMachineLog(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateMachineLogEntry_Payload) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterStorageNode != nil {
		l = m.RegisterStorageNode.ProtoSize()
		n += 1 + l + sovStateMachineLog(uint64(l))
	}
	if m.UnregisterStorageNode != nil {
		l = m.UnregisterStorageNode.ProtoSize()
		n += 1 + l + sovStateMachineLog(uint64(l))
	}
	if m.RegisterLogStream != nil {
		l = m.RegisterLogStream.ProtoSize()
		n += 1 + l + sovStateMachineLog(uint64(l))
	}
	if m.UnregisterLogStream != nil {
		l = m.UnregisterLogStream.ProtoSize()
		n += 1 + l + sovStateMachineLog(uint64(l))
	}
	if m.UpdateLogStream != nil {
		l = m.UpdateLogStream.ProtoSize()
		n += 1 + l + sovStateMachineLog(uint64(l))
	}
	if m.CommitResult != nil {
		l = m.CommitResult.ProtoSize()
		n += 1 + l + sovStateMachineLog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateMachineLogRecord) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovStateMachineLog(uint64(m.Type))
	}
	if m.Crc != 0 {
		n += 1 + sovStateMachineLog(uint64(m.Crc))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovStateMachineLog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStateMachineLog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStateMachineLog(x uint64) (n int) {
	return sovStateMachineLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StateMachineLogEntry_Payload) GetValue() interface{} {
	if this.RegisterStorageNode != nil {
		return this.RegisterStorageNode
	}
	if this.UnregisterStorageNode != nil {
		return this.UnregisterStorageNode
	}
	if this.RegisterLogStream != nil {
		return this.RegisterLogStream
	}
	if this.UnregisterLogStream != nil {
		return this.UnregisterLogStream
	}
	if this.UpdateLogStream != nil {
		return this.UpdateLogStream
	}
	if this.CommitResult != nil {
		return this.CommitResult
	}
	return nil
}

func (this *StateMachineLogEntry_Payload) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *RegisterStorageNode:
		this.RegisterStorageNode = vt
	case *UnregisterStorageNode:
		this.UnregisterStorageNode = vt
	case *RegisterLogStream:
		this.RegisterLogStream = vt
	case *UnregisterLogStream:
		this.UnregisterLogStream = vt
	case *UpdateLogStream:
		this.UpdateLogStream = vt
	case *StateMachineLogCommitResult:
		this.CommitResult = vt
	default:
		return false
	}
	return true
}
func (m *StateMachineLogSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateMachineLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateMachineLogSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateMachineLogSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &varlogpb.MetadataDescriptor{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitResults = append(m.CommitResults, &LogStreamCommitResults{})
			if err := m.CommitResults[len(m.CommitResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateMachineLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateMachineLogCommitResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateMachineLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateMachineLogCommitResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateMachineLogCommitResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrimGlsn", wireType)
			}
			m.TrimGlsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrimGlsn |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommitResult == nil {
				m.CommitResult = &LogStreamCommitResults{}
			}
			if err := m.CommitResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateMachineLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateMachineLogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateMachineLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateMachineLogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateMachineLogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateMachineLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateMachineLogEntry_Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateMachineLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterStorageNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisterStorageNode == nil {
				m.RegisterStorageNode = &RegisterStorageNode{}
			}
			if err := m.RegisterStorageNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnregisterStorageNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnregisterStorageNode == nil {
				m.UnregisterStorageNode = &UnregisterStorageNode{}
			}
			if err := m.UnregisterStorageNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterLogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisterLogStream == nil {
				m.RegisterLogStream = &RegisterLogStream{}
			}
			if err := m.RegisterLogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnregisterLogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnregisterLogStream == nil {
				m.UnregisterLogStream = &UnregisterLogStream{}
			}
			if err := m.UnregisterLogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateLogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateLogStream == nil {
				m.UpdateLogStream = &UpdateLogStream{}
			}
			if err := m.UpdateLogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommitResult == nil {
				m.CommitResult = &StateMachineLogCommitResult{}
			}
			if err := m.CommitResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateMachineLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateMachineLogRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateMachineLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateMachineLogRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateMachineLogRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= StateMechineLogRecordType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc", wireType)
			}
			m.Crc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateMachineLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateMachineLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStateMachineLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStateMachineLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateMachineLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStateMachineLog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStateMachineLog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStateMachineLog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStateMachineLog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStateMachineLog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStateMachineLog = fmt.Errorf("proto: unexpected end of group")
)
