// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/mrpb/raft_metadata_repository.proto

package mrpb

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"

	github_daumkakao_com_varlog_varlog_pkg_types "github.daumkakao.com/varlog/varlog/pkg/types"
	snpb "github.daumkakao.com/varlog/varlog/proto/snpb"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LogStreamCommitResults struct {
	HighWatermark        github_daumkakao_com_varlog_varlog_pkg_types.GLSN `protobuf:"varint,1,opt,name=high_watermark,json=highWatermark,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"high_watermark,omitempty"`
	PrevHighWatermark    github_daumkakao_com_varlog_varlog_pkg_types.GLSN `protobuf:"varint,2,opt,name=prev_high_watermark,json=prevHighWatermark,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"prev_high_watermark,omitempty"`
	CommitResults        []snpb.LogStreamCommitResult                      `protobuf:"bytes,3,rep,name=commit_results,json=commitResults,proto3" json:"commit_results"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *LogStreamCommitResults) Reset()         { *m = LogStreamCommitResults{} }
func (m *LogStreamCommitResults) String() string { return proto.CompactTextString(m) }
func (*LogStreamCommitResults) ProtoMessage()    {}
func (*LogStreamCommitResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_60447af781d89487, []int{0}
}
func (m *LogStreamCommitResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStreamCommitResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStreamCommitResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStreamCommitResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStreamCommitResults.Merge(m, src)
}
func (m *LogStreamCommitResults) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LogStreamCommitResults) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStreamCommitResults.DiscardUnknown(m)
}

var xxx_messageInfo_LogStreamCommitResults proto.InternalMessageInfo

func (m *LogStreamCommitResults) GetHighWatermark() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.HighWatermark
	}
	return 0
}

func (m *LogStreamCommitResults) GetPrevHighWatermark() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.PrevHighWatermark
	}
	return 0
}

func (m *LogStreamCommitResults) GetCommitResults() []snpb.LogStreamCommitResult {
	if m != nil {
		return m.CommitResults
	}
	return nil
}

type StorageNodeUncommitReport struct {
	StorageNodeID        github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID `protobuf:"varint,1,opt,name=storage_node_id,json=storageNodeId,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"storage_node_id,omitempty"`
	UncommitReports      []snpb.LogStreamUncommitReport                             `protobuf:"bytes,2,rep,name=uncommit_reports,json=uncommitReports,proto3" json:"uncommit_reports"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *StorageNodeUncommitReport) Reset()         { *m = StorageNodeUncommitReport{} }
func (m *StorageNodeUncommitReport) String() string { return proto.CompactTextString(m) }
func (*StorageNodeUncommitReport) ProtoMessage()    {}
func (*StorageNodeUncommitReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_60447af781d89487, []int{1}
}
func (m *StorageNodeUncommitReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageNodeUncommitReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageNodeUncommitReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageNodeUncommitReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageNodeUncommitReport.Merge(m, src)
}
func (m *StorageNodeUncommitReport) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StorageNodeUncommitReport) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageNodeUncommitReport.DiscardUnknown(m)
}

var xxx_messageInfo_StorageNodeUncommitReport proto.InternalMessageInfo

func (m *StorageNodeUncommitReport) GetStorageNodeID() github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID {
	if m != nil {
		return m.StorageNodeID
	}
	return 0
}

func (m *StorageNodeUncommitReport) GetUncommitReports() []snpb.LogStreamUncommitReport {
	if m != nil {
		return m.UncommitReports
	}
	return nil
}

type LogStreamUncommitReports struct {
	Replicas             map[github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID]snpb.LogStreamUncommitReport `protobuf:"bytes,1,rep,name=replicas,proto3,castkey=github.daumkakao.com/varlog/varlog/pkg/types.StorageNodeID" json:"replicas" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status               varlogpb.LogStreamStatus                                                                    `protobuf:"varint,2,opt,name=status,proto3,enum=varlog.varlogpb.LogStreamStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                    `json:"-"`
	XXX_unrecognized     []byte                                                                                      `json:"-"`
	XXX_sizecache        int32                                                                                       `json:"-"`
}

func (m *LogStreamUncommitReports) Reset()         { *m = LogStreamUncommitReports{} }
func (m *LogStreamUncommitReports) String() string { return proto.CompactTextString(m) }
func (*LogStreamUncommitReports) ProtoMessage()    {}
func (*LogStreamUncommitReports) Descriptor() ([]byte, []int) {
	return fileDescriptor_60447af781d89487, []int{2}
}
func (m *LogStreamUncommitReports) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStreamUncommitReports) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStreamUncommitReports.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStreamUncommitReports) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStreamUncommitReports.Merge(m, src)
}
func (m *LogStreamUncommitReports) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LogStreamUncommitReports) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStreamUncommitReports.DiscardUnknown(m)
}

var xxx_messageInfo_LogStreamUncommitReports proto.InternalMessageInfo

func (m *LogStreamUncommitReports) GetReplicas() map[github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID]snpb.LogStreamUncommitReport {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *LogStreamUncommitReports) GetStatus() varlogpb.LogStreamStatus {
	if m != nil {
		return m.Status
	}
	return varlogpb.LogStreamStatusRunning
}

type MetadataRepositoryDescriptor struct {
	Metadata             *varlogpb.MetadataDescriptor                                   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	LogStream            *MetadataRepositoryDescriptor_LogStreamDescriptor              `protobuf:"bytes,2,opt,name=log_stream,json=logStream,proto3" json:"log_stream,omitempty"`
	PeersMap             MetadataRepositoryDescriptor_PeerDescriptorMap                 `protobuf:"bytes,3,opt,name=peers_map,json=peersMap,proto3" json:"peers_map"`
	Endpoints            map[github_daumkakao_com_varlog_varlog_pkg_types.NodeID]string `protobuf:"bytes,4,rep,name=endpoints,proto3,castkey=github.daumkakao.com/varlog/varlog/pkg/types.NodeID" json:"endpoints,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                                       `json:"-"`
	XXX_unrecognized     []byte                                                         `json:"-"`
	XXX_sizecache        int32                                                          `json:"-"`
}

func (m *MetadataRepositoryDescriptor) Reset()         { *m = MetadataRepositoryDescriptor{} }
func (m *MetadataRepositoryDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetadataRepositoryDescriptor) ProtoMessage()    {}
func (*MetadataRepositoryDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_60447af781d89487, []int{3}
}
func (m *MetadataRepositoryDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRepositoryDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRepositoryDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRepositoryDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRepositoryDescriptor.Merge(m, src)
}
func (m *MetadataRepositoryDescriptor) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MetadataRepositoryDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRepositoryDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRepositoryDescriptor proto.InternalMessageInfo

func (m *MetadataRepositoryDescriptor) GetMetadata() *varlogpb.MetadataDescriptor {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MetadataRepositoryDescriptor) GetLogStream() *MetadataRepositoryDescriptor_LogStreamDescriptor {
	if m != nil {
		return m.LogStream
	}
	return nil
}

func (m *MetadataRepositoryDescriptor) GetPeersMap() MetadataRepositoryDescriptor_PeerDescriptorMap {
	if m != nil {
		return m.PeersMap
	}
	return MetadataRepositoryDescriptor_PeerDescriptorMap{}
}

func (m *MetadataRepositoryDescriptor) GetEndpoints() map[github_daumkakao_com_varlog_varlog_pkg_types.NodeID]string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type MetadataRepositoryDescriptor_LogStreamDescriptor struct {
	TrimGLSN             github_daumkakao_com_varlog_varlog_pkg_types.GLSN                                      `protobuf:"varint,1,opt,name=trim_glsn,json=trimGlsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/types.GLSN" json:"trim_glsn,omitempty"`
	CommitHistory        []*LogStreamCommitResults                                                              `protobuf:"bytes,2,rep,name=commit_history,json=commitHistory,proto3" json:"commit_history,omitempty"`
	UncommitReports      map[github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID]*LogStreamUncommitReports `protobuf:"bytes,3,rep,name=uncommit_reports,json=uncommitReports,proto3,castkey=github.daumkakao.com/varlog/varlog/pkg/types.LogStreamID" json:"uncommit_reports,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                                                               `json:"-"`
	XXX_unrecognized     []byte                                                                                 `json:"-"`
	XXX_sizecache        int32                                                                                  `json:"-"`
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) Reset() {
	*m = MetadataRepositoryDescriptor_LogStreamDescriptor{}
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) String() string {
	return proto.CompactTextString(m)
}
func (*MetadataRepositoryDescriptor_LogStreamDescriptor) ProtoMessage() {}
func (*MetadataRepositoryDescriptor_LogStreamDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_60447af781d89487, []int{3, 0}
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRepositoryDescriptor_LogStreamDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRepositoryDescriptor_LogStreamDescriptor.Merge(m, src)
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRepositoryDescriptor_LogStreamDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRepositoryDescriptor_LogStreamDescriptor proto.InternalMessageInfo

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) GetTrimGLSN() github_daumkakao_com_varlog_varlog_pkg_types.GLSN {
	if m != nil {
		return m.TrimGLSN
	}
	return 0
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) GetCommitHistory() []*LogStreamCommitResults {
	if m != nil {
		return m.CommitHistory
	}
	return nil
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) GetUncommitReports() map[github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID]*LogStreamUncommitReports {
	if m != nil {
		return m.UncommitReports
	}
	return nil
}

type MetadataRepositoryDescriptor_PeerDescriptor struct {
	URL                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	IsLearner            bool     `protobuf:"varint,2,opt,name=is_learner,json=isLearner,proto3" json:"is_learner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetadataRepositoryDescriptor_PeerDescriptor) Reset() {
	*m = MetadataRepositoryDescriptor_PeerDescriptor{}
}
func (m *MetadataRepositoryDescriptor_PeerDescriptor) String() string {
	return proto.CompactTextString(m)
}
func (*MetadataRepositoryDescriptor_PeerDescriptor) ProtoMessage() {}
func (*MetadataRepositoryDescriptor_PeerDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_60447af781d89487, []int{3, 1}
}
func (m *MetadataRepositoryDescriptor_PeerDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRepositoryDescriptor_PeerDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRepositoryDescriptor_PeerDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRepositoryDescriptor_PeerDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRepositoryDescriptor_PeerDescriptor.Merge(m, src)
}
func (m *MetadataRepositoryDescriptor_PeerDescriptor) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MetadataRepositoryDescriptor_PeerDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRepositoryDescriptor_PeerDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRepositoryDescriptor_PeerDescriptor proto.InternalMessageInfo

func (m *MetadataRepositoryDescriptor_PeerDescriptor) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *MetadataRepositoryDescriptor_PeerDescriptor) GetIsLearner() bool {
	if m != nil {
		return m.IsLearner
	}
	return false
}

type MetadataRepositoryDescriptor_PeerDescriptorMap struct {
	Peers map[github_daumkakao_com_varlog_varlog_pkg_types.NodeID]*MetadataRepositoryDescriptor_PeerDescriptor `protobuf:"bytes,1,rep,name=peers,proto3,castkey=github.daumkakao.com/varlog/varlog/pkg/types.NodeID" json:"peers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// applied_index is the AppliedIndex of RAFT that is updated by changing
	// configuration of members. For example, AddPeer and RemovePeer result
	// in increasing applied_index.
	AppliedIndex         uint64   `protobuf:"varint,2,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) Reset() {
	*m = MetadataRepositoryDescriptor_PeerDescriptorMap{}
}
func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) String() string {
	return proto.CompactTextString(m)
}
func (*MetadataRepositoryDescriptor_PeerDescriptorMap) ProtoMessage() {}
func (*MetadataRepositoryDescriptor_PeerDescriptorMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_60447af781d89487, []int{3, 2}
}
func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRepositoryDescriptor_PeerDescriptorMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRepositoryDescriptor_PeerDescriptorMap.Merge(m, src)
}
func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRepositoryDescriptor_PeerDescriptorMap.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRepositoryDescriptor_PeerDescriptorMap proto.InternalMessageInfo

func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) GetPeers() map[github_daumkakao_com_varlog_varlog_pkg_types.NodeID]*MetadataRepositoryDescriptor_PeerDescriptor {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*LogStreamCommitResults)(nil), "varlog.mrpb.LogStreamCommitResults")
	proto.RegisterType((*StorageNodeUncommitReport)(nil), "varlog.mrpb.StorageNodeUncommitReport")
	proto.RegisterType((*LogStreamUncommitReports)(nil), "varlog.mrpb.LogStreamUncommitReports")
	proto.RegisterMapType((map[github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID]snpb.LogStreamUncommitReport)(nil), "varlog.mrpb.LogStreamUncommitReports.ReplicasEntry")
	proto.RegisterType((*MetadataRepositoryDescriptor)(nil), "varlog.mrpb.MetadataRepositoryDescriptor")
	proto.RegisterMapType((map[github_daumkakao_com_varlog_varlog_pkg_types.NodeID]string)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.EndpointsEntry")
	proto.RegisterType((*MetadataRepositoryDescriptor_LogStreamDescriptor)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.LogStreamDescriptor")
	proto.RegisterMapType((map[github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID]*LogStreamUncommitReports)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.LogStreamDescriptor.UncommitReportsEntry")
	proto.RegisterType((*MetadataRepositoryDescriptor_PeerDescriptor)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.PeerDescriptor")
	proto.RegisterType((*MetadataRepositoryDescriptor_PeerDescriptorMap)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.PeerDescriptorMap")
	proto.RegisterMapType((map[github_daumkakao_com_varlog_varlog_pkg_types.NodeID]*MetadataRepositoryDescriptor_PeerDescriptor)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.PeerDescriptorMap.PeersEntry")
}

func init() {
	proto.RegisterFile("proto/mrpb/raft_metadata_repository.proto", fileDescriptor_60447af781d89487)
}

var fileDescriptor_60447af781d89487 = []byte{
	// 903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0x66, 0x6d, 0xb7, 0xd8, 0x2f, 0xd8, 0x6d, 0xa7, 0x15, 0xb8, 0x16, 0x64, 0xa3, 0x04, 0xa4,
	0x72, 0xe8, 0x5a, 0x24, 0x42, 0x58, 0x49, 0x39, 0x60, 0x12, 0xda, 0xa0, 0x24, 0xad, 0x36, 0x44,
	0x48, 0x08, 0xb1, 0x1a, 0x7b, 0xa7, 0x9b, 0x95, 0xf7, 0xc7, 0x68, 0x66, 0x36, 0xc5, 0xd7, 0xfc,
	0x03, 0x1c, 0x10, 0xf7, 0xfe, 0x11, 0xdc, 0xb8, 0x72, 0xe8, 0x11, 0x89, 0xbb, 0x23, 0x99, 0x0b,
	0x12, 0x17, 0xce, 0xbd, 0x80, 0x76, 0x66, 0xd6, 0xde, 0xad, 0xdd, 0xca, 0x89, 0x4f, 0xd9, 0xf9,
	0xf1, 0xde, 0xf7, 0xde, 0x37, 0xdf, 0xf7, 0x62, 0xf8, 0x98, 0xb2, 0x58, 0xc4, 0xed, 0x90, 0xd1,
	0x5e, 0x9b, 0xe1, 0xa7, 0xc2, 0x09, 0x89, 0xc0, 0x2e, 0x16, 0xd8, 0x61, 0x84, 0xc6, 0xdc, 0x17,
	0x31, 0x1b, 0x5a, 0xf2, 0x0e, 0x5a, 0x39, 0xc3, 0x2c, 0x88, 0x3d, 0x2b, 0xbd, 0xdb, 0xba, 0xef,
	0xf9, 0xe2, 0x34, 0xe9, 0x59, 0xfd, 0x38, 0x6c, 0x7b, 0xb1, 0x17, 0xb7, 0xe5, 0x9d, 0x5e, 0xf2,
	0x54, 0xae, 0x54, 0xd2, 0xf4, 0x4b, 0xc5, 0xb6, 0xde, 0x53, 0xb1, 0xb4, 0xd7, 0xce, 0xf2, 0xeb,
	0x83, 0x55, 0x1e, 0xd1, 0x5e, 0x3b, 0x88, 0x3d, 0x87, 0x0b, 0x46, 0x70, 0x28, 0x61, 0x99, 0x20,
	0x4c, 0x9d, 0xaf, 0xff, 0x5a, 0x82, 0x77, 0x0f, 0x62, 0xef, 0x58, 0x1e, 0x7e, 0x19, 0x87, 0xa1,
	0x2f, 0x6c, 0xc2, 0x93, 0x40, 0x70, 0xf4, 0x3d, 0x34, 0x4e, 0x7d, 0xef, 0xd4, 0x79, 0x86, 0x05,
	0x61, 0x21, 0x66, 0x83, 0xa6, 0xb1, 0x66, 0xdc, 0xab, 0x74, 0x3f, 0x7d, 0x39, 0x32, 0x3f, 0xd1,
	0xe5, 0xb9, 0x38, 0x09, 0x07, 0x78, 0x80, 0x63, 0x59, 0xa8, 0x2a, 0x22, 0xfb, 0x43, 0x07, 0x5e,
	0x5b, 0x0c, 0x29, 0xe1, 0xd6, 0xc3, 0x83, 0xe3, 0x23, 0xbb, 0x9e, 0x26, 0xfb, 0x36, 0xcb, 0x85,
	0x08, 0xdc, 0xa6, 0x8c, 0x9c, 0x39, 0xaf, 0x40, 0x94, 0x96, 0x81, 0xb8, 0x95, 0x66, 0x7c, 0x54,
	0x80, 0x79, 0x0c, 0x8d, 0xbe, 0xec, 0xca, 0x61, 0xaa, 0xad, 0x66, 0x79, 0xad, 0x7c, 0x6f, 0x65,
	0x73, 0xdd, 0xd2, 0x6c, 0xa7, 0xfc, 0x58, 0x73, 0x19, 0xe8, 0x56, 0x5e, 0x8c, 0xcc, 0xb7, 0xec,
	0x7a, 0x3f, 0xcf, 0xca, 0x76, 0xe5, 0xef, 0xe7, 0xa6, 0xb1, 0xfe, 0x8f, 0x01, 0x77, 0x8f, 0x45,
	0xcc, 0xb0, 0x47, 0x8e, 0x62, 0x97, 0x9c, 0x44, 0xd9, 0xa5, 0x94, 0x5c, 0xf4, 0x0c, 0x6e, 0x70,
	0x75, 0xe8, 0x44, 0xb1, 0x4b, 0x1c, 0xdf, 0x95, 0xd4, 0xd5, 0xbb, 0x8f, 0xc7, 0x23, 0xb3, 0x9e,
	0x8b, 0xdb, 0xdf, 0x7d, 0x39, 0x32, 0xb7, 0x2f, 0xd5, 0x68, 0x21, 0xda, 0xae, 0xf3, 0xdc, 0xd2,
	0x45, 0x27, 0x70, 0x33, 0x89, 0x26, 0xfd, 0xa6, 0xb5, 0xf0, 0x66, 0x49, 0xf6, 0xfb, 0xe1, 0xfc,
	0x7e, 0x8b, 0x85, 0xeb, 0x8e, 0x6f, 0x24, 0x85, 0x5d, 0xbe, 0xfe, 0x67, 0x09, 0x9a, 0xaf, 0x09,
	0xe1, 0xe8, 0x67, 0x03, 0xaa, 0x8c, 0xd0, 0xc0, 0xef, 0x63, 0xde, 0x34, 0x24, 0xd8, 0x96, 0x95,
	0x93, 0xf2, 0xeb, 0xc0, 0xb8, 0x65, 0xeb, 0xa8, 0xbd, 0x48, 0xb0, 0x61, 0xb7, 0x9b, 0x62, 0x9f,
	0x5f, 0x2c, 0x45, 0xc7, 0xa4, 0x10, 0xd4, 0x81, 0xeb, 0x5c, 0x60, 0x91, 0x70, 0xa9, 0xa8, 0xc6,
	0xe6, 0x5a, 0x56, 0x52, 0x66, 0x94, 0x69, 0x59, 0xc7, 0xf2, 0x9e, 0xad, 0xef, 0xb7, 0x30, 0xd4,
	0x0b, 0x85, 0xa1, 0x9b, 0x50, 0x1e, 0x90, 0xa1, 0x7a, 0x41, 0x3b, 0xfd, 0x44, 0xdb, 0x70, 0xed,
	0x0c, 0x07, 0x09, 0x91, 0xb9, 0x17, 0xe4, 0xd6, 0x56, 0x21, 0xdb, 0xa5, 0x8e, 0xa1, 0x35, 0xf4,
	0x1f, 0xc0, 0xfb, 0x87, 0xda, 0xad, 0xf6, 0x64, 0x18, 0xec, 0x12, 0xde, 0x67, 0x3e, 0x15, 0x31,
	0x43, 0x7b, 0x50, 0xcd, 0xdc, 0x2c, 0xd1, 0x57, 0x36, 0x37, 0x66, 0xba, 0xc8, 0x12, 0x4c, 0xc3,
	0xe4, 0x23, 0x1a, 0xf6, 0x24, 0x14, 0xf5, 0x00, 0xa6, 0xfe, 0xd7, 0x25, 0x7f, 0x5e, 0x78, 0xa1,
	0x37, 0x55, 0x31, 0xed, 0x67, 0x06, 0xa2, 0x16, 0x64, 0x47, 0xe8, 0x07, 0xa8, 0x51, 0x42, 0x18,
	0x77, 0x42, 0x4c, 0x9b, 0x65, 0x09, 0xb1, 0xb3, 0x38, 0xc4, 0x13, 0x42, 0xd8, 0x74, 0x79, 0x88,
	0xa9, 0x16, 0x62, 0x55, 0xe6, 0x3c, 0xc4, 0x14, 0xfd, 0x64, 0x40, 0x8d, 0x44, 0x2e, 0x8d, 0xfd,
	0x48, 0xf0, 0x66, 0x45, 0xaa, 0xac, 0xb3, 0x38, 0xc0, 0x5e, 0x16, 0xaa, 0xa4, 0xf6, 0xd9, 0xf9,
	0x85, 0xb9, 0x75, 0x29, 0x99, 0x69, 0x7d, 0x4d, 0x6b, 0x68, 0xfd, 0x5b, 0x86, 0xdb, 0x73, 0xa8,
	0x49, 0x99, 0x10, 0xcc, 0x0f, 0x1d, 0x2f, 0xe0, 0x91, 0x1e, 0x98, 0x5f, 0x8c, 0x47, 0x66, 0xf5,
	0x1b, 0xe6, 0x87, 0xe9, 0x90, 0xba, 0xda, 0x64, 0xab, 0xa6, 0x39, 0x1f, 0x06, 0x3c, 0x42, 0x4f,
	0x26, 0x03, 0xed, 0xd4, 0x4f, 0xcd, 0x3f, 0xd4, 0x06, 0xdf, 0x98, 0xef, 0xb9, 0xc2, 0x48, 0xd7,
	0xef, 0xa6, 0x27, 0xda, 0x23, 0x15, 0x8f, 0x7e, 0x33, 0xe6, 0x4c, 0x0d, 0x35, 0x25, 0xed, 0xa5,
	0x64, 0x62, 0xbd, 0x62, 0x78, 0x45, 0xfe, 0x83, 0xf3, 0x0b, 0xb3, 0x73, 0x29, 0x06, 0x26, 0xa9,
	0xf7, 0x77, 0x67, 0x66, 0x53, 0xcb, 0x87, 0x3b, 0xf3, 0x60, 0xe6, 0xb8, 0x76, 0xa7, 0xe8, 0xda,
	0x8f, 0x16, 0x1a, 0x52, 0x39, 0xdb, 0xb6, 0xbe, 0x86, 0x46, 0x51, 0xa9, 0xe8, 0x2e, 0x94, 0x13,
	0x16, 0x48, 0x90, 0x5a, 0xf7, 0xed, 0xf1, 0xc8, 0x2c, 0x9f, 0xd8, 0x07, 0x76, 0xba, 0x87, 0x3e,
	0x00, 0xf0, 0xb9, 0x13, 0x10, 0xcc, 0x22, 0xc2, 0x24, 0x64, 0xd5, 0xae, 0xf9, 0xfc, 0x40, 0x6d,
	0xb4, 0x7e, 0x2f, 0xc1, 0xad, 0x19, 0xd9, 0xa3, 0x5f, 0x0c, 0xb8, 0x26, 0x35, 0xaf, 0x07, 0xe9,
	0x57, 0x4b, 0x78, 0x48, 0xee, 0x2c, 0x2b, 0x78, 0x55, 0x0d, 0xda, 0x80, 0x3a, 0xa6, 0x34, 0xf0,
	0x89, 0xeb, 0xf8, 0x91, 0x4b, 0x7e, 0x54, 0xff, 0xa6, 0xed, 0x77, 0xf4, 0xe6, 0x7e, 0xba, 0xd7,
	0x62, 0x00, 0x53, 0xc8, 0x3c, 0xff, 0x15, 0xc5, 0xff, 0x51, 0x91, 0xff, 0xce, 0x55, 0x7b, 0xcb,
	0x3f, 0xc9, 0x03, 0x68, 0x14, 0xbd, 0x3d, 0x07, 0xf7, 0x4e, 0x1e, 0xb7, 0x96, 0x8b, 0xee, 0xee,
	0xbc, 0x18, 0xaf, 0x1a, 0x7f, 0x8c, 0x57, 0x8d, 0xe7, 0x7f, 0xad, 0x1a, 0xdf, 0xdd, 0x5f, 0x84,
	0xa0, 0xc9, 0xaf, 0xb9, 0xde, 0x75, 0xf9, 0xbd, 0xf5, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x56,
	0xa5, 0x42, 0x08, 0xe2, 0x09, 0x00, 0x00,
}

func (this *LogStreamCommitResults) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogStreamCommitResults)
	if !ok {
		that2, ok := that.(LogStreamCommitResults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HighWatermark != that1.HighWatermark {
		return false
	}
	if this.PrevHighWatermark != that1.PrevHighWatermark {
		return false
	}
	if len(this.CommitResults) != len(that1.CommitResults) {
		return false
	}
	for i := range this.CommitResults {
		if !this.CommitResults[i].Equal(&that1.CommitResults[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LogStreamUncommitReports) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogStreamUncommitReports)
	if !ok {
		that2, ok := that.(LogStreamUncommitReports)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Replicas) != len(that1.Replicas) {
		return false
	}
	for i := range this.Replicas {
		a := this.Replicas[i]
		b := that1.Replicas[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *LogStreamCommitResults) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStreamCommitResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStreamCommitResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CommitResults) > 0 {
		for iNdEx := len(m.CommitResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommitResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PrevHighWatermark != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.PrevHighWatermark))
		i--
		dAtA[i] = 0x10
	}
	if m.HighWatermark != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.HighWatermark))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StorageNodeUncommitReport) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageNodeUncommitReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageNodeUncommitReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UncommitReports) > 0 {
		for iNdEx := len(m.UncommitReports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UncommitReports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StorageNodeID != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.StorageNodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogStreamUncommitReports) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStreamUncommitReports) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStreamUncommitReports) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Replicas) > 0 {
		for k := range m.Replicas {
			v := m.Replicas[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRepositoryDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRepositoryDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRepositoryDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Endpoints) > 0 {
		for k := range m.Endpoints {
			v := m.Endpoints[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.PeersMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LogStream != nil {
		{
			size, err := m.LogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UncommitReports) > 0 {
		for k := range m.UncommitReports {
			v := m.UncommitReports[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CommitHistory) > 0 {
		for iNdEx := len(m.CommitHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommitHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TrimGLSN != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.TrimGLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRepositoryDescriptor_PeerDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRepositoryDescriptor_PeerDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRepositoryDescriptor_PeerDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsLearner {
		i--
		if m.IsLearner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AppliedIndex != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.AppliedIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Peers) > 0 {
		for k := range m.Peers {
			v := m.Peers[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaftMetadataRepository(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftMetadataRepository(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogStreamCommitResults) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HighWatermark != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.HighWatermark))
	}
	if m.PrevHighWatermark != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.PrevHighWatermark))
	}
	if len(m.CommitResults) > 0 {
		for _, e := range m.CommitResults {
			l = e.ProtoSize()
			n += 1 + l + sovRaftMetadataRepository(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StorageNodeUncommitReport) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageNodeID != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.StorageNodeID))
	}
	if len(m.UncommitReports) > 0 {
		for _, e := range m.UncommitReports {
			l = e.ProtoSize()
			n += 1 + l + sovRaftMetadataRepository(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogStreamUncommitReports) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Replicas) > 0 {
		for k, v := range m.Replicas {
			_ = k
			_ = v
			l = v.ProtoSize()
			mapEntrySize := 1 + sovRaftMetadataRepository(uint64(k)) + 1 + l + sovRaftMetadataRepository(uint64(l))
			n += mapEntrySize + 1 + sovRaftMetadataRepository(uint64(mapEntrySize))
		}
	}
	if m.Status != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataRepositoryDescriptor) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.ProtoSize()
		n += 1 + l + sovRaftMetadataRepository(uint64(l))
	}
	if m.LogStream != nil {
		l = m.LogStream.ProtoSize()
		n += 1 + l + sovRaftMetadataRepository(uint64(l))
	}
	l = m.PeersMap.ProtoSize()
	n += 1 + l + sovRaftMetadataRepository(uint64(l))
	if len(m.Endpoints) > 0 {
		for k, v := range m.Endpoints {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRaftMetadataRepository(uint64(k)) + 1 + len(v) + sovRaftMetadataRepository(uint64(len(v)))
			n += mapEntrySize + 1 + sovRaftMetadataRepository(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrimGLSN != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.TrimGLSN))
	}
	if len(m.CommitHistory) > 0 {
		for _, e := range m.CommitHistory {
			l = e.ProtoSize()
			n += 1 + l + sovRaftMetadataRepository(uint64(l))
		}
	}
	if len(m.UncommitReports) > 0 {
		for k, v := range m.UncommitReports {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.ProtoSize()
				l += 1 + sovRaftMetadataRepository(uint64(l))
			}
			mapEntrySize := 1 + sovRaftMetadataRepository(uint64(k)) + l
			n += mapEntrySize + 1 + sovRaftMetadataRepository(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataRepositoryDescriptor_PeerDescriptor) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovRaftMetadataRepository(uint64(l))
	}
	if m.IsLearner {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for k, v := range m.Peers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.ProtoSize()
				l += 1 + sovRaftMetadataRepository(uint64(l))
			}
			mapEntrySize := 1 + sovRaftMetadataRepository(uint64(k)) + l
			n += mapEntrySize + 1 + sovRaftMetadataRepository(uint64(mapEntrySize))
		}
	}
	if m.AppliedIndex != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.AppliedIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftMetadataRepository(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftMetadataRepository(x uint64) (n int) {
	return sovRaftMetadataRepository(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogStreamCommitResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamCommitResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamCommitResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighWatermark", wireType)
			}
			m.HighWatermark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighWatermark |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevHighWatermark", wireType)
			}
			m.PrevHighWatermark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevHighWatermark |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitResults = append(m.CommitResults, snpb.LogStreamCommitResult{})
			if err := m.CommitResults[len(m.CommitResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageNodeUncommitReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageNodeUncommitReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageNodeUncommitReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNodeID", wireType)
			}
			m.StorageNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageNodeID |= github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncommitReports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UncommitReports = append(m.UncommitReports, snpb.LogStreamUncommitReport{})
			if err := m.UncommitReports[len(m.UncommitReports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStreamUncommitReports) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamUncommitReports: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamUncommitReports: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replicas == nil {
				m.Replicas = make(map[github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID]snpb.LogStreamUncommitReport)
			}
			var mapkey uint32
			mapvalue := &snpb.LogStreamUncommitReport{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftMetadataRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &snpb.LogStreamUncommitReport{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Replicas[github_daumkakao_com_varlog_varlog_pkg_types.StorageNodeID(mapkey)] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= varlogpb.LogStreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRepositoryDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataRepositoryDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataRepositoryDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &varlogpb.MetadataDescriptor{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogStream == nil {
				m.LogStream = &MetadataRepositoryDescriptor_LogStreamDescriptor{}
			}
			if err := m.LogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeersMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PeersMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoints == nil {
				m.Endpoints = make(map[github_daumkakao_com_varlog_varlog_pkg_types.NodeID]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftMetadataRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Endpoints[github_daumkakao_com_varlog_varlog_pkg_types.NodeID(mapkey)] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrimGLSN", wireType)
			}
			m.TrimGLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrimGLSN |= github_daumkakao_com_varlog_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitHistory = append(m.CommitHistory, &LogStreamCommitResults{})
			if err := m.CommitHistory[len(m.CommitHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncommitReports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UncommitReports == nil {
				m.UncommitReports = make(map[github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID]*LogStreamUncommitReports)
			}
			var mapkey uint32
			var mapvalue *LogStreamUncommitReports
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftMetadataRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LogStreamUncommitReports{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UncommitReports[github_daumkakao_com_varlog_varlog_pkg_types.LogStreamID(mapkey)] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRepositoryDescriptor_PeerDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLearner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLearner = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRepositoryDescriptor_PeerDescriptorMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerDescriptorMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerDescriptorMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peers == nil {
				m.Peers = make(map[github_daumkakao_com_varlog_varlog_pkg_types.NodeID]*MetadataRepositoryDescriptor_PeerDescriptor)
			}
			var mapkey uint64
			var mapvalue *MetadataRepositoryDescriptor_PeerDescriptor
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftMetadataRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MetadataRepositoryDescriptor_PeerDescriptor{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Peers[github_daumkakao_com_varlog_varlog_pkg_types.NodeID(mapkey)] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftMetadataRepository(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftMetadataRepository
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftMetadataRepository
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftMetadataRepository
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftMetadataRepository        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftMetadataRepository          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftMetadataRepository = fmt.Errorf("proto: unexpected end of group")
)
