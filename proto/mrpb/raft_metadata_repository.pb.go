// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft_metadata_repository.proto

package mrpb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_daumkakao_com_varlog_varlog_pkg_varlog_types "github.daumkakao.com/varlog/varlog/pkg/varlog/types"
	snpb "github.daumkakao.com/varlog/varlog/proto/snpb"
	varlogpb "github.daumkakao.com/varlog/varlog/proto/varlogpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MetadataRepositoryDescriptor struct {
	Metadata             *varlogpb.MetadataDescriptor                                          `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	LogStream            *MetadataRepositoryDescriptor_LogStreamDescriptor                     `protobuf:"bytes,2,opt,name=log_stream,json=logStream,proto3" json:"log_stream,omitempty"`
	Peers                map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.NodeID]string `protobuf:"bytes,3,rep,name=peers,proto3,castkey=github.daumkakao.com/varlog/varlog/pkg/varlog/types.NodeID" json:"peers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Endpoints            map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.NodeID]string `protobuf:"bytes,4,rep,name=endpoints,proto3,castkey=github.daumkakao.com/varlog/varlog/pkg/varlog/types.NodeID" json:"endpoints,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                                              `json:"-"`
	XXX_unrecognized     []byte                                                                `json:"-"`
	XXX_sizecache        int32                                                                 `json:"-"`
}

func (m *MetadataRepositoryDescriptor) Reset()         { *m = MetadataRepositoryDescriptor{} }
func (m *MetadataRepositoryDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetadataRepositoryDescriptor) ProtoMessage()    {}
func (*MetadataRepositoryDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3db687e1bfe5c0fa, []int{0}
}
func (m *MetadataRepositoryDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRepositoryDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRepositoryDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRepositoryDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRepositoryDescriptor.Merge(m, src)
}
func (m *MetadataRepositoryDescriptor) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MetadataRepositoryDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRepositoryDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRepositoryDescriptor proto.InternalMessageInfo

func (m *MetadataRepositoryDescriptor) GetMetadata() *varlogpb.MetadataDescriptor {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MetadataRepositoryDescriptor) GetLogStream() *MetadataRepositoryDescriptor_LogStreamDescriptor {
	if m != nil {
		return m.LogStream
	}
	return nil
}

func (m *MetadataRepositoryDescriptor) GetPeers() map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.NodeID]string {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *MetadataRepositoryDescriptor) GetEndpoints() map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.NodeID]string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type MetadataRepositoryDescriptor_LocalLogStreamReplica struct {
	UncommittedLLSNOffset github_daumkakao_com_varlog_varlog_pkg_varlog_types.LLSN `protobuf:"varint,1,opt,name=uncommitted_llsn_offset,json=uncommittedLlsnOffset,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/varlog/types.LLSN" json:"uncommitted_llsn_offset,omitempty"`
	UncommittedLLSNLength uint64                                                   `protobuf:"varint,2,opt,name=uncommitted_llsn_length,json=uncommittedLlsnLength,proto3" json:"uncommitted_llsn_length,omitempty"`
	KnownHighWatermark    github_daumkakao_com_varlog_varlog_pkg_varlog_types.GLSN `protobuf:"varint,3,opt,name=known_high_watermark,json=knownHighWatermark,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN" json:"known_high_watermark,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                                 `json:"-"`
	XXX_unrecognized      []byte                                                   `json:"-"`
	XXX_sizecache         int32                                                    `json:"-"`
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) Reset() {
	*m = MetadataRepositoryDescriptor_LocalLogStreamReplica{}
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) String() string {
	return proto.CompactTextString(m)
}
func (*MetadataRepositoryDescriptor_LocalLogStreamReplica) ProtoMessage() {}
func (*MetadataRepositoryDescriptor_LocalLogStreamReplica) Descriptor() ([]byte, []int) {
	return fileDescriptor_3db687e1bfe5c0fa, []int{0, 0}
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRepositoryDescriptor_LocalLogStreamReplica.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRepositoryDescriptor_LocalLogStreamReplica.Merge(m, src)
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRepositoryDescriptor_LocalLogStreamReplica.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRepositoryDescriptor_LocalLogStreamReplica proto.InternalMessageInfo

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) GetUncommittedLLSNOffset() github_daumkakao_com_varlog_varlog_pkg_varlog_types.LLSN {
	if m != nil {
		return m.UncommittedLLSNOffset
	}
	return 0
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) GetUncommittedLLSNLength() uint64 {
	if m != nil {
		return m.UncommittedLLSNLength
	}
	return 0
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) GetKnownHighWatermark() github_daumkakao_com_varlog_varlog_pkg_varlog_types.GLSN {
	if m != nil {
		return m.KnownHighWatermark
	}
	return 0
}

type MetadataRepositoryDescriptor_LocalLogStreamReplicas struct {
	Replicas             map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.StorageNodeID]*MetadataRepositoryDescriptor_LocalLogStreamReplica `protobuf:"bytes,1,rep,name=replicas,proto3,castkey=github.daumkakao.com/varlog/varlog/pkg/varlog/types.StorageNodeID" json:"replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status               varlogpb.LogStreamStatus                                                                                                  `protobuf:"varint,2,opt,name=status,proto3,enum=varlog.varlogpb.LogStreamStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                                  `json:"-"`
	XXX_unrecognized     []byte                                                                                                                    `json:"-"`
	XXX_sizecache        int32                                                                                                                     `json:"-"`
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) Reset() {
	*m = MetadataRepositoryDescriptor_LocalLogStreamReplicas{}
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) String() string {
	return proto.CompactTextString(m)
}
func (*MetadataRepositoryDescriptor_LocalLogStreamReplicas) ProtoMessage() {}
func (*MetadataRepositoryDescriptor_LocalLogStreamReplicas) Descriptor() ([]byte, []int) {
	return fileDescriptor_3db687e1bfe5c0fa, []int{0, 1}
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRepositoryDescriptor_LocalLogStreamReplicas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRepositoryDescriptor_LocalLogStreamReplicas.Merge(m, src)
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRepositoryDescriptor_LocalLogStreamReplicas.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRepositoryDescriptor_LocalLogStreamReplicas proto.InternalMessageInfo

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) GetReplicas() map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.StorageNodeID]*MetadataRepositoryDescriptor_LocalLogStreamReplica {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) GetStatus() varlogpb.LogStreamStatus {
	if m != nil {
		return m.Status
	}
	return varlogpb.LogStreamStatusRunning
}

type MetadataRepositoryDescriptor_LogStreamDescriptor struct {
	TrimGLSN             github_daumkakao_com_varlog_varlog_pkg_varlog_types.GLSN                                                                 `protobuf:"varint,1,opt,name=trim_glsn,json=trimGlsn,proto3,casttype=github.daumkakao.com/varlog/varlog/pkg/varlog/types.GLSN" json:"trim_glsn,omitempty"`
	GlobalLogStreams     []*snpb.GlobalLogStreamDescriptor                                                                                        `protobuf:"bytes,2,rep,name=global_log_streams,json=globalLogStreams,proto3" json:"global_log_streams,omitempty"`
	LocalLogStreams      map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.LogStreamID]*MetadataRepositoryDescriptor_LocalLogStreamReplicas `protobuf:"bytes,3,rep,name=local_log_streams,json=localLogStreams,proto3,castkey=github.daumkakao.com/varlog/varlog/pkg/varlog/types.LogStreamID" json:"local_log_streams,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                                 `json:"-"`
	XXX_unrecognized     []byte                                                                                                                   `json:"-"`
	XXX_sizecache        int32                                                                                                                    `json:"-"`
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) Reset() {
	*m = MetadataRepositoryDescriptor_LogStreamDescriptor{}
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) String() string {
	return proto.CompactTextString(m)
}
func (*MetadataRepositoryDescriptor_LogStreamDescriptor) ProtoMessage() {}
func (*MetadataRepositoryDescriptor_LogStreamDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3db687e1bfe5c0fa, []int{0, 2}
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRepositoryDescriptor_LogStreamDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRepositoryDescriptor_LogStreamDescriptor.Merge(m, src)
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRepositoryDescriptor_LogStreamDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRepositoryDescriptor_LogStreamDescriptor proto.InternalMessageInfo

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) GetTrimGLSN() github_daumkakao_com_varlog_varlog_pkg_varlog_types.GLSN {
	if m != nil {
		return m.TrimGLSN
	}
	return 0
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) GetGlobalLogStreams() []*snpb.GlobalLogStreamDescriptor {
	if m != nil {
		return m.GlobalLogStreams
	}
	return nil
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) GetLocalLogStreams() map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.LogStreamID]*MetadataRepositoryDescriptor_LocalLogStreamReplicas {
	if m != nil {
		return m.LocalLogStreams
	}
	return nil
}

func init() {
	proto.RegisterType((*MetadataRepositoryDescriptor)(nil), "varlog.mrpb.MetadataRepositoryDescriptor")
	proto.RegisterMapType((map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.NodeID]string)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.EndpointsEntry")
	proto.RegisterMapType((map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.NodeID]string)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.PeersEntry")
	proto.RegisterType((*MetadataRepositoryDescriptor_LocalLogStreamReplica)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.LocalLogStreamReplica")
	proto.RegisterType((*MetadataRepositoryDescriptor_LocalLogStreamReplicas)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.LocalLogStreamReplicas")
	proto.RegisterMapType((map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.StorageNodeID]*MetadataRepositoryDescriptor_LocalLogStreamReplica)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.LocalLogStreamReplicas.ReplicasEntry")
	proto.RegisterType((*MetadataRepositoryDescriptor_LogStreamDescriptor)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.LogStreamDescriptor")
	proto.RegisterMapType((map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.LogStreamID]*MetadataRepositoryDescriptor_LocalLogStreamReplicas)(nil), "varlog.mrpb.MetadataRepositoryDescriptor.LogStreamDescriptor.LocalLogStreamsEntry")
}

func init() { proto.RegisterFile("raft_metadata_repository.proto", fileDescriptor_3db687e1bfe5c0fa) }

var fileDescriptor_3db687e1bfe5c0fa = []byte{
	// 765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x4f, 0x13, 0x4f,
	0x14, 0xcf, 0xd0, 0x42, 0xda, 0x21, 0x5f, 0xe0, 0x3b, 0x5f, 0xf8, 0x52, 0x1b, 0xd3, 0x25, 0x9a,
	0x18, 0x2e, 0x6c, 0x13, 0xf4, 0xd0, 0x20, 0x8a, 0x56, 0x1a, 0x20, 0xa9, 0xa8, 0x5b, 0xd1, 0x84,
	0xcb, 0x66, 0xb6, 0x9d, 0x6e, 0x37, 0x9d, 0xdd, 0xd9, 0xcc, 0x4c, 0x21, 0x4d, 0x3c, 0x11, 0x4f,
	0x24, 0xc6, 0x9b, 0x67, 0x2e, 0xfe, 0x01, 0xfe, 0x0d, 0x5e, 0x38, 0xfa, 0x17, 0x94, 0xa4, 0x5e,
	0x3c, 0x7a, 0xf6, 0x64, 0x76, 0x76, 0xb7, 0x3f, 0xa4, 0x1a, 0x68, 0x3d, 0xf5, 0x4d, 0xe7, 0xbd,
	0xcf, 0xfb, 0xbc, 0xf7, 0x3e, 0xf3, 0x5a, 0x98, 0xe3, 0xb8, 0x2e, 0x4d, 0x97, 0x48, 0x5c, 0xc3,
	0x12, 0x9b, 0x9c, 0xf8, 0x4c, 0x38, 0x92, 0xf1, 0xb6, 0xee, 0x73, 0x26, 0x19, 0x9a, 0x3d, 0xc2,
	0x9c, 0x32, 0x5b, 0x77, 0xb9, 0x6f, 0x65, 0xd7, 0x6c, 0x47, 0x36, 0x5a, 0x96, 0x5e, 0x65, 0x6e,
	0xde, 0x66, 0x36, 0xcb, 0x2b, 0x1f, 0xab, 0x55, 0x57, 0x27, 0x75, 0x50, 0x56, 0x18, 0x9b, 0x5d,
	0x0e, 0x63, 0x7d, 0x2b, 0x1f, 0xe3, 0x47, 0x17, 0x39, 0xe1, 0xf9, 0x56, 0x9e, 0x32, 0xdb, 0x14,
	0x92, 0x13, 0xec, 0xaa, 0xb4, 0x5c, 0x12, 0x1e, 0xde, 0xdf, 0x7a, 0x3f, 0x0f, 0x6f, 0x3e, 0x8d,
	0x42, 0x8c, 0x1e, 0xa3, 0x6d, 0x22, 0xaa, 0xdc, 0xf1, 0x25, 0xe3, 0xa8, 0x04, 0x53, 0x31, 0x64,
	0x06, 0xac, 0x80, 0xd5, 0xd9, 0xf5, 0xdb, 0x7a, 0x44, 0x34, 0xce, 0xa9, 0xc7, 0x00, 0xfd, 0xb0,
	0x62, 0xf2, 0xbc, 0xa3, 0x01, 0xa3, 0x17, 0x8a, 0x2c, 0x08, 0xfb, 0x24, 0x32, 0x53, 0x0a, 0xe8,
	0x81, 0x3e, 0x50, 0xb1, 0xfe, 0x27, 0x16, 0x7a, 0x99, 0xd9, 0x15, 0x15, 0x7a, 0x29, 0x45, 0x9a,
	0xc6, 0x57, 0xe8, 0x14, 0xc0, 0x69, 0x9f, 0x10, 0x2e, 0x32, 0x89, 0x95, 0xc4, 0xea, 0xec, 0xfa,
	0xbd, 0xab, 0xe3, 0x3f, 0x0f, 0xc2, 0x4a, 0x9e, 0xe4, 0xed, 0xe2, 0xc3, 0x93, 0x0b, 0x6d, 0x23,
	0xea, 0x7e, 0x0d, 0xb7, 0xdc, 0x26, 0x6e, 0x62, 0xa6, 0xe6, 0x10, 0xa2, 0xc5, 0x1f, 0x7e, 0xb3,
	0x67, 0xca, 0xb6, 0x4f, 0x84, 0xbe, 0xcf, 0x6a, 0x64, 0x6f, 0xdb, 0x08, 0x29, 0xa0, 0x0f, 0x00,
	0xa6, 0x89, 0x57, 0xf3, 0x99, 0xe3, 0x49, 0x91, 0x49, 0x2a, 0x42, 0x85, 0xab, 0x13, 0x2a, 0xc5,
	0xa1, 0x7f, 0x87, 0x54, 0x9f, 0x4a, 0xf6, 0xfb, 0x14, 0x5c, 0x2a, 0xb3, 0x2a, 0xa6, 0xbd, 0x9e,
	0x1a, 0xc4, 0xa7, 0x4e, 0x15, 0xa3, 0x77, 0x00, 0x2e, 0xb7, 0xbc, 0x2a, 0x73, 0x5d, 0x47, 0x4a,
	0x52, 0x33, 0x29, 0x15, 0x9e, 0xc9, 0xea, 0x75, 0x41, 0xa4, 0x1a, 0x7d, 0xb2, 0x78, 0xd0, 0xed,
	0x68, 0x4b, 0x07, 0x7d, 0x97, 0x72, 0xb9, 0xb2, 0xff, 0x4c, 0x39, 0xfc, 0xe8, 0x68, 0x85, 0x71,
	0xf8, 0x05, 0x08, 0xc6, 0xd2, 0x40, 0xd6, 0x32, 0x15, 0x5e, 0x08, 0x89, 0x5e, 0x8c, 0xa0, 0x43,
	0x89, 0x67, 0xcb, 0x86, 0x12, 0x50, 0xb2, 0x78, 0x63, 0x04, 0x9d, 0xb2, 0x72, 0xb8, 0x04, 0x19,
	0x7e, 0x8d, 0x3c, 0xb8, 0xd8, 0xf4, 0xd8, 0xb1, 0x67, 0x36, 0x1c, 0xbb, 0x61, 0x1e, 0x63, 0x49,
	0xb8, 0x8b, 0x79, 0x33, 0x93, 0x50, 0x78, 0x9b, 0xe3, 0x56, 0xb1, 0x13, 0x54, 0x81, 0x14, 0xf2,
	0xae, 0x63, 0x37, 0x5e, 0xc7, 0xb8, 0x1b, 0xc9, 0x6f, 0x67, 0x1a, 0xc8, 0x9e, 0x26, 0xe0, 0xff,
	0x23, 0x5b, 0x2e, 0xd0, 0x27, 0x00, 0x53, 0x3c, 0x3a, 0x64, 0x80, 0x52, 0xc9, 0xfe, 0x75, 0x9e,
	0xc5, 0x28, 0x50, 0x3d, 0x36, 0x42, 0xed, 0x94, 0x4e, 0x2e, 0xb4, 0xc7, 0xe3, 0x54, 0x55, 0x91,
	0x8c, 0x63, 0x9b, 0x44, 0x12, 0xea, 0xd1, 0x44, 0x05, 0x38, 0x23, 0x24, 0x96, 0x2d, 0xa1, 0xc6,
	0x30, 0xb7, 0xbe, 0x72, 0x69, 0x21, 0xf4, 0x28, 0x55, 0x94, 0x9f, 0x11, 0xf9, 0x67, 0xdf, 0xc0,
	0x7f, 0x86, 0xb8, 0xa1, 0x05, 0x98, 0x68, 0x92, 0xb6, 0x52, 0xd7, 0xb4, 0x11, 0x98, 0xe8, 0x00,
	0x4e, 0x1f, 0x61, 0xda, 0x22, 0xd1, 0x8e, 0xd8, 0x9a, 0xb0, 0x19, 0x46, 0x88, 0xb6, 0x31, 0x55,
	0x00, 0xd1, 0x30, 0x3e, 0x26, 0xe1, 0x7f, 0x23, 0xd6, 0x09, 0x22, 0x30, 0x2d, 0xb9, 0xe3, 0x9a,
	0x36, 0x15, 0x5e, 0x24, 0xf7, 0xdd, 0x6e, 0x47, 0x4b, 0xbd, 0xe4, 0x8e, 0x1b, 0xcc, 0x77, 0x22,
	0x6d, 0xa4, 0x02, 0xe8, 0x1d, 0x2a, 0x3c, 0x74, 0x08, 0x91, 0x4d, 0x99, 0x85, 0xa9, 0xd9, 0xdf,
	0x87, 0x41, 0x23, 0x83, 0xc9, 0xdf, 0x89, 0x8b, 0x0d, 0x96, 0xb6, 0xbe, 0xa3, 0xdc, 0x7e, 0xbf,
	0xf9, 0x16, 0xec, 0x61, 0x07, 0x81, 0x3e, 0x03, 0xf8, 0x2f, 0x0d, 0xba, 0x30, 0x84, 0x1d, 0x2e,
	0x43, 0x63, 0xa2, 0x65, 0xfb, 0x4b, 0x73, 0x23, 0x65, 0x3d, 0x39, 0xb9, 0xd0, 0xb6, 0xc6, 0x7a,
	0xf5, 0x31, 0xd0, 0xde, 0xb6, 0x31, 0x4f, 0x87, 0xa1, 0xb3, 0x6f, 0x01, 0x5c, 0x1c, 0x95, 0x6e,
	0x50, 0x2c, 0xc9, 0x50, 0x2c, 0xaf, 0x86, 0xc5, 0xf2, 0x68, 0xd2, 0x97, 0x33, 0xa0, 0x96, 0x6c,
	0x01, 0xc2, 0xfe, 0xaf, 0xc2, 0x88, 0xdc, 0x8b, 0x83, 0xb9, 0xd3, 0x83, 0x91, 0x9b, 0x70, 0x6e,
	0x78, 0x7d, 0x5f, 0x27, 0xba, 0x78, 0xff, 0xbc, 0x9b, 0x03, 0x5f, 0xba, 0x39, 0x70, 0xf6, 0x35,
	0x07, 0x0e, 0xd7, 0xae, 0xd2, 0x5e, 0xf5, 0x6f, 0x20, 0xa8, 0xd9, 0x9a, 0x51, 0xf6, 0xdd, 0x9f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x9c, 0x2d, 0x1a, 0x6c, 0x08, 0x00, 0x00,
}

func (this *MetadataRepositoryDescriptor_LocalLogStreamReplica) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetadataRepositoryDescriptor_LocalLogStreamReplica)
	if !ok {
		that2, ok := that.(MetadataRepositoryDescriptor_LocalLogStreamReplica)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UncommittedLLSNOffset != that1.UncommittedLLSNOffset {
		return false
	}
	if this.UncommittedLLSNLength != that1.UncommittedLLSNLength {
		return false
	}
	if this.KnownHighWatermark != that1.KnownHighWatermark {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MetadataRepositoryDescriptor_LocalLogStreamReplicas) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetadataRepositoryDescriptor_LocalLogStreamReplicas)
	if !ok {
		that2, ok := that.(MetadataRepositoryDescriptor_LocalLogStreamReplicas)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Replicas) != len(that1.Replicas) {
		return false
	}
	for i := range this.Replicas {
		if !this.Replicas[i].Equal(that1.Replicas[i]) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *MetadataRepositoryDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRepositoryDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRepositoryDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Endpoints) > 0 {
		for k := range m.Endpoints {
			v := m.Endpoints[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Peers) > 0 {
		for k := range m.Peers {
			v := m.Peers[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LogStream != nil {
		{
			size, err := m.LogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.KnownHighWatermark != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.KnownHighWatermark))
		i--
		dAtA[i] = 0x18
	}
	if m.UncommittedLLSNLength != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.UncommittedLLSNLength))
		i--
		dAtA[i] = 0x10
	}
	if m.UncommittedLLSNOffset != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.UncommittedLLSNOffset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Replicas) > 0 {
		for k := range m.Replicas {
			v := m.Replicas[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LocalLogStreams) > 0 {
		for k := range m.LocalLogStreams {
			v := m.LocalLogStreams[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GlobalLogStreams) > 0 {
		for iNdEx := len(m.GlobalLogStreams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GlobalLogStreams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TrimGLSN != 0 {
		i = encodeVarintRaftMetadataRepository(dAtA, i, uint64(m.TrimGLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaftMetadataRepository(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftMetadataRepository(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetadataRepositoryDescriptor) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.ProtoSize()
		n += 1 + l + sovRaftMetadataRepository(uint64(l))
	}
	if m.LogStream != nil {
		l = m.LogStream.ProtoSize()
		n += 1 + l + sovRaftMetadataRepository(uint64(l))
	}
	if len(m.Peers) > 0 {
		for k, v := range m.Peers {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRaftMetadataRepository(uint64(k)) + 1 + len(v) + sovRaftMetadataRepository(uint64(len(v)))
			n += mapEntrySize + 1 + sovRaftMetadataRepository(uint64(mapEntrySize))
		}
	}
	if len(m.Endpoints) > 0 {
		for k, v := range m.Endpoints {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRaftMetadataRepository(uint64(k)) + 1 + len(v) + sovRaftMetadataRepository(uint64(len(v)))
			n += mapEntrySize + 1 + sovRaftMetadataRepository(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UncommittedLLSNOffset != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.UncommittedLLSNOffset))
	}
	if m.UncommittedLLSNLength != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.UncommittedLLSNLength))
	}
	if m.KnownHighWatermark != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.KnownHighWatermark))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Replicas) > 0 {
		for k, v := range m.Replicas {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.ProtoSize()
				l += 1 + sovRaftMetadataRepository(uint64(l))
			}
			mapEntrySize := 1 + sovRaftMetadataRepository(uint64(k)) + l
			n += mapEntrySize + 1 + sovRaftMetadataRepository(uint64(mapEntrySize))
		}
	}
	if m.Status != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrimGLSN != 0 {
		n += 1 + sovRaftMetadataRepository(uint64(m.TrimGLSN))
	}
	if len(m.GlobalLogStreams) > 0 {
		for _, e := range m.GlobalLogStreams {
			l = e.ProtoSize()
			n += 1 + l + sovRaftMetadataRepository(uint64(l))
		}
	}
	if len(m.LocalLogStreams) > 0 {
		for k, v := range m.LocalLogStreams {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.ProtoSize()
				l += 1 + sovRaftMetadataRepository(uint64(l))
			}
			mapEntrySize := 1 + sovRaftMetadataRepository(uint64(k)) + l
			n += mapEntrySize + 1 + sovRaftMetadataRepository(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftMetadataRepository(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftMetadataRepository(x uint64) (n int) {
	return sovRaftMetadataRepository(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetadataRepositoryDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataRepositoryDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataRepositoryDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &varlogpb.MetadataDescriptor{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogStream == nil {
				m.LogStream = &MetadataRepositoryDescriptor_LogStreamDescriptor{}
			}
			if err := m.LogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peers == nil {
				m.Peers = make(map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.NodeID]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftMetadataRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Peers[github_daumkakao_com_varlog_varlog_pkg_varlog_types.NodeID(mapkey)] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoints == nil {
				m.Endpoints = make(map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.NodeID]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftMetadataRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Endpoints[github_daumkakao_com_varlog_varlog_pkg_varlog_types.NodeID(mapkey)] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplica) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalLogStreamReplica: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalLogStreamReplica: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncommittedLLSNOffset", wireType)
			}
			m.UncommittedLLSNOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UncommittedLLSNOffset |= github_daumkakao_com_varlog_varlog_pkg_varlog_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncommittedLLSNLength", wireType)
			}
			m.UncommittedLLSNLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UncommittedLLSNLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnownHighWatermark", wireType)
			}
			m.KnownHighWatermark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KnownHighWatermark |= github_daumkakao_com_varlog_varlog_pkg_varlog_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRepositoryDescriptor_LocalLogStreamReplicas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalLogStreamReplicas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalLogStreamReplicas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replicas == nil {
				m.Replicas = make(map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.StorageNodeID]*MetadataRepositoryDescriptor_LocalLogStreamReplica)
			}
			var mapkey int32
			var mapvalue *MetadataRepositoryDescriptor_LocalLogStreamReplica
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftMetadataRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MetadataRepositoryDescriptor_LocalLogStreamReplica{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Replicas[github_daumkakao_com_varlog_varlog_pkg_varlog_types.StorageNodeID(mapkey)] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= varlogpb.LogStreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRepositoryDescriptor_LogStreamDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrimGLSN", wireType)
			}
			m.TrimGLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrimGLSN |= github_daumkakao_com_varlog_varlog_pkg_varlog_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalLogStreams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalLogStreams = append(m.GlobalLogStreams, &snpb.GlobalLogStreamDescriptor{})
			if err := m.GlobalLogStreams[len(m.GlobalLogStreams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalLogStreams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalLogStreams == nil {
				m.LocalLogStreams = make(map[github_daumkakao_com_varlog_varlog_pkg_varlog_types.LogStreamID]*MetadataRepositoryDescriptor_LocalLogStreamReplicas)
			}
			var mapkey uint64
			var mapvalue *MetadataRepositoryDescriptor_LocalLogStreamReplicas
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftMetadataRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftMetadataRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MetadataRepositoryDescriptor_LocalLogStreamReplicas{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRaftMetadataRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LocalLogStreams[github_daumkakao_com_varlog_varlog_pkg_varlog_types.LogStreamID(mapkey)] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftMetadataRepository(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftMetadataRepository
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftMetadataRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftMetadataRepository
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftMetadataRepository
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftMetadataRepository
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftMetadataRepository        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftMetadataRepository          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftMetadataRepository = fmt.Errorf("proto: unexpected end of group")
)
