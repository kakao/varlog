syntax = "proto3";

package varlog.mrpb;

import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "varlogpb/metadata.proto";
import "snpb/log_stream_reporter.proto";
import "mrpb/raft_metadata_repository.proto";

option go_package = "github.com/kakao/varlog/proto/mrpb";

option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

message RegisterStorageNode {
  varlogpb.StorageNodeDescriptor storage_node = 1 [(gogoproto.nullable) = true];
}

message UnregisterStorageNode {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
}

message RegisterTopic {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
}

message UnregisterTopic {
  int32 topic_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.TopicID",
    (gogoproto.customname) = "TopicID"
  ];
}

message RegisterLogStream {
  varlogpb.LogStreamDescriptor log_stream = 1 [(gogoproto.nullable) = true];
}

message UnregisterLogStream {
  int32 log_stream_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message UpdateLogStream {
  varlogpb.LogStreamDescriptor log_stream = 1 [(gogoproto.nullable) = true];
}

message Report {
  int32 storage_node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.StorageNodeID",
    (gogoproto.customname) = "StorageNodeID"
  ];
  repeated snpb.LogStreamUncommitReport uncommit_report = 3
      [(gogoproto.nullable) = false];
}

message Reports {
  uint64 node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
  google.protobuf.Timestamp created_time = 2
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  repeated Report reports = 3;
}

message Commit {
  uint64 node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
  google.protobuf.Timestamp created_time = 2
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message CommitResult {
  uint64 node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
  google.protobuf.Timestamp created_time = 2
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  LogStreamCommitResults commit_result = 3;
}

message Seal {
  int32 log_stream_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message Unseal {
  int32 log_stream_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.LogStreamID",
    (gogoproto.customname) = "LogStreamID"
  ];
}

message AddPeer {
  uint64 node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
  string url = 2;
  bool is_learner = 3;
}

message RemovePeer {
  uint64 node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
}

message Endpoint {
  uint64 node_id = 1 [
    (gogoproto.casttype) = "github.com/kakao/varlog/pkg/types.NodeID",
    (gogoproto.customname) = "NodeID"
  ];
  string url = 2;
}

message RecoverStateMachine {
  MetadataRepositoryDescriptor state_machine = 1;
}

message RaftEntry {
  message Request {
    option (gogoproto.onlyone) = true;

    RegisterStorageNode register_storage_node = 1;
    UnregisterStorageNode unregister_storage_node = 2;
    RegisterLogStream register_log_stream = 3;
    UnregisterLogStream unregister_log_stream = 4;
    UpdateLogStream update_log_stream = 5;
    Reports report = 6;
    Commit commit = 7;
    Seal seal = 8;
    Unseal unseal = 9;
    AddPeer add_peer = 10;
    RemovePeer remove_peer = 11;
    Endpoint endpoint = 12;
    RecoverStateMachine recover_state_machine = 13;
    RegisterTopic register_topic = 14;
    UnregisterTopic unregister_topic = 15;
    CommitResult commit_result = 16;
  }
  uint64 node_index = 1;
  uint64 request_index = 2;
  uint64 applied_index = 3;
  Request request = 4 [(gogoproto.nullable) = false];
}

