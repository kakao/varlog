// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/mrpb/metadata_repository.proto

package mrpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	github_com_kakao_varlog_pkg_types "github.com/kakao/varlog/pkg/types"
	snpb "github.com/kakao/varlog/proto/snpb"
	varlogpb "github.com/kakao/varlog/proto/varlogpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetMetadataRequest struct {
}

func (m *GetMetadataRequest) Reset()         { *m = GetMetadataRequest{} }
func (m *GetMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*GetMetadataRequest) ProtoMessage()    {}
func (*GetMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{0}
}
func (m *GetMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetadataRequest.Merge(m, src)
}
func (m *GetMetadataRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetadataRequest proto.InternalMessageInfo

type GetMetadataResponse struct {
	Metadata *varlogpb.MetadataDescriptor `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *GetMetadataResponse) Reset()         { *m = GetMetadataResponse{} }
func (m *GetMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*GetMetadataResponse) ProtoMessage()    {}
func (*GetMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{1}
}
func (m *GetMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetadataResponse.Merge(m, src)
}
func (m *GetMetadataResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetadataResponse proto.InternalMessageInfo

func (m *GetMetadataResponse) GetMetadata() *varlogpb.MetadataDescriptor {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type StorageNodeRequest struct {
	StorageNode *varlogpb.StorageNodeDescriptor `protobuf:"bytes,1,opt,name=storage_node,json=storageNode,proto3" json:"storage_node,omitempty"`
}

func (m *StorageNodeRequest) Reset()         { *m = StorageNodeRequest{} }
func (m *StorageNodeRequest) String() string { return proto.CompactTextString(m) }
func (*StorageNodeRequest) ProtoMessage()    {}
func (*StorageNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{2}
}
func (m *StorageNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageNodeRequest.Merge(m, src)
}
func (m *StorageNodeRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StorageNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StorageNodeRequest proto.InternalMessageInfo

func (m *StorageNodeRequest) GetStorageNode() *varlogpb.StorageNodeDescriptor {
	if m != nil {
		return m.StorageNode
	}
	return nil
}

type LogStreamRequest struct {
	LogStream *varlogpb.LogStreamDescriptor `protobuf:"bytes,1,opt,name=log_stream,json=logStream,proto3" json:"log_stream,omitempty"`
}

func (m *LogStreamRequest) Reset()         { *m = LogStreamRequest{} }
func (m *LogStreamRequest) String() string { return proto.CompactTextString(m) }
func (*LogStreamRequest) ProtoMessage()    {}
func (*LogStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{3}
}
func (m *LogStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStreamRequest.Merge(m, src)
}
func (m *LogStreamRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LogStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogStreamRequest proto.InternalMessageInfo

func (m *LogStreamRequest) GetLogStream() *varlogpb.LogStreamDescriptor {
	if m != nil {
		return m.LogStream
	}
	return nil
}

type SealRequest struct {
	ClusterID   github_com_kakao_varlog_pkg_types.ClusterID   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.com/kakao/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,2,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *SealRequest) Reset()         { *m = SealRequest{} }
func (m *SealRequest) String() string { return proto.CompactTextString(m) }
func (*SealRequest) ProtoMessage()    {}
func (*SealRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{4}
}
func (m *SealRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SealRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SealRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SealRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealRequest.Merge(m, src)
}
func (m *SealRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SealRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SealRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SealRequest proto.InternalMessageInfo

func (m *SealRequest) GetClusterID() github_com_kakao_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *SealRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

type SealResponse struct {
	Status            varlogpb.LogStreamStatus               `protobuf:"varint,1,opt,name=status,proto3,enum=varlog.varlogpb.LogStreamStatus" json:"status,omitempty"`
	LastCommittedGLSN github_com_kakao_varlog_pkg_types.GLSN `protobuf:"varint,2,opt,name=last_committed_glsn,json=lastCommittedGlsn,proto3,casttype=github.com/kakao/varlog/pkg/types.GLSN" json:"last_committed_glsn,omitempty"`
}

func (m *SealResponse) Reset()         { *m = SealResponse{} }
func (m *SealResponse) String() string { return proto.CompactTextString(m) }
func (*SealResponse) ProtoMessage()    {}
func (*SealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{5}
}
func (m *SealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealResponse.Merge(m, src)
}
func (m *SealResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SealResponse proto.InternalMessageInfo

func (m *SealResponse) GetStatus() varlogpb.LogStreamStatus {
	if m != nil {
		return m.Status
	}
	return varlogpb.LogStreamStatusRunning
}

func (m *SealResponse) GetLastCommittedGLSN() github_com_kakao_varlog_pkg_types.GLSN {
	if m != nil {
		return m.LastCommittedGLSN
	}
	return 0
}

type UnsealRequest struct {
	ClusterID   github_com_kakao_varlog_pkg_types.ClusterID   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3,casttype=github.com/kakao/varlog/pkg/types.ClusterID" json:"cluster_id,omitempty"`
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,2,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *UnsealRequest) Reset()         { *m = UnsealRequest{} }
func (m *UnsealRequest) String() string { return proto.CompactTextString(m) }
func (*UnsealRequest) ProtoMessage()    {}
func (*UnsealRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{6}
}
func (m *UnsealRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsealRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsealRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsealRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsealRequest.Merge(m, src)
}
func (m *UnsealRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UnsealRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsealRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnsealRequest proto.InternalMessageInfo

func (m *UnsealRequest) GetClusterID() github_com_kakao_varlog_pkg_types.ClusterID {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *UnsealRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

type UnsealResponse struct {
	Status varlogpb.LogStreamStatus `protobuf:"varint,1,opt,name=status,proto3,enum=varlog.varlogpb.LogStreamStatus" json:"status,omitempty"`
}

func (m *UnsealResponse) Reset()         { *m = UnsealResponse{} }
func (m *UnsealResponse) String() string { return proto.CompactTextString(m) }
func (*UnsealResponse) ProtoMessage()    {}
func (*UnsealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{7}
}
func (m *UnsealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsealResponse.Merge(m, src)
}
func (m *UnsealResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UnsealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnsealResponse proto.InternalMessageInfo

func (m *UnsealResponse) GetStatus() varlogpb.LogStreamStatus {
	if m != nil {
		return m.Status
	}
	return varlogpb.LogStreamStatusRunning
}

type TopicRequest struct {
	TopicID github_com_kakao_varlog_pkg_types.TopicID `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3,casttype=github.com/kakao/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
}

func (m *TopicRequest) Reset()         { *m = TopicRequest{} }
func (m *TopicRequest) String() string { return proto.CompactTextString(m) }
func (*TopicRequest) ProtoMessage()    {}
func (*TopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{8}
}
func (m *TopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicRequest.Merge(m, src)
}
func (m *TopicRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopicRequest proto.InternalMessageInfo

func (m *TopicRequest) GetTopicID() github_com_kakao_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

type GetCommitResultRequest struct {
	TopicID     github_com_kakao_varlog_pkg_types.TopicID     `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3,casttype=github.com/kakao/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,2,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *GetCommitResultRequest) Reset()         { *m = GetCommitResultRequest{} }
func (m *GetCommitResultRequest) String() string { return proto.CompactTextString(m) }
func (*GetCommitResultRequest) ProtoMessage()    {}
func (*GetCommitResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{9}
}
func (m *GetCommitResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommitResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommitResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCommitResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommitResultRequest.Merge(m, src)
}
func (m *GetCommitResultRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetCommitResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommitResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommitResultRequest proto.InternalMessageInfo

func (m *GetCommitResultRequest) GetTopicID() github_com_kakao_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *GetCommitResultRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

type GetCommitResultResponse struct {
	CommitResult snpb.LogStreamCommitResult `protobuf:"bytes,1,opt,name=commit_result,json=commitResult,proto3" json:"commit_result"`
}

func (m *GetCommitResultResponse) Reset()         { *m = GetCommitResultResponse{} }
func (m *GetCommitResultResponse) String() string { return proto.CompactTextString(m) }
func (*GetCommitResultResponse) ProtoMessage()    {}
func (*GetCommitResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{10}
}
func (m *GetCommitResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommitResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommitResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCommitResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommitResultResponse.Merge(m, src)
}
func (m *GetCommitResultResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetCommitResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommitResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommitResultResponse proto.InternalMessageInfo

func (m *GetCommitResultResponse) GetCommitResult() snpb.LogStreamCommitResult {
	if m != nil {
		return m.CommitResult
	}
	return snpb.LogStreamCommitResult{}
}

type GetReportsRequest struct {
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,1,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *GetReportsRequest) Reset()         { *m = GetReportsRequest{} }
func (m *GetReportsRequest) String() string { return proto.CompactTextString(m) }
func (*GetReportsRequest) ProtoMessage()    {}
func (*GetReportsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{11}
}
func (m *GetReportsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReportsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReportsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReportsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReportsRequest.Merge(m, src)
}
func (m *GetReportsRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetReportsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReportsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReportsRequest proto.InternalMessageInfo

func (m *GetReportsRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

type GetReportsResponse struct {
	Reports LogStreamUncommitReports `protobuf:"bytes,1,opt,name=reports,proto3" json:"reports"`
}

func (m *GetReportsResponse) Reset()         { *m = GetReportsResponse{} }
func (m *GetReportsResponse) String() string { return proto.CompactTextString(m) }
func (*GetReportsResponse) ProtoMessage()    {}
func (*GetReportsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffe516e0fdff161, []int{12}
}
func (m *GetReportsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReportsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReportsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReportsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReportsResponse.Merge(m, src)
}
func (m *GetReportsResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetReportsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReportsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReportsResponse proto.InternalMessageInfo

func (m *GetReportsResponse) GetReports() LogStreamUncommitReports {
	if m != nil {
		return m.Reports
	}
	return LogStreamUncommitReports{}
}

func init() {
	proto.RegisterType((*GetMetadataRequest)(nil), "varlog.mrpb.GetMetadataRequest")
	proto.RegisterType((*GetMetadataResponse)(nil), "varlog.mrpb.GetMetadataResponse")
	proto.RegisterType((*StorageNodeRequest)(nil), "varlog.mrpb.StorageNodeRequest")
	proto.RegisterType((*LogStreamRequest)(nil), "varlog.mrpb.LogStreamRequest")
	proto.RegisterType((*SealRequest)(nil), "varlog.mrpb.SealRequest")
	proto.RegisterType((*SealResponse)(nil), "varlog.mrpb.SealResponse")
	proto.RegisterType((*UnsealRequest)(nil), "varlog.mrpb.UnsealRequest")
	proto.RegisterType((*UnsealResponse)(nil), "varlog.mrpb.UnsealResponse")
	proto.RegisterType((*TopicRequest)(nil), "varlog.mrpb.TopicRequest")
	proto.RegisterType((*GetCommitResultRequest)(nil), "varlog.mrpb.GetCommitResultRequest")
	proto.RegisterType((*GetCommitResultResponse)(nil), "varlog.mrpb.GetCommitResultResponse")
	proto.RegisterType((*GetReportsRequest)(nil), "varlog.mrpb.GetReportsRequest")
	proto.RegisterType((*GetReportsResponse)(nil), "varlog.mrpb.GetReportsResponse")
}

func init() {
	proto.RegisterFile("proto/mrpb/metadata_repository.proto", fileDescriptor_0ffe516e0fdff161)
}

var fileDescriptor_0ffe516e0fdff161 = []byte{
	// 875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xbd, 0x6e, 0xdc, 0x46,
	0x10, 0x3e, 0x06, 0x8a, 0x64, 0xcd, 0x49, 0x56, 0xb4, 0x4a, 0x6c, 0x89, 0x46, 0x48, 0x81, 0x52,
	0x8c, 0x04, 0x81, 0x49, 0x40, 0x69, 0x5c, 0x38, 0x70, 0x20, 0xc9, 0x11, 0xce, 0x90, 0xe5, 0x80,
	0x17, 0xa5, 0x88, 0x91, 0x10, 0x3c, 0x72, 0x4d, 0x13, 0xe2, 0x71, 0x99, 0xdd, 0x3d, 0x03, 0x7a,
	0x8b, 0x3c, 0x42, 0x5e, 0x23, 0x6d, 0x2a, 0x97, 0x42, 0xd2, 0xa4, 0xba, 0xe2, 0xee, 0x2d, 0x5c,
	0x05, 0x5c, 0xee, 0xf2, 0xe7, 0x7e, 0x7c, 0x85, 0xa5, 0x14, 0xee, 0xc8, 0x9d, 0x6f, 0xbe, 0xf9,
	0x66, 0x66, 0x39, 0x43, 0xd8, 0xcf, 0x28, 0xe1, 0xc4, 0xe9, 0xd3, 0xac, 0xe7, 0xf4, 0x31, 0xf7,
	0x43, 0x9f, 0xfb, 0x1e, 0xc5, 0x19, 0x61, 0x31, 0x27, 0xf4, 0xd2, 0x16, 0x66, 0xd4, 0x7e, 0xed,
	0xd3, 0x84, 0x44, 0x76, 0x0e, 0xd3, 0x1f, 0x44, 0x31, 0x7f, 0x35, 0xe8, 0xd9, 0x01, 0xe9, 0x3b,
	0x11, 0x89, 0x88, 0x23, 0x30, 0xbd, 0xc1, 0x4b, 0xf1, 0x56, 0xf0, 0xe5, 0x4f, 0x85, 0xaf, 0x7e,
	0x2f, 0x22, 0x24, 0x4a, 0x70, 0x85, 0xc2, 0xfd, 0x8c, 0x4b, 0x62, 0xfd, 0x6e, 0x41, 0x5c, 0x0b,
	0x2e, 0x0d, 0x06, 0x4b, 0xb3, 0x9e, 0x93, 0x90, 0xc8, 0x63, 0x9c, 0x62, 0xbf, 0x2f, 0x34, 0x51,
	0x8e, 0xa9, 0xb4, 0xef, 0x09, 0xc5, 0xd4, 0x7f, 0xc9, 0xbd, 0xb9, 0xb2, 0xad, 0x4f, 0x01, 0x9d,
	0x60, 0xfe, 0x4c, 0xda, 0x5d, 0xfc, 0xdb, 0x00, 0x33, 0x6e, 0xfd, 0x04, 0x5b, 0x8d, 0x53, 0x96,
	0x91, 0x94, 0x61, 0xf4, 0x18, 0x6e, 0x29, 0xa6, 0x6d, 0x6d, 0x57, 0xfb, 0xb2, 0x7d, 0xb0, 0x67,
	0xcb, 0xb4, 0x95, 0x48, 0x5b, 0x39, 0x1d, 0x63, 0x16, 0xd0, 0x38, 0xe3, 0x84, 0xba, 0xa5, 0x93,
	0x85, 0x01, 0x75, 0x39, 0xa1, 0x7e, 0x84, 0xcf, 0x48, 0x88, 0x65, 0x34, 0xf4, 0x1c, 0xd6, 0x58,
	0x71, 0xea, 0xa5, 0x24, 0xc4, 0x92, 0xfa, 0xfe, 0x14, 0x75, 0xcd, 0xb5, 0x62, 0x3f, 0x5c, 0x7a,
	0x33, 0x34, 0x35, 0xb7, 0xcd, 0x2a, 0xa3, 0xf5, 0x0b, 0x7c, 0x72, 0x4a, 0xa2, 0xae, 0xa8, 0x8a,
	0x0a, 0xd2, 0x01, 0xa8, 0x4a, 0x25, 0x43, 0xec, 0x4f, 0x85, 0x28, 0xdd, 0xa6, 0x02, 0xac, 0x26,
	0xca, 0x64, 0x5d, 0x69, 0xd0, 0xee, 0x62, 0x3f, 0x51, 0xd4, 0x2f, 0x00, 0x82, 0x64, 0xc0, 0x38,
	0xa6, 0x5e, 0x1c, 0x0a, 0xea, 0x8f, 0x0f, 0x1f, 0x8d, 0x86, 0xe6, 0xea, 0x51, 0x71, 0xda, 0x39,
	0x7e, 0x3b, 0x34, 0xbf, 0xae, 0x5d, 0x89, 0x0b, 0xff, 0xc2, 0x27, 0x4e, 0x11, 0xd4, 0xc9, 0x2e,
	0x22, 0x87, 0x5f, 0x66, 0x98, 0xd9, 0x25, 0xdc, 0x5d, 0x95, 0x7c, 0x9d, 0x10, 0x85, 0xb0, 0x5e,
	0x6b, 0x71, 0x1c, 0x6e, 0x7f, 0x24, 0xf8, 0xbf, 0x1b, 0x0d, 0xcd, 0x76, 0xa9, 0x56, 0x44, 0x78,
	0xb0, 0x38, 0x42, 0xcd, 0xc1, 0x6d, 0x97, 0x09, 0x75, 0x42, 0xeb, 0x4f, 0x0d, 0xd6, 0x8a, 0x94,
	0x64, 0xab, 0x1f, 0xc2, 0x32, 0xe3, 0x3e, 0x1f, 0x30, 0x91, 0xcf, 0xed, 0x83, 0xdd, 0xf9, 0xa5,
	0xea, 0x0a, 0x9c, 0x2b, 0xf1, 0x88, 0xc0, 0x56, 0xe2, 0x33, 0xee, 0x05, 0xa4, 0xdf, 0x8f, 0x39,
	0xc7, 0xa1, 0x17, 0x25, 0x2c, 0x15, 0xb2, 0x97, 0x0e, 0x1f, 0x8f, 0x86, 0xe6, 0xe6, 0xa9, 0xcf,
	0xf8, 0x91, 0xb2, 0x9e, 0x9c, 0x76, 0xcf, 0xde, 0x0e, 0xcd, 0xfb, 0x8b, 0xc5, 0xe7, 0x48, 0x77,
	0x33, 0x69, 0x38, 0x27, 0x2c, 0xb5, 0xfe, 0xd6, 0x60, 0xfd, 0x3c, 0x65, 0x1f, 0x56, 0x43, 0x9e,
	0xc2, 0x6d, 0x95, 0xd3, 0xfb, 0x76, 0xc4, 0x0a, 0x60, 0xed, 0x47, 0x92, 0xc5, 0x81, 0x2a, 0x4f,
	0x17, 0x6e, 0xf1, 0xfc, 0xbd, 0x2a, 0xce, 0xc3, 0xd1, 0xd0, 0x5c, 0x11, 0x18, 0x21, 0xfc, 0xab,
	0xc5, 0xc2, 0x25, 0xd8, 0x5d, 0x11, 0x4c, 0x9d, 0xd0, 0xfa, 0x47, 0x83, 0x3b, 0x27, 0x58, 0xb6,
	0xc6, 0xc5, 0x6c, 0x90, 0xf0, 0x9b, 0x8c, 0xf7, 0x3f, 0xb5, 0xe1, 0x15, 0xdc, 0x9d, 0x4a, 0x4a,
	0xf6, 0xe3, 0x19, 0xac, 0x17, 0x57, 0xdc, 0xa3, 0xc2, 0x20, 0x67, 0x8a, 0xa5, 0xda, 0x92, 0x4f,
	0xe7, 0x8a, 0xb8, 0x4e, 0x21, 0x26, 0x4a, 0xcb, 0x5d, 0x0b, 0x6a, 0x67, 0xd6, 0x25, 0x6c, 0x9e,
	0x60, 0xee, 0x8a, 0x11, 0xce, 0x54, 0xe5, 0xa6, 0x92, 0xd4, 0x6e, 0x22, 0xc9, 0x17, 0x62, 0x07,
	0x94, 0xa1, 0x65, 0x7e, 0x4f, 0x60, 0xa5, 0x58, 0x28, 0x4c, 0x66, 0xf6, 0x85, 0x5d, 0x5b, 0x71,
	0x15, 0xdb, 0x79, 0xaa, 0xf2, 0x10, 0x60, 0x99, 0x9c, 0xf2, 0x3d, 0xf8, 0x6b, 0x05, 0x76, 0xaa,
	0x45, 0xa2, 0xb6, 0x4f, 0x17, 0xd3, 0xd7, 0x71, 0x80, 0xd1, 0x0f, 0xb0, 0xe5, 0xe2, 0x28, 0xce,
	0x3f, 0xad, 0xda, 0x74, 0x47, 0x66, 0x23, 0xd4, 0xf4, 0xca, 0xd0, 0xef, 0xd8, 0xc5, 0xca, 0xb4,
	0xd5, 0xca, 0xb4, 0x9f, 0xe4, 0x2b, 0xd3, 0x6a, 0x21, 0x17, 0x3e, 0x3b, 0x4f, 0xe9, 0xf5, 0x72,
	0x1e, 0xc3, 0xba, 0x52, 0x29, 0xee, 0x21, 0xda, 0x69, 0x70, 0xd5, 0x3f, 0xae, 0x77, 0xb0, 0x7c,
	0x0f, 0x1b, 0x95, 0xb2, 0xf7, 0xe0, 0x39, 0x85, 0x4d, 0xa5, 0xa6, 0x6c, 0x02, 0xfa, 0x7c, 0x76,
	0x73, 0x16, 0xb3, 0x9d, 0xc1, 0x56, 0xa5, 0xea, 0x1a, 0xf8, 0x9e, 0xc2, 0xc6, 0x79, 0x16, 0xfa,
	0x1c, 0x5f, 0x03, 0x97, 0x0b, 0xed, 0xda, 0x6f, 0xc8, 0x44, 0x07, 0xa7, 0x7f, 0x5b, 0xf4, 0xdd,
	0xf9, 0x80, 0xe2, 0x52, 0x5b, 0x2d, 0xf4, 0x2d, 0x2c, 0xe5, 0x8b, 0x0e, 0x6d, 0x37, 0xaf, 0x43,
	0xb5, 0x3d, 0xf4, 0x9d, 0x19, 0x96, 0xd2, 0xfd, 0x08, 0x96, 0x8b, 0xb9, 0x8c, 0xf4, 0x06, 0xac,
	0xb1, 0x80, 0xf4, 0x7b, 0x33, 0x6d, 0x25, 0xc9, 0xaf, 0xb0, 0x31, 0x31, 0x55, 0xd0, 0xde, 0xa4,
	0xf4, 0x19, 0x83, 0x54, 0xdf, 0x7f, 0x37, 0xa8, 0xe4, 0x7f, 0x0e, 0x50, 0x7d, 0xd0, 0xc8, 0x98,
	0xf4, 0x6a, 0x0e, 0x19, 0xdd, 0x9c, 0x6b, 0x57, 0x84, 0x87, 0x8f, 0xde, 0x8c, 0x0c, 0xed, 0x6a,
	0x64, 0x68, 0xbf, 0x8f, 0x8d, 0xd6, 0x1f, 0x63, 0x43, 0xbb, 0x1a, 0x1b, 0xad, 0x7f, 0xc7, 0x46,
	0xeb, 0x67, 0x6b, 0xee, 0xdc, 0x29, 0x7f, 0x9a, 0x7b, 0xcb, 0xe2, 0xf9, 0x9b, 0xff, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xbc, 0xb6, 0xa8, 0x25, 0x49, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetadataRepositoryServiceClient is the client API for MetadataRepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetadataRepositoryServiceClient interface {
	RegisterStorageNode(ctx context.Context, in *StorageNodeRequest, opts ...grpc.CallOption) (*types.Empty, error)
	UnregisterStorageNode(ctx context.Context, in *StorageNodeRequest, opts ...grpc.CallOption) (*types.Empty, error)
	RegisterTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*types.Empty, error)
	UnregisterTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*types.Empty, error)
	RegisterLogStream(ctx context.Context, in *LogStreamRequest, opts ...grpc.CallOption) (*types.Empty, error)
	UnregisterLogStream(ctx context.Context, in *LogStreamRequest, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateLogStream(ctx context.Context, in *LogStreamRequest, opts ...grpc.CallOption) (*types.Empty, error)
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)
	Seal(ctx context.Context, in *SealRequest, opts ...grpc.CallOption) (*SealResponse, error)
	Unseal(ctx context.Context, in *UnsealRequest, opts ...grpc.CallOption) (*UnsealResponse, error)
	GetCommitResult(ctx context.Context, in *GetCommitResultRequest, opts ...grpc.CallOption) (*GetCommitResultResponse, error)
	GetReports(ctx context.Context, in *GetReportsRequest, opts ...grpc.CallOption) (*GetReportsResponse, error)
}

type metadataRepositoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetadataRepositoryServiceClient(cc *grpc.ClientConn) MetadataRepositoryServiceClient {
	return &metadataRepositoryServiceClient{cc}
}

func (c *metadataRepositoryServiceClient) RegisterStorageNode(ctx context.Context, in *StorageNodeRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/RegisterStorageNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) UnregisterStorageNode(ctx context.Context, in *StorageNodeRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/UnregisterStorageNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) RegisterTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/RegisterTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) UnregisterTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/UnregisterTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) RegisterLogStream(ctx context.Context, in *LogStreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/RegisterLogStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) UnregisterLogStream(ctx context.Context, in *LogStreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/UnregisterLogStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) UpdateLogStream(ctx context.Context, in *LogStreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/UpdateLogStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
	out := new(GetMetadataResponse)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) Seal(ctx context.Context, in *SealRequest, opts ...grpc.CallOption) (*SealResponse, error) {
	out := new(SealResponse)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/Seal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) Unseal(ctx context.Context, in *UnsealRequest, opts ...grpc.CallOption) (*UnsealResponse, error) {
	out := new(UnsealResponse)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/Unseal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) GetCommitResult(ctx context.Context, in *GetCommitResultRequest, opts ...grpc.CallOption) (*GetCommitResultResponse, error) {
	out := new(GetCommitResultResponse)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/GetCommitResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRepositoryServiceClient) GetReports(ctx context.Context, in *GetReportsRequest, opts ...grpc.CallOption) (*GetReportsResponse, error) {
	out := new(GetReportsResponse)
	err := c.cc.Invoke(ctx, "/varlog.mrpb.MetadataRepositoryService/GetReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataRepositoryServiceServer is the server API for MetadataRepositoryService service.
type MetadataRepositoryServiceServer interface {
	RegisterStorageNode(context.Context, *StorageNodeRequest) (*types.Empty, error)
	UnregisterStorageNode(context.Context, *StorageNodeRequest) (*types.Empty, error)
	RegisterTopic(context.Context, *TopicRequest) (*types.Empty, error)
	UnregisterTopic(context.Context, *TopicRequest) (*types.Empty, error)
	RegisterLogStream(context.Context, *LogStreamRequest) (*types.Empty, error)
	UnregisterLogStream(context.Context, *LogStreamRequest) (*types.Empty, error)
	UpdateLogStream(context.Context, *LogStreamRequest) (*types.Empty, error)
	GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error)
	Seal(context.Context, *SealRequest) (*SealResponse, error)
	Unseal(context.Context, *UnsealRequest) (*UnsealResponse, error)
	GetCommitResult(context.Context, *GetCommitResultRequest) (*GetCommitResultResponse, error)
	GetReports(context.Context, *GetReportsRequest) (*GetReportsResponse, error)
}

// UnimplementedMetadataRepositoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMetadataRepositoryServiceServer struct {
}

func (*UnimplementedMetadataRepositoryServiceServer) RegisterStorageNode(ctx context.Context, req *StorageNodeRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStorageNode not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) UnregisterStorageNode(ctx context.Context, req *StorageNodeRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterStorageNode not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) RegisterTopic(ctx context.Context, req *TopicRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTopic not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) UnregisterTopic(ctx context.Context, req *TopicRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterTopic not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) RegisterLogStream(ctx context.Context, req *LogStreamRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLogStream not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) UnregisterLogStream(ctx context.Context, req *LogStreamRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterLogStream not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) UpdateLogStream(ctx context.Context, req *LogStreamRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLogStream not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) GetMetadata(ctx context.Context, req *GetMetadataRequest) (*GetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) Seal(ctx context.Context, req *SealRequest) (*SealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seal not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) Unseal(ctx context.Context, req *UnsealRequest) (*UnsealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unseal not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) GetCommitResult(ctx context.Context, req *GetCommitResultRequest) (*GetCommitResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitResult not implemented")
}
func (*UnimplementedMetadataRepositoryServiceServer) GetReports(ctx context.Context, req *GetReportsRequest) (*GetReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReports not implemented")
}

func RegisterMetadataRepositoryServiceServer(s *grpc.Server, srv MetadataRepositoryServiceServer) {
	s.RegisterService(&_MetadataRepositoryService_serviceDesc, srv)
}

func _MetadataRepositoryService_RegisterStorageNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).RegisterStorageNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/RegisterStorageNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).RegisterStorageNode(ctx, req.(*StorageNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_UnregisterStorageNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).UnregisterStorageNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/UnregisterStorageNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).UnregisterStorageNode(ctx, req.(*StorageNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_RegisterTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).RegisterTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/RegisterTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).RegisterTopic(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_UnregisterTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).UnregisterTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/UnregisterTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).UnregisterTopic(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_RegisterLogStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).RegisterLogStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/RegisterLogStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).RegisterLogStream(ctx, req.(*LogStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_UnregisterLogStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).UnregisterLogStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/UnregisterLogStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).UnregisterLogStream(ctx, req.(*LogStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_UpdateLogStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).UpdateLogStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/UpdateLogStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).UpdateLogStream(ctx, req.(*LogStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_Seal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).Seal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/Seal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).Seal(ctx, req.(*SealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_Unseal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).Unseal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/Unseal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).Unseal(ctx, req.(*UnsealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_GetCommitResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).GetCommitResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/GetCommitResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).GetCommitResult(ctx, req.(*GetCommitResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRepositoryService_GetReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRepositoryServiceServer).GetReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.mrpb.MetadataRepositoryService/GetReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRepositoryServiceServer).GetReports(ctx, req.(*GetReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetadataRepositoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "varlog.mrpb.MetadataRepositoryService",
	HandlerType: (*MetadataRepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterStorageNode",
			Handler:    _MetadataRepositoryService_RegisterStorageNode_Handler,
		},
		{
			MethodName: "UnregisterStorageNode",
			Handler:    _MetadataRepositoryService_UnregisterStorageNode_Handler,
		},
		{
			MethodName: "RegisterTopic",
			Handler:    _MetadataRepositoryService_RegisterTopic_Handler,
		},
		{
			MethodName: "UnregisterTopic",
			Handler:    _MetadataRepositoryService_UnregisterTopic_Handler,
		},
		{
			MethodName: "RegisterLogStream",
			Handler:    _MetadataRepositoryService_RegisterLogStream_Handler,
		},
		{
			MethodName: "UnregisterLogStream",
			Handler:    _MetadataRepositoryService_UnregisterLogStream_Handler,
		},
		{
			MethodName: "UpdateLogStream",
			Handler:    _MetadataRepositoryService_UpdateLogStream_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _MetadataRepositoryService_GetMetadata_Handler,
		},
		{
			MethodName: "Seal",
			Handler:    _MetadataRepositoryService_Seal_Handler,
		},
		{
			MethodName: "Unseal",
			Handler:    _MetadataRepositoryService_Unseal_Handler,
		},
		{
			MethodName: "GetCommitResult",
			Handler:    _MetadataRepositoryService_GetCommitResult_Handler,
		},
		{
			MethodName: "GetReports",
			Handler:    _MetadataRepositoryService_GetReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mrpb/metadata_repository.proto",
}

func (m *GetMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadataRepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StorageNode != nil {
		{
			size, err := m.StorageNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadataRepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStream != nil {
		{
			size, err := m.LogStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadataRepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SealRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SealRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SealRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterID != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SealResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommittedGLSN != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.LastCommittedGLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnsealRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsealRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsealRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterID != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnsealResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicID != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCommitResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommitResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCommitResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCommitResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommitResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCommitResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommitResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadataRepository(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetReportsRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReportsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReportsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintMetadataRepository(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReportsResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReportsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReportsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reports.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadataRepository(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMetadataRepository(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadataRepository(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetMetadataRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMetadataResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.ProtoSize()
		n += 1 + l + sovMetadataRepository(uint64(l))
	}
	return n
}

func (m *StorageNodeRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageNode != nil {
		l = m.StorageNode.ProtoSize()
		n += 1 + l + sovMetadataRepository(uint64(l))
	}
	return n
}

func (m *LogStreamRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogStream != nil {
		l = m.LogStream.ProtoSize()
		n += 1 + l + sovMetadataRepository(uint64(l))
	}
	return n
}

func (m *SealRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovMetadataRepository(uint64(m.ClusterID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovMetadataRepository(uint64(m.LogStreamID))
	}
	return n
}

func (m *SealResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovMetadataRepository(uint64(m.Status))
	}
	if m.LastCommittedGLSN != 0 {
		n += 1 + sovMetadataRepository(uint64(m.LastCommittedGLSN))
	}
	return n
}

func (m *UnsealRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovMetadataRepository(uint64(m.ClusterID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovMetadataRepository(uint64(m.LogStreamID))
	}
	return n
}

func (m *UnsealResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovMetadataRepository(uint64(m.Status))
	}
	return n
}

func (m *TopicRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovMetadataRepository(uint64(m.TopicID))
	}
	return n
}

func (m *GetCommitResultRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovMetadataRepository(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovMetadataRepository(uint64(m.LogStreamID))
	}
	return n
}

func (m *GetCommitResultResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommitResult.ProtoSize()
	n += 1 + l + sovMetadataRepository(uint64(l))
	return n
}

func (m *GetReportsRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogStreamID != 0 {
		n += 1 + sovMetadataRepository(uint64(m.LogStreamID))
	}
	return n
}

func (m *GetReportsResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reports.ProtoSize()
	n += 1 + l + sovMetadataRepository(uint64(l))
	return n
}

func sovMetadataRepository(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadataRepository(x uint64) (n int) {
	return sovMetadataRepository(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &varlogpb.MetadataDescriptor{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageNode == nil {
				m.StorageNode = &varlogpb.StorageNodeDescriptor{}
			}
			if err := m.StorageNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogStream == nil {
				m.LogStream = &varlogpb.LogStreamDescriptor{}
			}
			if err := m.LogStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SealRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SealRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SealRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_com_kakao_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= varlogpb.LogStreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommittedGLSN", wireType)
			}
			m.LastCommittedGLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommittedGLSN |= github_com_kakao_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsealRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsealRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsealRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= github_com_kakao_varlog_pkg_types.ClusterID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= varlogpb.LogStreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_com_kakao_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommitResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommitResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommitResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_com_kakao_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommitResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommitResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommitResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommitResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReportsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReportsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReportsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReportsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReportsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReportsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reports.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadataRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadataRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadataRepository(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadataRepository
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadataRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadataRepository
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadataRepository
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadataRepository
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadataRepository        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadataRepository          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadataRepository = fmt.Errorf("proto: unexpected end of group")
)
