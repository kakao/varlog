// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sequencer.proto

package sequencer

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SequencerRequest struct {
	Epoch                uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SequencerRequest) Reset()         { *m = SequencerRequest{} }
func (m *SequencerRequest) String() string { return proto.CompactTextString(m) }
func (*SequencerRequest) ProtoMessage()    {}
func (*SequencerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4c964fbd7973d0, []int{0}
}
func (m *SequencerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequencerRequest.Unmarshal(m, b)
}
func (m *SequencerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequencerRequest.Marshal(b, m, deterministic)
}
func (m *SequencerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequencerRequest.Merge(m, src)
}
func (m *SequencerRequest) XXX_Size() int {
	return xxx_messageInfo_SequencerRequest.Size(m)
}
func (m *SequencerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SequencerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SequencerRequest proto.InternalMessageInfo

func (m *SequencerRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type SequencerResponse struct {
	Glsn                 uint64   `protobuf:"varint,1,opt,name=glsn,proto3" json:"glsn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SequencerResponse) Reset()         { *m = SequencerResponse{} }
func (m *SequencerResponse) String() string { return proto.CompactTextString(m) }
func (*SequencerResponse) ProtoMessage()    {}
func (*SequencerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4c964fbd7973d0, []int{1}
}
func (m *SequencerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequencerResponse.Unmarshal(m, b)
}
func (m *SequencerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequencerResponse.Marshal(b, m, deterministic)
}
func (m *SequencerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequencerResponse.Merge(m, src)
}
func (m *SequencerResponse) XXX_Size() int {
	return xxx_messageInfo_SequencerResponse.Size(m)
}
func (m *SequencerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SequencerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SequencerResponse proto.InternalMessageInfo

func (m *SequencerResponse) GetGlsn() uint64 {
	if m != nil {
		return m.Glsn
	}
	return 0
}

func init() {
	proto.RegisterType((*SequencerRequest)(nil), "varlog.SequencerRequest")
	proto.RegisterType((*SequencerResponse)(nil), "varlog.SequencerResponse")
}

func init() { proto.RegisterFile("sequencer.proto", fileDescriptor_1e4c964fbd7973d0) }

var fileDescriptor_1e4c964fbd7973d0 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x4b, 0x2c,
	0xca, 0xc9, 0x4f, 0x97, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5,
	0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0x4b, 0x27, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05,
	0xd1, 0xa6, 0xa4, 0xc1, 0x25, 0x10, 0x0c, 0x33, 0x29, 0x08, 0xc4, 0x28, 0x2e, 0x11, 0x12, 0xe1,
	0x62, 0x4d, 0x2d, 0xc8, 0x4f, 0xce, 0x90, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x82, 0x70, 0x94,
	0xd4, 0xb9, 0x04, 0x91, 0x54, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x09, 0x71, 0xb1, 0xa4,
	0xe7, 0x14, 0xe7, 0x41, 0x55, 0x82, 0xd9, 0x46, 0x81, 0x48, 0x46, 0x06, 0xa7, 0x16, 0x95, 0x65,
	0x26, 0xa7, 0x0a, 0xd9, 0x72, 0xb1, 0xf8, 0xa5, 0x56, 0x94, 0x08, 0x49, 0xe8, 0x41, 0x9c, 0xa9,
	0x87, 0x6e, 0xa9, 0x94, 0x24, 0x16, 0x19, 0x88, 0x25, 0x4a, 0x0c, 0x4e, 0x26, 0x51, 0x46, 0x50,
	0x6f, 0xa5, 0x24, 0x96, 0xe6, 0x66, 0x27, 0x66, 0x27, 0xe6, 0x83, 0x3d, 0x08, 0xd1, 0x02, 0xa3,
	0x20, 0x9e, 0x83, 0x07, 0x4c, 0x12, 0x1b, 0x58, 0xc0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x79,
	0x51, 0x27, 0x1a, 0x2c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SequencerServiceClient is the client API for SequencerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SequencerServiceClient interface {
	Next(ctx context.Context, in *SequencerRequest, opts ...grpc.CallOption) (*SequencerResponse, error)
}

type sequencerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSequencerServiceClient(cc *grpc.ClientConn) SequencerServiceClient {
	return &sequencerServiceClient{cc}
}

func (c *sequencerServiceClient) Next(ctx context.Context, in *SequencerRequest, opts ...grpc.CallOption) (*SequencerResponse, error) {
	out := new(SequencerResponse)
	err := c.cc.Invoke(ctx, "/varlog.SequencerService/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerServiceServer is the server API for SequencerService service.
type SequencerServiceServer interface {
	Next(context.Context, *SequencerRequest) (*SequencerResponse, error)
}

// UnimplementedSequencerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSequencerServiceServer struct {
}

func (*UnimplementedSequencerServiceServer) Next(ctx context.Context, req *SequencerRequest) (*SequencerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}

func RegisterSequencerServiceServer(s *grpc.Server, srv SequencerServiceServer) {
	s.RegisterService(&_SequencerService_serviceDesc, srv)
}

func _SequencerService_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequencerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.SequencerService/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).Next(ctx, req.(*SequencerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SequencerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "varlog.SequencerService",
	HandlerType: (*SequencerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Next",
			Handler:    _SequencerService_Next_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequencer.proto",
}
