apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-conf
  namespace: default
  labels:
    app: opentelemetry
    component: otel-collector-conf
data:
  otel-collector-config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 50
        spike_limit_percentage: 20
      batch:
    extensions:
      health_check:
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679
    exporters:
      logging:
        loglevel: debug
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: "varlog"
        send_timestamps: true
        resource_to_telemetry_conversion:
          enabled: true

    service:
      pipelines:
        metrics:
          receivers: [otlp]
          processors: [batch, memory_limiter]
          exporters: [prometheus]
      extensions: [health_check, pprof, zpages]
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector-pprof-service
  namespace: ingress-nginx
  annotations:
    service.beta.kubernetes.io/openstack-internal-load-balancer: "true"
spec:
  externalTrafficPolicy: Local
  selector:
    app.kubernetes.io/name: ingress-nginx
  type: LoadBalancer
  ports:
  - name: otel-collector
    port: 1777
    targetPort: 1777
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: default
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  ports:
  - port: 1777
    name: pprof
    targetPort: 1777
  - port: 13133
    name: health-check
    targetPort: 13133
  - port: 55679
    name: zpages
    targetPort: 55679
  - port: 4317
    name: grpc
    targetPort: 4317
  - port: 55681
    name: http
    targetPort: 55681
  - port: 8889
    name: prometheus
  selector:
    component: otel-collector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: default
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  selector:
    matchLabels:
      app: opentelemetry
      component: otel-collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1 #TODO - adjust this to your own requirements
  template:
    metadata:
      labels:
        app: opentelemetry
        component: otel-collector
    spec:
      initContainers:
      - name: "init-jaeger"
        image: mdock.daumkakao.io/busybox:stable
        command:
        - "sh"
        - "-c"
        - "until nslookup jaeger-collector; do echo waiting for jaeger-collector; sleep 2; done"
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector:latest
        command:
        - "/otelcol"
        - "--config=/conf/otel-collector-config.yaml"
        - "--mem-ballast-size-mib=1000"
        ports:
        - containerPort: 1777  # Default endpoint for pprof.
        - containerPort: 55679 # Default endpoint for ZPages.
        - containerPort: 4317  # Default endpoint for OpenTelemetry grpc receiver.
        - containerPort: 55681 # Default endpoint for OpenTelemetry http receiver.
        - containerPort: 8889  # Default endpoint for prometheus.
        volumeMounts:
        - name: otel-collector-config-vol
          mountPath: /conf
        livenessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
        readinessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
      volumes:
      - name: otel-collector-config-vol
        configMap:
          name: otel-collector-conf
          items:
          - key: otel-collector-config
            path: otel-collector-config.yaml
      dnsPolicy: ClusterFirst
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "varlog-mr"
                - "varlog-sn"
                - "varlog-vms"
                - "prometheus"
                - "jaeger"
            topologyKey: "kubernetes.io/hostname"
