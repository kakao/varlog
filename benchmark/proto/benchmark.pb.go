// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: benchmark/proto/benchmark.proto

package proto

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Buffer struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Buffer) Reset()         { *m = Buffer{} }
func (m *Buffer) String() string { return proto.CompactTextString(m) }
func (*Buffer) ProtoMessage()    {}
func (*Buffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{0}
}
func (m *Buffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Buffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Buffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Buffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Buffer.Merge(m, src)
}
func (m *Buffer) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Buffer) XXX_DiscardUnknown() {
	xxx_messageInfo_Buffer.DiscardUnknown(m)
}

var xxx_messageInfo_Buffer proto.InternalMessageInfo

func (m *Buffer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PayloadA struct {
	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PayloadA) Reset()         { *m = PayloadA{} }
func (m *PayloadA) String() string { return proto.CompactTextString(m) }
func (*PayloadA) ProtoMessage()    {}
func (*PayloadA) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{1}
}
func (m *PayloadA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayloadA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayloadA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayloadA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadA.Merge(m, src)
}
func (m *PayloadA) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PayloadA) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadA.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadA proto.InternalMessageInfo

func (m *PayloadA) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PayloadA) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PayloadB struct {
	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data Buffer `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (m *PayloadB) Reset()         { *m = PayloadB{} }
func (m *PayloadB) String() string { return proto.CompactTextString(m) }
func (*PayloadB) ProtoMessage()    {}
func (*PayloadB) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{2}
}
func (m *PayloadB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayloadB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayloadB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayloadB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadB.Merge(m, src)
}
func (m *PayloadB) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PayloadB) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadB.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadB proto.InternalMessageInfo

func (m *PayloadB) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PayloadB) GetData() Buffer {
	if m != nil {
		return m.Data
	}
	return Buffer{}
}

type PayloadC struct {
	Id   int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data *Buffer `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PayloadC) Reset()         { *m = PayloadC{} }
func (m *PayloadC) String() string { return proto.CompactTextString(m) }
func (*PayloadC) ProtoMessage()    {}
func (*PayloadC) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{3}
}
func (m *PayloadC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayloadC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayloadC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayloadC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadC.Merge(m, src)
}
func (m *PayloadC) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PayloadC) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadC.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadC proto.InternalMessageInfo

func (m *PayloadC) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PayloadC) GetData() *Buffer {
	if m != nil {
		return m.Data
	}
	return nil
}

type MessagePayloadAHeap struct {
	Payloads []*PayloadA `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (m *MessagePayloadAHeap) Reset()         { *m = MessagePayloadAHeap{} }
func (m *MessagePayloadAHeap) String() string { return proto.CompactTextString(m) }
func (*MessagePayloadAHeap) ProtoMessage()    {}
func (*MessagePayloadAHeap) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{4}
}
func (m *MessagePayloadAHeap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadAHeap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadAHeap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadAHeap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadAHeap.Merge(m, src)
}
func (m *MessagePayloadAHeap) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessagePayloadAHeap) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadAHeap.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadAHeap proto.InternalMessageInfo

func (m *MessagePayloadAHeap) GetPayloads() []*PayloadA {
	if m != nil {
		return m.Payloads
	}
	return nil
}

type MessagePayloadALessHeap struct {
	Payloads []PayloadA `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads"`
}

func (m *MessagePayloadALessHeap) Reset()         { *m = MessagePayloadALessHeap{} }
func (m *MessagePayloadALessHeap) String() string { return proto.CompactTextString(m) }
func (*MessagePayloadALessHeap) ProtoMessage()    {}
func (*MessagePayloadALessHeap) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{5}
}
func (m *MessagePayloadALessHeap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadALessHeap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadALessHeap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadALessHeap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadALessHeap.Merge(m, src)
}
func (m *MessagePayloadALessHeap) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessagePayloadALessHeap) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadALessHeap.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadALessHeap proto.InternalMessageInfo

func (m *MessagePayloadALessHeap) GetPayloads() []PayloadA {
	if m != nil {
		return m.Payloads
	}
	return nil
}

type MessagePayloadBHeap struct {
	Payloads []*PayloadB `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (m *MessagePayloadBHeap) Reset()         { *m = MessagePayloadBHeap{} }
func (m *MessagePayloadBHeap) String() string { return proto.CompactTextString(m) }
func (*MessagePayloadBHeap) ProtoMessage()    {}
func (*MessagePayloadBHeap) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{6}
}
func (m *MessagePayloadBHeap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadBHeap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadBHeap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadBHeap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadBHeap.Merge(m, src)
}
func (m *MessagePayloadBHeap) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessagePayloadBHeap) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadBHeap.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadBHeap proto.InternalMessageInfo

func (m *MessagePayloadBHeap) GetPayloads() []*PayloadB {
	if m != nil {
		return m.Payloads
	}
	return nil
}

type MessagePayloadBLessHeap struct {
	Payloads []PayloadB `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads"`
}

func (m *MessagePayloadBLessHeap) Reset()         { *m = MessagePayloadBLessHeap{} }
func (m *MessagePayloadBLessHeap) String() string { return proto.CompactTextString(m) }
func (*MessagePayloadBLessHeap) ProtoMessage()    {}
func (*MessagePayloadBLessHeap) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{7}
}
func (m *MessagePayloadBLessHeap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadBLessHeap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadBLessHeap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadBLessHeap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadBLessHeap.Merge(m, src)
}
func (m *MessagePayloadBLessHeap) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessagePayloadBLessHeap) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadBLessHeap.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadBLessHeap proto.InternalMessageInfo

func (m *MessagePayloadBLessHeap) GetPayloads() []PayloadB {
	if m != nil {
		return m.Payloads
	}
	return nil
}

type MessagePayloadCHeap struct {
	Payloads []*PayloadC `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (m *MessagePayloadCHeap) Reset()         { *m = MessagePayloadCHeap{} }
func (m *MessagePayloadCHeap) String() string { return proto.CompactTextString(m) }
func (*MessagePayloadCHeap) ProtoMessage()    {}
func (*MessagePayloadCHeap) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{8}
}
func (m *MessagePayloadCHeap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadCHeap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadCHeap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadCHeap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadCHeap.Merge(m, src)
}
func (m *MessagePayloadCHeap) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessagePayloadCHeap) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadCHeap.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadCHeap proto.InternalMessageInfo

func (m *MessagePayloadCHeap) GetPayloads() []*PayloadC {
	if m != nil {
		return m.Payloads
	}
	return nil
}

type MessagePayloadCLessHeap struct {
	Payloads []PayloadC `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads"`
}

func (m *MessagePayloadCLessHeap) Reset()         { *m = MessagePayloadCLessHeap{} }
func (m *MessagePayloadCLessHeap) String() string { return proto.CompactTextString(m) }
func (*MessagePayloadCLessHeap) ProtoMessage()    {}
func (*MessagePayloadCLessHeap) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{9}
}
func (m *MessagePayloadCLessHeap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadCLessHeap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadCLessHeap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadCLessHeap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadCLessHeap.Merge(m, src)
}
func (m *MessagePayloadCLessHeap) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessagePayloadCLessHeap) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadCLessHeap.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadCLessHeap proto.InternalMessageInfo

func (m *MessagePayloadCLessHeap) GetPayloads() []PayloadC {
	if m != nil {
		return m.Payloads
	}
	return nil
}

type MessagePayloadASplit struct {
	Ids   []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Datas [][]byte `protobuf:"bytes,2,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *MessagePayloadASplit) Reset()         { *m = MessagePayloadASplit{} }
func (m *MessagePayloadASplit) String() string { return proto.CompactTextString(m) }
func (*MessagePayloadASplit) ProtoMessage()    {}
func (*MessagePayloadASplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{10}
}
func (m *MessagePayloadASplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadASplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadASplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadASplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadASplit.Merge(m, src)
}
func (m *MessagePayloadASplit) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessagePayloadASplit) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadASplit.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadASplit proto.InternalMessageInfo

func (m *MessagePayloadASplit) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *MessagePayloadASplit) GetDatas() [][]byte {
	if m != nil {
		return m.Datas
	}
	return nil
}

type MessagePayloadBSplit struct {
	Ids   []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Datas []Buffer `protobuf:"bytes,2,rep,name=datas,proto3" json:"datas"`
}

func (m *MessagePayloadBSplit) Reset()         { *m = MessagePayloadBSplit{} }
func (m *MessagePayloadBSplit) String() string { return proto.CompactTextString(m) }
func (*MessagePayloadBSplit) ProtoMessage()    {}
func (*MessagePayloadBSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{11}
}
func (m *MessagePayloadBSplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadBSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadBSplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadBSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadBSplit.Merge(m, src)
}
func (m *MessagePayloadBSplit) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessagePayloadBSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadBSplit.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadBSplit proto.InternalMessageInfo

func (m *MessagePayloadBSplit) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *MessagePayloadBSplit) GetDatas() []Buffer {
	if m != nil {
		return m.Datas
	}
	return nil
}

type MessagePayloadCSplit struct {
	Ids   []int64   `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Datas []*Buffer `protobuf:"bytes,2,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *MessagePayloadCSplit) Reset()         { *m = MessagePayloadCSplit{} }
func (m *MessagePayloadCSplit) String() string { return proto.CompactTextString(m) }
func (*MessagePayloadCSplit) ProtoMessage()    {}
func (*MessagePayloadCSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f25dc9d9cde016, []int{12}
}
func (m *MessagePayloadCSplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadCSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadCSplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadCSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadCSplit.Merge(m, src)
}
func (m *MessagePayloadCSplit) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessagePayloadCSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadCSplit.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadCSplit proto.InternalMessageInfo

func (m *MessagePayloadCSplit) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *MessagePayloadCSplit) GetDatas() []*Buffer {
	if m != nil {
		return m.Datas
	}
	return nil
}

func init() {
	proto.RegisterType((*Buffer)(nil), "benchmark.proto.Buffer")
	proto.RegisterType((*PayloadA)(nil), "benchmark.proto.PayloadA")
	proto.RegisterType((*PayloadB)(nil), "benchmark.proto.PayloadB")
	proto.RegisterType((*PayloadC)(nil), "benchmark.proto.PayloadC")
	proto.RegisterType((*MessagePayloadAHeap)(nil), "benchmark.proto.MessagePayloadAHeap")
	proto.RegisterType((*MessagePayloadALessHeap)(nil), "benchmark.proto.MessagePayloadALessHeap")
	proto.RegisterType((*MessagePayloadBHeap)(nil), "benchmark.proto.MessagePayloadBHeap")
	proto.RegisterType((*MessagePayloadBLessHeap)(nil), "benchmark.proto.MessagePayloadBLessHeap")
	proto.RegisterType((*MessagePayloadCHeap)(nil), "benchmark.proto.MessagePayloadCHeap")
	proto.RegisterType((*MessagePayloadCLessHeap)(nil), "benchmark.proto.MessagePayloadCLessHeap")
	proto.RegisterType((*MessagePayloadASplit)(nil), "benchmark.proto.MessagePayloadASplit")
	proto.RegisterType((*MessagePayloadBSplit)(nil), "benchmark.proto.MessagePayloadBSplit")
	proto.RegisterType((*MessagePayloadCSplit)(nil), "benchmark.proto.MessagePayloadCSplit")
}

func init() { proto.RegisterFile("benchmark/proto/benchmark.proto", fileDescriptor_67f25dc9d9cde016) }

var fileDescriptor_67f25dc9d9cde016 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0x4a, 0xcd, 0x4b,
	0xce, 0xc8, 0x4d, 0x2c, 0xca, 0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x87, 0xf3, 0xf5, 0xc0,
	0x7c, 0x21, 0x7e, 0x34, 0x01, 0x29, 0xdd, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc,
	0x5c, 0xfd, 0xf4, 0xfc, 0xf4, 0x7c, 0x88, 0xbe, 0xa4, 0xd2, 0x34, 0x30, 0x0f, 0x62, 0x08, 0x88,
	0x05, 0x51, 0xae, 0x24, 0xc3, 0xc5, 0xe6, 0x54, 0x9a, 0x96, 0x96, 0x5a, 0x24, 0x24, 0xc4, 0xc5,
	0x92, 0x92, 0x58, 0x92, 0x28, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0x66, 0x2b, 0xe9, 0x71,
	0x71, 0x04, 0x24, 0x56, 0xe6, 0xe4, 0x27, 0xa6, 0x38, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x80,
	0x65, 0x99, 0x83, 0x98, 0x32, 0x53, 0xe0, 0xea, 0x99, 0x90, 0xd4, 0xfb, 0xc2, 0xd5, 0x3b, 0x61,
	0xa8, 0x37, 0x44, 0x52, 0xcf, 0x6d, 0x24, 0xae, 0x87, 0xe6, 0x70, 0x3d, 0x88, 0x33, 0x9c, 0x58,
	0x4e, 0xdc, 0x93, 0x67, 0x80, 0x1a, 0xe7, 0x0e, 0x37, 0xce, 0x19, 0xc3, 0x38, 0x6d, 0xa2, 0x8c,
	0x83, 0x1a, 0xe4, 0xc3, 0x25, 0xec, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x0a, 0xf3, 0x8e, 0x47,
	0x6a, 0x62, 0x81, 0x90, 0x29, 0x17, 0x47, 0x01, 0x84, 0x5f, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1,
	0x6d, 0x24, 0x89, 0x61, 0x0e, 0x4c, 0x43, 0x10, 0x5c, 0xa9, 0x52, 0x18, 0x97, 0x38, 0x9a, 0x69,
	0x3e, 0xa9, 0xc5, 0xc5, 0x60, 0x13, 0xad, 0x49, 0x30, 0x11, 0xea, 0x55, 0x84, 0xb9, 0x18, 0xae,
	0x74, 0x22, 0xd5, 0x95, 0x4e, 0xf8, 0x5c, 0xe9, 0x44, 0x8e, 0x2b, 0x9d, 0x08, 0xbb, 0xd2, 0x99,
	0x54, 0x57, 0x3a, 0xe3, 0x73, 0xa5, 0x33, 0x39, 0xae, 0x74, 0xc6, 0x70, 0xa5, 0x1d, 0x97, 0x08,
	0x5a, 0x1c, 0x05, 0x17, 0xe4, 0x64, 0x96, 0x08, 0x09, 0x70, 0x31, 0x67, 0x42, 0xcd, 0x63, 0x0e,
	0x02, 0x31, 0x85, 0x44, 0xb8, 0x58, 0x41, 0x69, 0xa4, 0x58, 0x82, 0x49, 0x81, 0x59, 0x83, 0x27,
	0x08, 0xc2, 0x51, 0x8a, 0x45, 0xd7, 0xef, 0x84, 0x4b, 0xbf, 0x31, 0xb2, 0x7e, 0x82, 0x09, 0x1b,
	0x6a, 0x7c, 0x38, 0xba, 0xf1, 0xce, 0xb8, 0x8c, 0xd7, 0x25, 0xce, 0x78, 0xa8, 0xc1, 0x4e, 0x3e,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x82, 0xc7, 0x72,
	0x8c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65, 0x04, 0x2d, 0x18, 0x52, 0x12,
	0x4b, 0x73, 0xb3, 0x13, 0xb3, 0x13, 0xf3, 0xc1, 0x45, 0x44, 0x59, 0x62, 0x51, 0x4e, 0x7e, 0x3a,
	0x8c, 0x42, 0x2b, 0x6d, 0x92, 0xd8, 0xc0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xac, 0x0e,
	0x63, 0xfb, 0x87, 0x04, 0x00, 0x00,
}

func (m *Buffer) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Buffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Buffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayloadA) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayloadA) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayloadA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBenchmark(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PayloadB) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayloadB) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayloadB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBenchmark(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintBenchmark(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PayloadC) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayloadC) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayloadC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBenchmark(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBenchmark(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadAHeap) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadAHeap) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadAHeap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for iNdEx := len(m.Payloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadALessHeap) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadALessHeap) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadALessHeap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for iNdEx := len(m.Payloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadBHeap) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadBHeap) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadBHeap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for iNdEx := len(m.Payloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadBLessHeap) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadBLessHeap) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadBLessHeap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for iNdEx := len(m.Payloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadCHeap) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadCHeap) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadCHeap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for iNdEx := len(m.Payloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadCLessHeap) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadCLessHeap) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadCLessHeap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for iNdEx := len(m.Payloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadASplit) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadASplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadASplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Datas[iNdEx])
			copy(dAtA[i:], m.Datas[iNdEx])
			i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Datas[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ids) > 0 {
		dAtA4 := make([]byte, len(m.Ids)*10)
		var j3 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintBenchmark(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadBSplit) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadBSplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadBSplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ids) > 0 {
		dAtA6 := make([]byte, len(m.Ids)*10)
		var j5 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintBenchmark(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadCSplit) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadCSplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadCSplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ids) > 0 {
		dAtA8 := make([]byte, len(m.Ids)*10)
		var j7 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintBenchmark(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBenchmark(dAtA []byte, offset int, v uint64) int {
	offset -= sovBenchmark(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Buffer) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	return n
}

func (m *PayloadA) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBenchmark(uint64(m.Id))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	return n
}

func (m *PayloadB) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBenchmark(uint64(m.Id))
	}
	l = m.Data.ProtoSize()
	n += 1 + l + sovBenchmark(uint64(l))
	return n
}

func (m *PayloadC) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBenchmark(uint64(m.Id))
	}
	if m.Data != nil {
		l = m.Data.ProtoSize()
		n += 1 + l + sovBenchmark(uint64(l))
	}
	return n
}

func (m *MessagePayloadAHeap) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for _, e := range m.Payloads {
			l = e.ProtoSize()
			n += 1 + l + sovBenchmark(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadALessHeap) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for _, e := range m.Payloads {
			l = e.ProtoSize()
			n += 1 + l + sovBenchmark(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadBHeap) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for _, e := range m.Payloads {
			l = e.ProtoSize()
			n += 1 + l + sovBenchmark(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadBLessHeap) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for _, e := range m.Payloads {
			l = e.ProtoSize()
			n += 1 + l + sovBenchmark(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadCHeap) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for _, e := range m.Payloads {
			l = e.ProtoSize()
			n += 1 + l + sovBenchmark(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadCLessHeap) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Payloads) > 0 {
		for _, e := range m.Payloads {
			l = e.ProtoSize()
			n += 1 + l + sovBenchmark(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadASplit) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovBenchmark(uint64(e))
		}
		n += 1 + sovBenchmark(uint64(l)) + l
	}
	if len(m.Datas) > 0 {
		for _, b := range m.Datas {
			l = len(b)
			n += 1 + l + sovBenchmark(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadBSplit) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovBenchmark(uint64(e))
		}
		n += 1 + sovBenchmark(uint64(l)) + l
	}
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.ProtoSize()
			n += 1 + l + sovBenchmark(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadCSplit) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovBenchmark(uint64(e))
		}
		n += 1 + sovBenchmark(uint64(l)) + l
	}
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.ProtoSize()
			n += 1 + l + sovBenchmark(uint64(l))
		}
	}
	return n
}

func sovBenchmark(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBenchmark(x uint64) (n int) {
	return sovBenchmark(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Buffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Buffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Buffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayloadA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayloadA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayloadA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayloadB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayloadB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayloadB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayloadC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayloadC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayloadC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Buffer{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadAHeap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadAHeap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadAHeap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads, &PayloadA{})
			if err := m.Payloads[len(m.Payloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadALessHeap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadALessHeap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadALessHeap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads, PayloadA{})
			if err := m.Payloads[len(m.Payloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadBHeap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadBHeap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadBHeap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads, &PayloadB{})
			if err := m.Payloads[len(m.Payloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadBLessHeap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadBLessHeap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadBLessHeap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads, PayloadB{})
			if err := m.Payloads[len(m.Payloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadCHeap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadCHeap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadCHeap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads, &PayloadC{})
			if err := m.Payloads[len(m.Payloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadCLessHeap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadCLessHeap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadCLessHeap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads, PayloadC{})
			if err := m.Payloads[len(m.Payloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadASplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadASplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadASplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBenchmark
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBenchmark
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, make([]byte, postIndex-iNdEx))
			copy(m.Datas[len(m.Datas)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadBSplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadBSplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadBSplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBenchmark
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBenchmark
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, Buffer{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadCSplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadCSplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadCSplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBenchmark
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBenchmark
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &Buffer{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBenchmark(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBenchmark
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBenchmark
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBenchmark
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBenchmark        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBenchmark          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBenchmark = fmt.Errorf("proto: unexpected end of group")
)
